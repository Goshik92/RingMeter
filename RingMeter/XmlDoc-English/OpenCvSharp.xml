<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCvSharp</name>
    </assembly>
    <members>
        <member name="T:OpenCvSharp.DisposableObject">
            <summary>
            Represents a class which manages its own memory. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isEnabledDispose">true if you permit disposing this class by GC</param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Dispose">
            <summary>
            Releases the resources
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.AllocGCHandle(System.Object)">
            <summary>
            Pins the object to be allocated by cvSetData.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.AllocMemory(System.Int32)">
            <summary>
            Allocates the specified size of memory.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.NotifyMemoryPressure(System.Int64)">
            <summary>
            Notifies the allocated size of memory.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.IsEnabledDispose">
            <summary>
            Gets or sets a value indicating whether you permit disposing this instance.
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.DataHandle">
            <summary>
            Gets or sets a handle which allocates using cvSetData.
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.AllocatedMemory">
            <summary>
            Gets or sets a memory address allocated by AllocMemory.
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.AllocatedMemorySize">
            <summary>
            Gets or sets the byte length of the allocated memory
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTrackbar">
            <summary>
            Trackbar that is shown on CvWindow
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTrackbar._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Constructor (value=0, max=100)
            </summary>
            <param name="name">Trackbar name</param>
            <param name="window">Window name</param>
            <param name="callback">Callback handler</param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Constructor
            </summary>
            <param name="name">Trackbar name</param>
            <param name="window">Window name</param>
            <param name="value">Initial slider position</param>
            <param name="max">The upper limit of the range this trackbar is working with. </param>
            <param name="callback">Callback handler</param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name">Trackbar name</param>
            <param name="window">Window name</param>
            <param name="value">Initial slider position</param>
            <param name="max">The upper limit of the range this trackbar is working with. </param>
            <param name="callback">Callback handler</param>
            <param name="userdata"></param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.TrackbarName">
            <summary>
            Name of this trackbar
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.WindowName">
            <summary>
            Name of parent window
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Pos">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the track bar. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Max">
            <summary>
            Gets the upper limit of the range this trackbar is working with. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Callback">
            <summary>
            Gets the callback delegate which occurs when the Value property of a track bar changes, either by movement of the scroll box or by manipulation in code. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Userdata">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.SeqType">
            <summary>
            The field flagscontain the particular dynamic type signature
            (CV_SEQ_MAGIC_VAL for dense sequences and CV_SET_MAGIC_VAL for sparse sequences) in the highest 16 bits and miscellaneous information about the sequence.
            The lowest CV_SEQ_ELTYPE_BITS bits contain the ID of the element type. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Zero">
            <summary>
            If the sequence is not passed to any function working with a specific type of sequences, you may use this value
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePoint">
            <summary>
            (x,y) [CV_SEQ_ELTYPE_POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeCode">
            <summary>
            freeman code: 0..7 [CV_SEQ_ELTYPE_CODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGeneric">
            <summary>
            unspecified type of sequence elements [CV_SEQ_ELTYPE_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePtr">
            <summary>
            =6 [CV_SEQ_ELTYPE_PTR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePPoint">
            <summary>
            &amp;elem: pointer to element of other sequence [CV_SEQ_ELTYPE_PPOINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeIndex">
            <summary>
            #elem: index of element of some other sequence [CV_SEQ_ELTYPE_INDEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGraphEdge">
            <summary>
            &amp;next_o, &amp;next_d, &amp;vtx_o, &amp;vtx_d [CV_SEQ_ELTYPE_GRAPH_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGraphVertex">
            <summary>
            first_edge, &amp;(x,y) [CV_SEQ_ELTYPE_GRAPH_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeTrianAtr">
            <summary>
            vertex of the binary tree  [CV_SEQ_ELTYPE_TRIAN_ATR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeConnectedComp">
            <summary>
            connected component [CV_SEQ_ELTYPE_CONNECTED_COMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePoint3D">
            <summary>
            (x,y,z) [CV_SEQ_ELTYPE_POINT3D]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C1">
            <summary>
            1-channel 8-bit unsigned integers [CV_8UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C2">
            <summary>
            2-channel 8-bit unsigned integers [CV_8UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C3">
            <summary>
            3-channel 8-bit unsigned integers [CV_8UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C4">
            <summary>
            4-channel 8-bit unsigned integers [CV_8UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C1">
            <summary>
            1-channel 8-bit signed integers [CV_8SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C2">
            <summary>
            2-channel 8-bit signed integers [CV_8SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C3">
            <summary>
            3-channel 8-bit signed integers [CV_8SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C4">
            <summary>
            4-channel 8-bit signed integers [CV_8SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C1">
            <summary>
            1-channel 16-bit unsigned integers [CV_16UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C2">
            <summary>
            2-channel 16-bit unsigned integers [CV_16UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C3">
            <summary>
            3-channel 16-bit unsigned integers [CV_16UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C4">
            <summary>
            4-channel 16-bit unsigned integers [CV_16UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C1">
            <summary>
            1-channel 16-bit signed integers [CV_16SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C2">
            <summary>
            2-channel 16-bit signed integers [CV_16SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C3">
            <summary>
            3-channel 16-bit signed integers [CV_16SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C4">
            <summary>
            4-channel 16-bit signed integers [CV_16SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C1">
            <summary>
            1-channel 32-bit signed integers [CV_32SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C2">
            <summary>
            2-channel 32-bit signed integers [CV_32SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C3">
            <summary>
            3-channel 32-bit signed integers [CV_32SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C4">
            <summary>
            4-channel 32-bit signed integers [CV_32SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C1">
            <summary>
            1-channel 32-bit floating-point numbers [CV_32FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C2">
            <summary>
            2-channel 32-bit floating-point numbers [CV_32FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C3">
            <summary>
            3-channel 32-bit floating-point numbers [CV_32FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C4">
            <summary>
            4-channel 32-bit floating-point numbers [CV_32FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C1">
            <summary>
            1-channel 64-bit floating-point numbers [CV_64FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C2">
            <summary>
            2-channel 64-bit floating-point numbers [CV_64FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C3">
            <summary>
            3-channel 64-bit floating-point numbers [CV_64FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C4">
            <summary>
            4-channel 64-bit floating-point numbers [CV_64FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindGeneric">
            <summary>
            [CV_SEQ_KIND_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindCurve">
            <summary>
            [CV_SEQ_KIND_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindBinaryTree">
            <summary>
            [CV_SEQ_KIND_BIN_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindGraph">
            <summary>
            [CV_SEQ_KIND_GRAPH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindSubdiv2D">
            <summary>
            [CV_SEQ_KIND_SUBDIV2D]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagClosed">
            <summary>
            flags for curves [CV_SEQ_FLAG_CLOSED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagSimple">
            <summary>
            flags for curves [CV_SEQ_FLAG_SIMPLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagConvex">
            <summary>
            flags for curves [CV_SEQ_FLAG_CONVEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagHole">
            <summary>
            flags for curves [CV_SEQ_FLAG_HOLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Oriented">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Graph">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.OrientedGraph">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PointSet">
            <summary>
            point sets [CV_SEQ_POINT_SET]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Point3DSet">
            <summary>
            point sets [CV_SEQ_POINT3D_SET]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PolyLine">
            <summary>
            point sets [CV_SEQ_POLYLINE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Polygon">
            <summary>
            point sets [CV_SEQ_POLYGON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Contour">
            <summary>
            point sets [CV_SEQ_CONTOUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.SimplePolygon">
            <summary>
            point sets [CV_SEQ_SIMPLE_POLYGON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Chain">
            <summary>
            chain-coded curves [CV_SEQ_CHAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.ChainContour">
            <summary>
            chain-coded curves [CV_SEQ_CHAIN_CONTOUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PolygonTree">
            <summary>
            binary tree for the contour [CV_SEQ_POLYGON_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.ConnextedComp">
            <summary>
            sequence of the connected components [CV_SEQ_CONNECTED_COMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Index">
             <summary>
            sequence of the integer numbers [CV_SEQ_INDEX]
             </summary>
        </member>
        <member name="T:OpenCvSharp.InvertMethod">
            <summary>
            Inversion methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.LU">
            <summary>
            Gaussian elimination with optimal pivot element chose
            [CV_LU]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Svd">
            <summary>
            Singular value decomposition (SVD) method
            [CV_SVD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Eig">
            <summary>
            
            [DECOMP_EIG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.SvdSymmetric">
            <summary>
            SVD method for a symmetric positively-defined matrix
            [CV_SVD_SYM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Cholesky">
            <summary>
            
            [CV_CHOLESKY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.QR">
            <summary>
            
            [CV_QR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Normal">
            <summary>
            
            [CV_NORMAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DistributionType">
            <summary>
            Distribution type for cvRandArr, etc.
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistributionType.Uniform">
            <summary>
            Uniform distribution
            [CV_RAND_UNI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistributionType.Normal">
            <summary>
            Normal or Gaussian distribution
            [CV_RAND_NORMAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CalibrationFlag">
            <summary>
            Different flags for cvCalibrateCamera2 and cvStereoCalibrate
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.Default">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixIntrinsic">
            <summary>
            If it is set, camera_matrix1,2, as well as dist_coeffs1,2 are fixed, so that only extrinsic parameters are optimized.
            [CV_CALIB_FIX_INTRINSIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.UseIntrinsicGuess">
            <summary>
            The flag allows the function to optimize some or all of the intrinsic parameters, depending on the other flags, but the initial values are provided by the user
            [CV_CALIB_USE_INTRINSIC_GUESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixPrincipalPoint">
            <summary>
            The principal points are fixed during the optimization.
            [CV_CALIB_FIX_PRINCIPAL_POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixFocalLength">
            <summary>
            fxk and fyk are fixed.
            [CV_CALIB_FIX_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixAspectRatio">
            <summary>
            fyk is optimized, but the ratio fxk/fyk is fixed.
            [CV_CALIB_FIX_ASPECT_RATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.SameFocalLength">
            <summary>
            Enforces fx0=fx1 and fy0=fy1. CV_CALIB_ZERO_TANGENT_DIST - Tangential distortion coefficients for each camera are set to zeros and fixed there.
            [CV_CALIB_SAME_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.ZeroTangentDist">
            <summary>
            Tangential distortion coefficients are set to zeros and do not change during the optimization.
            [CV_CALIB_ZERO_TANGENT_DIST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK1">
            <summary>
            The 0-th distortion coefficients (k1) are fixed 
            [CV_CALIB_FIX_K1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK2">
            <summary>
            The 1-th distortion coefficients (k2) are fixed 
            [CV_CALIB_FIX_K2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK3">
            <summary>
            The 4-th distortion coefficients (k3) are fixed 
            [CV_CALIB_FIX_K3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK4">
            <summary>
            Do not change the corresponding radial distortion coefficient during the optimization. 
            If CV_CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used, otherwise it is set to 0.
            [CV_CALIB_FIX_K4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK5">
            <summary>
            Do not change the corresponding radial distortion coefficient during the optimization. 
            If CV_CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used, otherwise it is set to 0.
            [CV_CALIB_FIX_K5]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK6">
            <summary>
            Do not change the corresponding radial distortion coefficient during the optimization. 
            If CV_CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used, otherwise it is set to 0.
            [CV_CALIB_FIX_K6]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.RationalModel">
            <summary>
            Enable coefficients k4, k5 and k6. 
            To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function 
            use the rational model and return 8 coefficients. If the flag is not set, the function will compute only 5 distortion coefficients.
            [CV_CALIB_RATIONAL_MODEL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMemStorage">
            <summary>
            Growing memory storage
            </summary>
        </member>
        <member name="T:OpenCvSharp.DisposableCvObject">
            <summary>
            DisposableObject + ICvPtrHolder
            </summary>
        </member>
        <member name="T:OpenCvSharp.ICvPtrHolder">
            <summary>
            Represents a OpenCV-based class which have a native pointer. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.ICvPtrHolder.CvPtr">
            <summary>
            Unmanaged OpenCV data pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisposableCvObject._ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisposableCvObject._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.Boolean)">
            <summary>
             
            </summary>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.DisposableCvObject.CvPtr">
            <summary>
            Native pointer of OpenCV structure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMemStorage._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor">
            <summary>
            Creates memory storage
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.Int32)">
            <summary>
            Creates memory storage
            </summary>
            <param name="block_size">Size of the storage blocks in bytes. If it is 0, the block size is set to default value - currently it is ≈64K. </param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.IntPtr)">
            <summary>
            Initializes from native poitner
            </summary>
            <param name="ptr">struct CvMemStorage*</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose">If true, this object will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvMemStorage.SizeOf">
            <summary>
            sizeof(CvMemStorage) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Alloc(System.UInt32)">
            <summary>
            Allocates memory buffer in the storage (cvMemStorageAlloc).
            </summary>
            <param name="size">Buffer size. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.AllocString(System.String)">
            <summary>
            Allocates text string in the storage (cvMemStorageAllocString).
            </summary>
            <param name="str">The string</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Clear">
            <summary>
            Clears memory storage (cvClearMemStorage)．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.CreateChild">
            <summary>
            Creates child memory storage (cvCreateChildMemStorage).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.RestorePos(OpenCvSharp.CvMemStoragePos)">
            <summary>
            Restores memory storage position (cvRestoreMemStoragePos).
            </summary>
            <param name="pos">New storage top position</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.SavePos">
            <summary>
            Saves memory storage position (cvSaveMemStoragePos).
            </summary>
            <returns>position of the storage top. </returns>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Signature">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Bottom">
            <summary>
            first allocated block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Top">
            <summary>
            the current memory block - top of the stack
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Parent">
            <summary>
            borrows new blocks from
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.BlockSize">
            <summary>
            block size
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.FreeSpace">
            <summary>
            free space in the top block (in bytes)
            </summary>
        </member>
        <member name="T:OpenCvSharp.PCAFlag">
            <summary>
            Flags for PCA operations
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.DataAsRow">
            <summary>
            The vectors are stored as rows (i.e. all the components of a certain vector are stored continously)
            [CV_PCA_DATA_AS_ROW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.DataAsCol">
            <summary>
            The vectors are stored as columns (i.e. values of a certain vector component are stored continuously)
            [CV_PCA_DATA_AS_COL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.UseAvg">
            <summary>
            Use pre-computed average vector
            [CV_PCA_USE_AVG]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqWriter">
            <summary>
            Sequence writer
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeqWriter._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            Initializes process of writing data to sequence (cvStartAppendToSeq).
            </summary>
            <param name="seq">Pointer to the sequence. </param>
            <returns>Writer state; initialized by the function. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates new sequence and initializes writer for it (cvStartWriteSeq).
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be equal to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header. The parameter value may not be less than sizeof(CvSeq). If a certain type or extension is specified, it must fit the base type header. </param>
            <param name="elem_size">Size of the sequence elements in bytes; must be consistent with the sequence type. For example, if the sequence of points is created (element type CV_SEQ_ELTYPE_POINT ), then the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">CvSeqWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvSeqWriter.SizeOf">
            <summary>
            sizeof(CvSeqWriter) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.EndWriteSeq">
            <summary>
            Finishes process of writing sequence
            </summary>
            <returns>the pointer to the written sequence.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.Flush">
            <summary>
            Updates sequence headers from the writer state (cvFlushSeqWriter).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.WRITE_SEQ_ELEM_VAR(System.IntPtr)">
            <summary>
            (CV_WRITE_SEQ_ELEM_VAR)
            </summary>
            <param name="elem_ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.WriteSeqElem``1(``0)">
            <summary>
            (CV_WRITE_SEQ_ELEM)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.HeaderSize">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Block">
            <summary>
            current block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Ptr">
            <summary>
            pointer to element be read next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.BlockMin">
            <summary>
            pointer to the beginning of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.BlockMax">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraphScanner">
            <summary>
            CvGraphScanner
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvGraphScanner._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Initial vertex to start from. If NULL, the traversal starts from the first vertex (a vertex with the minimal index in the sequence of vertices). </param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.GraphScannerMask)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Initial vertex to start from. If NULL, the traversal starts from the first vertex (a vertex with the minimal index in the sequence of vertices). </param>
            <param name="mask">Event mask indicating which events are interesting to the user (where cvNextGraphItem  function returns control to the user) It can be CV_GRAPH_ALL_ITEMS (all events are interesting) or combination of the following flags:
            <br/> * CV_GRAPH_VERTEX - stop at the graph vertices visited for the first time
              <br/>* CV_GRAPH_TREE_EDGE - stop at tree edges (tree edge is the edge connecting the last visited vertex and the vertex to be visited next)
            <br/>* CV_GRAPH_BACK_EDGE - stop at back edges (back edge is an edge connecting the last visited vertex with some of its ancestors in the search tree)
            <br/>* CV_GRAPH_FORWARD_EDGE - stop at forward edges (forward edge is an edge conecting the last visited vertex with some of its descendants in the search tree). The forward edges are only possible during oriented graph traversal)
              <br/>* CV_GRAPH_CROSS_EDGE - stop at cross edges (cross edge is an edge connecting different search trees or branches of the same tree. The cross edges are only possible during oriented graphs traversal)
              <br/> * CV_GRAPH_ANY_EDGE - stop and any edge (tree, back, forward and cross edges)
              <br/>* CV_GRAPH_NEW_TREE - stop in the beginning of every new search tree. When the traversal procedure visits all vertices and edges reachible from the initial vertex (the visited vertices together with tree edges make up a tree), it searches for some unvisited vertex in the graph and resumes the traversal process from that vertex. Before starting a new tree (including the very first tree when cvNextGraphItem is called for the first time) it generates CV_GRAPH_NEW_TREE event.
               <br/> For unoriented graphs each search tree corresponds to a connected component of the graph.
             <br/> * CV_GRAPH_BACKTRACKING - stop at every already visited vertex during backtracking - returning to already visited vertexes of the traversal tree.</param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvGraphScanner.SizeOf">
            <summary>
            sizeof(CvGraphScanner) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.NextGraphItem">
            <summary>
            Returns index of graph vertex
            </summary>
            <returns>The function cvNextGraphItem traverses through the graph until an event interesting to the user (that is, an event, specified in the mask in cvCreateGraphScanner call) is met or the traversal is over. In the first case it returns one of the events, listed in the description of mask parameter above and with the next call it resumes the traversal. In the latter case it returns CV_GRAPH_OVER (-1). When the event is CV_GRAPH_VERTEX, or CV_GRAPH_BACKTRACKING or CV_GRAPH_NEW_TREE, the currently observed vertex is stored in scanner->vtx. And if the event is edge-related, the edge itself is stored at scanner->edge, the previously visited vertex - at scanner->vtx and the other ending vertex of the edge - at scanner->dst.</returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Vtx">
            <summary>
            Current graph vertex (or current edge origin)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Dst">
            <summary>
            Current graph edge destination vertex
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Edge">
            <summary>
            Current edge
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Graph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Stack">
            <summary>
            the graph vertex stack
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Index">
            <summary>
            the lower bound of certainly visited vertices
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Mask">
            <summary>
            event mask
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvReleaseFunc">
            <summary>
            
            </summary>
            <param name="struct_dblptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvIsInstanceFunc">
            <summary>
            
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvButton">
            <summary>
            Button that is used on Qt Window
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvButton._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
            <param name="button_type">button type</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
            <param name="button_type">button type</param>
            <param name="initial_button_state">Default state of the button. Use for checkbox and radiobox, its value could be 0 or 1. </param>
        </member>
        <member name="M:OpenCvSharp.CvButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CvButton.ButtonName">
            <summary>
            Name of this trackbar
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Callback">
            <summary>
            Gets the callback delegate which occurs when the Value property of a track bar changes, either by movement of the scroll box or by manipulation in code. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Result">
            <summary>
            All created buttons
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Instances">
            <summary>
            All created buttons
            </summary>
        </member>
        <member name="T:OpenCvSharp.WindowProperty">
            <summary>
            Property identifiers for cvGetWindowProperty/cvSetWindowProperty
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.AutoSize">
            <summary>
            Normal mode
            [CV_WND_PROP_AUTOSIZE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.Fullscreen">
            <summary>
            Fullscreen
            [CV_WND_PROP_FULLSCREEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.FreeRatio">
            <summary>
            Fix aspect ratio
            [CV_WINDOW_FREERATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.KeepRatio">
            <summary>
            Respect the image ratio
            [CV_WINDOW_KEEPRATIO]
            </summary>
        </member>
        <member name="T:OpenCvSharp.Cv">
            <summary>
            Managed wrapper of all OpenCV functions
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.AA">
            <summary>
            CV_AA
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.AUTOSTEP">
            <summary>
            CV_AUTOSTEP
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FILLED">
            <summary>
            CV_FILLED
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.LOG2">
            <summary>
            CV_LOG2
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.PI">
            <summary>
            CV_PI
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.WHOLE_SEQ_END_INDEX">
            <summary>
            CV_WHOLE_SEQ_END_INDEX
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FLOODFILL_FIXED_RANGE">
            <summary>
            if set, the difference between the current pixel and seed pixel is considered, otherwise the difference between neighbor pixels is considered (the range is floating)
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FLOODFILL_MASK_ONLY">
            <summary>
            if set, the function does not fill the image (new_val is ignored), but fills the mask (that must be non-null in this case)
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_MAX_DIM">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_FOURCC_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_FOURCC_PROMPT">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryFrame(OpenCvSharp.CvCapture)">
            <summary>
            Grabs a frame from camera or video file, decompresses and returns it. 
            This function is just a combination of cvGrabFrame and cvRetrieveFrame in one call. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_1D(OpenCvSharp.CvHistogram,System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_2D(OpenCvSharp.CvHistogram,System.Int32,System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_3D(OpenCvSharp.CvHistogram,System.Int32,System.Int32,System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <param name="idx2">3rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_nD(OpenCvSharp.CvHistogram,System.Int32[])">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="hist">1st index of the bin.</param>
            <param name="idx">Array of indices.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PerspectiveTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Performs perspective matrix transform of vector array
            </summary>
            <param name="src">The source three-channel floating-point array. </param>
            <param name="dst">The destination three-channel floating-point array. </param>
            <param name="mat">3×3 or 4×4 transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Point(System.Int32,System.Int32)">
            <summary>
            Creates 2D point with integer coordinates
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point2D32f(System.Single,System.Single)">
            <summary>
            Creates 2D point with floating-point coordinates
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point2D64f(System.Double,System.Double)">
            <summary>
            Creates 2D point with double precision floating-point coordinates
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point3D32f(System.Single,System.Single,System.Single)">
            <summary>
            Creates3D point with floating-point coordinates
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="z">z-coordinate, usually zero-based</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point3D64f(System.Double,System.Double,System.Double)">
            <summary>
            Creates 3D point with double precision floating-point coordinates
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="z">z-coordinate, usually zero-based</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PointPolygonTest(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Boolean)">
            <summary>
            Point in contour test
            </summary>
            <param name="contour">Input contour.</param>
            <param name="pt">The point tested against the contour.</param>
            <param name="measure_dist">If it is true, the function estimates distance from the point to the nearest contour edge.</param>
            <returns>The function cvPointPolygonTest determines whether the point is inside contour, outside, or lies on an edge (or coinsides with a vertex). It returns positive, negative or zero value, correspondingly. When measure_dist=0, the return value is +1, -1 and 0, respectively. When measure_dist≠0, it is a signed distance between the point and the nearest contour edge.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.PointSeqFromMat(OpenCvSharp.SeqType,OpenCvSharp.CvArr,OpenCvSharp.CvContour@,OpenCvSharp.CvSeqBlock@)">
            <summary>
            Initializes point sequence header from a point vector
            </summary>
            <param name="seq_kind">Type of the point sequence.</param>
            <param name="mat">Input matrix. It should be continuous 1-dimensional vector of points, that is, it should have type CV_32SC2 or CV_32FC2.</param>
            <param name="contour_header">Contour header, initialized by the function. </param>
            <param name="block">Sequence block header, initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolarToCart(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates cartesian coordinates of 2d vectors represented in polar form
            </summary>
            <param name="magnitude">The array of magnitudes. If it is null, the magnitudes are assumed all 1’s. </param>
            <param name="angle">The array of angles, whether in radians or degrees. </param>
            <param name="x">The destination array of x-coordinates, may be set to null if it is not needed. </param>
            <param name="y">The destination array of y-coordinates, mau be set to null if it is not needed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolarToCart(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.AngleUnit)">
            <summary>
            Calculates cartesian coordinates of 2d vectors represented in polar form
            </summary>
            <param name="magnitude">The array of magnitudes. If it is null, the magnitudes are assumed all 1’s. </param>
            <param name="angle">The array of angles, whether in radians or degrees. </param>
            <param name="x">The destination array of x-coordinates, may be set to null if it is not needed. </param>
            <param name="y">The destination array of y-coordinates, mau be set to null if it is not needed. </param>
            <param name="unit">The flag indicating whether the angles are measured in radians, which is default mode, or in degrees. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.POSIT(OpenCvSharp.CvPOSITObject,OpenCvSharp.CvPoint2D32f[],System.Double,OpenCvSharp.CvTermCriteria,System.Single[0:,0:]@,System.Single[]@)">
            <summary>
            Implements POSIT algorithm
            </summary>
            <param name="posit_object">Posit object structure.</param>
            <param name="image_points">Object points projections on the 2D image plane.</param>
            <param name="focal_length">Focal length of the camera used.</param>
            <param name="criteria">Termination criteria of the iterative POSIT algorithm.</param>
            <param name="rotation_matrix">Matrix of rotations.</param>
            <param name="translation_vector">Translation vector.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PostBoostingFindFace(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Pow(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Raises every array element to power
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array, should be the same type as the source. </param>
            <param name="power">The exponent of power. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates feature map for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="corners">Image to store the corner candidates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates feature map for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="corners">Image to store the corner candidates. </param>
            <param name="aperture_size">Aperture parameter for Sobel operator.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode``1(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode``1(OpenCvSharp.CvTreeNodeIterator{``0})">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Projects vectors to the specified subspace
            </summary>
            <param name="data">The input data; each vector is either a single row or a single column. </param>
            <param name="avg">The mean (average) vector. If it is a single-row vector, it means that the output vectors are stored as rows of result; otherwise, it should be a single-column vector, then the vectors are stored as columns of result. </param>
            <param name="eigenvects">The eigenvectors (principal components); one vector per row. </param>
            <param name="result">The output matrix of decomposition coefficients. The number of rows must be the same as the number of vectors, the number of columns must be less than or equal to the number of rows in eigenvectors. That it is less, the input vectors are projected into subspace of the first cols(result) principal components.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projections of 3D points to the image plane given intrinsic and extrinsic camera parameters. 
            Optionally, the function computes jacobians - matrices of partial derivatives of image points as functions of all the input parameters w.r.t. the particular parameters, intrinsic and/or extrinsic. 
            </summary>
            <remarks>
            Note, that with intrinsic and/or extrinsic parameters set to special values, 
            the function can be used to compute just extrinsic transformation or just intrinsic transformation (i.e. distortion of a sparse set of points). 
            </remarks>
            <param name="object_points">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="rotation_vector">The rotation vector, 1x3 or 3x1. </param>
            <param name="translation_vector">The translation vector, 1x3 or 3x1. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is null, all distortion coefficients are considered 0's. </param>
            <param name="image_points">The output array of image points, 2xN or Nx2, where N is the total number of points in the view. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projections of 3D points to the image plane given intrinsic and extrinsic camera parameters. 
            Optionally, the function computes jacobians - matrices of partial derivatives of image points as functions of all the input parameters w.r.t. the particular parameters, intrinsic and/or extrinsic. 
            </summary>
            <remarks>
            Note, that with intrinsic and/or extrinsic parameters set to special values, 
            the function can be used to compute just extrinsic transformation or just intrinsic transformation (i.e. distortion of a sparse set of points). 
            </remarks>
            <param name="object_points">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="rotation_vector">The rotation vector, 1x3 or 3x1. </param>
            <param name="translation_vector">The translation vector, 1x3 or 3x1. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is null, all distortion coefficients are considered 0's. </param>
            <param name="image_points">The output array of image points, 2xN or Nx2, where N is the total number of points in the view. </param>
            <param name="dpdrot">Optional Nx3 matrix of derivatives of image points with respect to components of the rotation vector. </param>
            <param name="dpdt">Optional Nx3 matrix of derivatives of image points w.r.t. components of the translation vector. </param>
            <param name="dpdf">Optional Nx2 matrix of derivatives of image points w.r.t. fx and fy. </param>
            <param name="dpdc">Optional Nx2 matrix of derivatives of image points w.r.t. cx and cy. </param>
            <param name="dpddist">Optional Nx4 matrix of derivatives of image points w.r.t. distortion coefficients. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Double)">
            <summary>
            Computes projections of 3D points to the image plane given intrinsic and extrinsic camera parameters. 
            Optionally, the function computes jacobians - matrices of partial derivatives of image points as functions of all the input parameters w.r.t. the particular parameters, intrinsic and/or extrinsic. 
            </summary>
            <remarks>
            Note, that with intrinsic and/or extrinsic parameters set to special values, 
            the function can be used to compute just extrinsic transformation or just intrinsic transformation (i.e. distortion of a sparse set of points). 
            </remarks>
            <param name="object_points">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="rotation_vector">The rotation vector, 1x3 or 3x1. </param>
            <param name="translation_vector">The translation vector, 1x3 or 3x1. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is null, all distortion coefficients are considered 0's. </param>
            <param name="image_points">The output array of image points, 2xN or Nx2, where N is the total number of points in the view. </param>
            <param name="dpdrot">Optional Nx3 matrix of derivatives of image points with respect to components of the rotation vector. </param>
            <param name="dpdt">Optional Nx3 matrix of derivatives of image points w.r.t. components of the translation vector. </param>
            <param name="dpdf">Optional Nx2 matrix of derivatives of image points w.r.t. fx and fy. </param>
            <param name="dpdc">Optional Nx2 matrix of derivatives of image points w.r.t. cx and cy. </param>
            <param name="dpddist">Optional Nx4 matrix of derivatives of image points w.r.t. distortion coefficients. </param>
            <param name="aspect_ratio"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr1D(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr2D(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@,System.Boolean)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <param name="create_node">Optional input parameter for sparse matrices. Non-zero value of the parameter means that the requested element is created if it does not exist already. </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <param name="create_node">Optional input parameter for sparse matrices. Non-zero value of the parameter means that the requested element is created if it does not exist already. </param>
            <param name="precalc_hashval">Optional input parameter for sparse matrices. If the pointer is not NULL, the function does not recalculate the node hash value, but takes it from the specified location. It is useful for speeding up pair-wise operations (TODO: provide an example) </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PutText(OpenCvSharp.CvArr,System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont,OpenCvSharp.CvScalar)">
            <summary>
            Draws text string
            </summary>
            <param name="img">Input image. </param>
            <param name="text">String to print. </param>
            <param name="org">Coordinates of the bottom-left corner of the first letter. </param>
            <param name="font">Pointer to the font structure. </param>
            <param name="color">Text color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Downsamples image.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            Downsamples image.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
            <param name="filter">Type of the filter used for convolution; only CV_GAUSSIAN_5x5 is currently supported. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="src">The source 8-bit 3-channel image. </param>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,System.Int32)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="src">The source 8-bit 3-channel image. </param>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
            <param name="max_level">Maximum level of the pyramid for the segmentation. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,System.Int32,OpenCvSharp.CvTermCriteria)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="src">The source 8-bit 3-channel image. </param>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
            <param name="max_level">Maximum level of the pyramid for the segmentation. </param>
            <param name="termcrit">Termination criteria: when to stop meanshift iterations. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Double,System.Double)">
            <summary>
            Does image segmentation by pyramids.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="level"></param>
            <param name="threshold1"></param>
            <param name="threshold2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,System.Int32,System.Double,System.Double)">
            <summary>
            Does image segmentation by pyramids.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="storage">Storage; stores the resulting sequence of connected components. </param>
            <param name="comp">Pointer to the output sequence of the segmented components. </param>
            <param name="level">Maximum level of the pyramid for the segmentation. </param>
            <param name="threshold1">Error threshold for establishing the links. </param>
            <param name="threshold2">Error threshold for the segments clustering. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Upsamples image.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            Upsamples image.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
            <param name="filter">Type of the filter used for convolution; only CV_GAUSSIAN_5x5 is currently supported. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.OpenFileStorage(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode)">
            <summary>
            Opens file storage for reading or writing data
            </summary>
            <param name="filename">Name of the file associated with the storage. </param>
            <param name="memstorage">Memory storage used for temporary data and for storing dynamic structures, such as CvSeq or CvGraph. If it is null, a temporary memory storage is created and used. </param>
            <param name="flags"></param>
            <returns>pointer to CvFileStorage structure.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.OpenFileStorage(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            Opens file storage for reading or writing data
            </summary>
            <param name="filename">Name of the file associated with the storage. </param>
            <param name="memstorage">Memory storage used for temporary data and for storing dynamic structures, such as CvSeq or CvGraph. If it is null, a temporary memory storage is created and used. </param>
            <param name="flags"></param>
            <param name="encoding"></param>
            <returns>pointer to CvFileStorage structure.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.OrS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.OrS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.NamedWindow(System.String)">
            <summary>
            Creates a window which can be used as a placeholder for images and trackbars. Created windows are reffered by their names. 
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NamedWindow(System.String,OpenCvSharp.WindowMode)">
            <summary>
            Creates a window which can be used as a placeholder for images and trackbars. Created windows are reffered by their names. 
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextGraphItem(OpenCvSharp.CvGraphScanner)">
            <summary>
            Returns index of graph vertex
            </summary>
            <param name="scanner">Graph traversal state. It is updated by the function. </param>
            <returns>The function cvNextGraphItem traverses through the graph until an event interesting to the user (that is, an event, specified in the mask in cvCreateGraphScanner call) is met or the traversal is over. In the first case it returns one of the events, listed in the description of mask parameter above and with the next call it resumes the traversal. In the latter case it returns CV_GRAPH_OVER (-1). When the event is CV_GRAPH_VERTEX, or CV_GRAPH_BACKTRACKING or CV_GRAPH_NEW_TREE, the currently observed vertex is stored in scanner->vtx. And if the event is edge-related, the edge itself is stored at scanner->edge, the previously visited vertex - at scanner->vtx and the other ending vertex of the edge - at scanner->dst.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextLinePoint(OpenCvSharp.CvLineIterator)">
            <summary>
            Moves iterator to the next line point
            </summary>
            <param name="line_iterator">LineIterator object </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode``1(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode``1(OpenCvSharp.CvTreeNodeIterator{``0})">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr1">The first source image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr1">The first source image. </param>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.NormType)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr1">The first source image. </param>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <param name="norm_type">Type of norm</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr1">The first source image. </param>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <param name="norm_type">Type of norm</param>
            <param name="mask">The optional operation mask. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="src">The input array. </param>
            <param name="dst">The output array; in-place operation is supported. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="src">The input array. </param>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="src">The input array. </param>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
            <param name="norm_type">The normalization type.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="src">The input array. </param>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
            <param name="norm_type">The normalization type.</param>
            <param name="mask">The operation mask. Makes the function consider and normalize only certain array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.NormalizeHist(OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            Normalizes the histogram bins by scaling them, such that the sum of the bins becomes equal to factor.
            </summary>
            <param name="hist">Reference to the histogram. </param>
            <param name="factor">Threshold level. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Not(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise inversion of array elements
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mahalanobis(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates Mahalanobis distance between two vectors
            </summary>
            <param name="vec1">The first 1D source vector. </param>
            <param name="vec2">The second 1D source vector. </param>
            <param name="mat">The inverse covariation matrix. </param>
            <returns>Mahalanobis distance</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mahalonobis(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates Mahalonobis distance between two vectors
            </summary>
            <param name="vec1">The first 1D source vector. </param>
            <param name="vec2">The second 1D source vector. </param>
            <param name="mat">The inverse covariation matrix. </param>
            <returns>Mahalonobis distance</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[])">
            <summary>
            Makes a histogram out of array
            </summary>
            <param name="dims">Number of histogram dimensions. </param>
            <param name="sizes">Array of histogram dimension sizes. </param>
            <param name="hist">The histogram header initialized by the function. </param>
            <param name="data">Array that will be used to store histogram bins. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[],System.Single[][])">
            <summary>
            Makes a histogram out of array
            </summary>
            <param name="dims">Number of histogram dimensions. </param>
            <param name="sizes">Array of histogram dimension sizes. </param>
            <param name="hist">The histogram header initialized by the function. </param>
            <param name="data">Array that will be used to store histogram bins. </param>
            <param name="ranges">Histogram bin ranges, see CreateHist. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[],System.Single[][],System.Boolean)">
            <summary>
            Makes a histogram out of array
            </summary>
            <param name="dims">Number of histogram dimensions. </param>
            <param name="sizes">Array of histogram dimension sizes. </param>
            <param name="hist">The histogram header initialized by the function. </param>
            <param name="data">Array that will be used to store histogram bins. </param>
            <param name="ranges">Histogram bin ranges, see CreateHist. </param>
            <param name="uniform">Uniformity flag, see CreateHist. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeScanlines(System.Double[0:,0:],OpenCvSharp.CvSize,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32@)">
            <summary>
            Calculates scanlines coordinates for two cameras by fundamental matrix
            </summary>
            <param name="matrix">Fundamental matrix. </param>
            <param name="img_size">Size of the image. </param>
            <param name="scanlines1">Array of calculated scanlines of the first image. </param>
            <param name="scanlines2">Array of calculated scanlines of the second image. </param>
            <param name="lengths1">Array of calculated lengths (in pixels) of the first image scanlines. </param>
            <param name="lengths2">Array of calculated lengths (in pixels) of the second image scanlines. </param>
            <param name="line_count">Variable that stores the number of scanlines. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeSeqHeaderForArray``1(OpenCvSharp.SeqType,System.Int32,System.Int32,``0[],OpenCvSharp.CvSeq,OpenCvSharp.CvSeqBlock)">
            <summary>
            Constructs sequence from array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq_type">Type of the created sequence. </param>
            <param name="header_size">Size of the header of the sequence. Parameter sequence must point to the structure of that size or greater size. </param>
            <param name="elem_size">Size of the sequence element. </param>
            <param name="elements">Elements that will form a sequence. </param>
            <param name="seq">Pointer to the local variable that is used as the sequence header. </param>
            <param name="block">Pointer to the local variable that is the header of the single sequence block. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mat(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Initializes matrix header (light-weight variant)
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements (see CreateMat). </param>
            <returns>The function cvMat is a fast inline substitution for cvInitMatHeader. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mat``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            Initializes matrix header (light-weight variant)
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements (see CreateMat). </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <returns>The function cvMat is a fast inline substitution for cvInitMatHeader. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchContourTrees(OpenCvSharp.CvContourTree,OpenCvSharp.CvContourTree,OpenCvSharp.ContourTreesMatchMethod,System.Double)">
            <summary>
            Compares two contours using their tree representations.
            </summary>
            <param name="tree1">First contour tree. </param>
            <param name="tree2">Second contour tree. </param>
            <param name="method">Similarity measure, only I1 is supported. </param>
            <param name="threshold">Similarity threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchShapes(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchShapesMethod)">
            <summary>
            Compares two shapes.
            </summary>
            <param name="object1">First contour or grayscale image.</param>
            <param name="object2">Second contour or grayscale image.</param>
            <param name="method">Comparison method.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchShapes(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchShapesMethod,System.Double)">
            <summary>
            Compares two shapes.
            </summary>
            <param name="object1">First contour or grayscale image.</param>
            <param name="object2">Second contour or grayscale image.</param>
            <param name="method">Comparison method.</param>
            <param name="parameter">Method-specific parameter (is not used now). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchTemplate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            Compares template against overlapped image regions.
            </summary>
            <param name="image">Image where the search is running. It should be 8-bit or 32-bit floating-point. </param>
            <param name="templ">Searched template; must be not greater than the source image and the same data type as the image. </param>
            <param name="result">A map of comparison results; single-channel 32-bit floating-point. If image is W×H and templ is w×h then result must be W-w+1×H-h+1. </param>
            <param name="method">Specifies the way the template must be compared with image regions. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Max(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element maximum of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MaxRect(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Finds bounding rectangle for two given rectangles
            </summary>
            <param name="rect1">First rectangle </param>
            <param name="rect2">Second rectangle </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MaxS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element maximum of array and scalar
            </summary>
            <param name="src">The first source array. </param>
            <param name="value">The scalar value. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MeanShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp)">
            <summary>
            Finds object center on back projection
            </summary>
            <param name="prob_image">Back projection of object histogram (see cvCalcBackProject). </param>
            <param name="window">Initial search window. </param>
            <param name="criteria">Criteria applied to determine when the window search should be finished. </param>
            <param name="comp">Resultant structure that contains converged search window coordinates (comp->rect field) and sum of all pixels inside the window (comp->area field). </param>
            <returns>The function returns number of iterations made within cvMeanShift. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MemStorageAlloc(OpenCvSharp.CvMemStorage,System.UInt32)">
            <summary>
            Allocates memory buffer in the storage
            </summary>
            <param name="storage">Memory storage. </param>
            <param name="size">Buffer size. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MemStorageAllocString(OpenCvSharp.CvMemStorage,System.String)">
            <summary>
            Allocates text string in the storage
            </summary>
            <param name="storage">Memory storage</param>
            <param name="str">The string</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Merge(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Composes multi-channel array from several single-channel arrays or inserts a single channel into the array
            </summary>
            <param name="src0">Input channel 0</param>
            <param name="src1">Input channel 1</param>
            <param name="src2">Input channel 2</param>
            <param name="src3">Input channel 3</param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtPlaneToPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Composes multi-channel array from several single-channel arrays or inserts a single channel into the array
            </summary>
            <param name="src0">Input channel 0</param>
            <param name="src1">Input channel 1</param>
            <param name="src2">Input channel 2</param>
            <param name="src3">Input channel 3</param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.mGet(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel floating-point matrix
            </summary>
            <param name="mat">Input matrix. </param>
            <param name="row">The zero-based index of row. </param>
            <param name="col">The zero-based index of column. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Min(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element minimum of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set. </param>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinAreaRect2(OpenCvSharp.CvArr)">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <param name="points">Sequence or array of points. </param>
            <returns>The function cvMinAreaRect2 finds a circumscribed rectangle of the minimal area for 2D point set by building convex hull for the set and applying rotating calipers technique to the hull.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.MinAreaRect2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <param name="points">Sequence or array of points. </param>
            <param name="storage">The point tested against the contour.</param>
            <returns>The function cvMinAreaRect2 finds a circumscribed rectangle of the minimal area for 2D point set by building convex hull for the set and applying rotating calipers technique to the hull.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.MinEnclosingCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <param name="points">Sequence or array of 2D points. </param>
            <param name="center">Output parameter. The center of the enclosing circle. </param>
            <param name="radius">Output parameter. The radius of the enclosing circle. </param>
            <returns>The function cvMinEnclosingCircle finds the minimal circumscribed circle for 2D point set using iterative algorithm. 
            It returns true if the resultant circle contains all the input points and false otherwise (i.e. algorithm failed). </returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.MinS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element minimum of array and scalar
            </summary>
            <param name="src">The first source array. </param>
            <param name="value">The scalar value. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MixChannels(OpenCvSharp.CvArr[],OpenCvSharp.CvArr[],System.Int32[])">
            <summary>
            Copies several channels from input arrays to certain channels of output arrays
            </summary>
            <param name="src">The array of input arrays. </param>
            <param name="dst">The array of output arrays. </param>
            <param name="from_to">The array of pairs of indices of the planes copied. from_to[k*2] is the 0-based index of the input plane, and from_to[k*2+1] is the index of the output plane, where the continuous numbering of the planes over all the input and over all the output arrays is used. When from_to[k*2] is negative, the corresponding output plane is filled with 0's. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Moments(OpenCvSharp.CvArr,OpenCvSharp.CvMoments@,System.Boolean)">
            <summary>
            Moments
            </summary>
            <param name="image">Image (1-channel or 3-channel with COI set) or polygon (CvSeq of points or a vector of points)</param>
            <param name="moments">Returned moment state structure</param>
            <param name="isBinary">(For images only) If the flag is non-zero, all the zero pixel values are treated as zeroes, all the others are treated as 1’s</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MorphologyEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,OpenCvSharp.MorphologyOperation)">
            <summary>
            Performs advanced morphological transformations using erosion and dilation as basic operations.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="temp">Temporary image, required in some cases. </param>
            <param name="element">Structuring element. </param>
            <param name="operation">Type of morphological operation.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MorphologyEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,OpenCvSharp.MorphologyOperation,System.Int32)">
            <summary>
            Performs advanced morphological transformations using erosion and dilation as basic operations.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="temp">Temporary image, required in some cases. </param>
            <param name="element">Structuring element. </param>
            <param name="operation">Type of morphological operation.</param>
            <param name="iterations">Number of times erosion and dilation are applied. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MoveWindow(System.String,System.Int32,System.Int32)">
            <summary>
            Changes position of the window. 
            </summary>
            <param name="name">Name of the window to be resized. </param>
            <param name="x">New x coordinate of top-left corner </param>
            <param name="y">New y coordinate of top-left corner </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams">
            <summary>
            Creates MSER parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
            <param name="min_margin">ignore too small margin</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
            <param name="min_margin">ignore too small margin</param>
            <param name="edge_blur_size">the aperture size for edge blur</param>
        </member>
        <member name="M:OpenCvSharp.Cv.mSet(OpenCvSharp.CvMat,System.Int32,System.Int32,System.Double)">
            <summary>
            Return the particular element of single-channel floating-point matrix
            </summary>
            <param name="mat">The matrix. </param>
            <param name="row">The zero-based index of row. </param>
            <param name="col">The zero-based index of column. </param>
            <param name="value">The new value of the matrix element </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element product of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Calculates per-element product of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="scale">Optional scale factor </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulSpectrums(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MulSpectrumsFlag)">
            <summary>
            Performs per-element multiplication of two Fourier spectrums
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array of the same type and the same size of the sources. </param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.MultiplyAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds product of two input images to accumulator
            </summary>
            <param name="image1">First input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="image2">Second input image, the same format as the first one. </param>
            <param name="acc">Accumulator of the same number of channels as input images, 32-bit or 64-bit floating-point. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MultiplyAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds product of two input images to accumulator
            </summary>
            <param name="image1">First input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="image2">Second input image, the same format as the first one. </param>
            <param name="acc">Accumulator of the same number of channels as input images, 32-bit or 64-bit floating-point. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            Calculates product of array and transposed array
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <param name="order">Order of multipliers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates product of array and transposed array
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <param name="order">Order of multipliers. </param>
            <param name="delta">An optional array, subtracted from src before multiplication. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Calculates product of array and transposed array
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <param name="order">Order of multipliers. </param>
            <param name="delta">An optional array, subtracted from src before multiplication. </param>
            <param name="scale"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Laplace(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates Laplacian of the source image by summing second x- and y- derivatives calculated using Sobel operator.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Laplace(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates Laplacian of the source image by summing second x- and y- derivatives calculated using Sobel operator.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="aperture_size">Aperture size (it has the same meaning as in cvSobel). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="detector">Latent SVM detector in internal representation</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage,System.Single)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="detector">Latent SVM detector in internal representation</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <param name="overlap_threshold">threshold for the non-maximum suppression algorithm 
             = 0.5f [here will be the reference to original paper]</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage,System.Single,System.Int32)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="detector">Latent SVM detector in internal representation</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <param name="overlap_threshold">threshold for the non-maximum suppression algorithm 
             = 0.5f [here will be the reference to original paper]</param>
            <param name="numThreads"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String)">
            <summary>
            Loads object from file
            </summary>
            <typeparam name="T">Object type to load</typeparam>
            <param name="filename">File name. </param>
            <returns>The function cvLoad loads object from file.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage)">
            <summary>
            Loads object from file
            </summary>
            <typeparam name="T">Object type to load</typeparam>
            <param name="filename">File name. </param>
            <param name="memstorage">Memory storage for dynamic structures, such as CvSeq  or CvGraph. It is not used for matrices or images. </param>
            <returns>The function cvLoad loads object from file.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage,System.String)">
            <summary>
            Loads object from file
            </summary>
            <typeparam name="T">Object type to load</typeparam>
            <param name="filename">File name. </param>
            <param name="memstorage">Memory storage for dynamic structures, such as CvSeq  or CvGraph. It is not used for matrices or images. </param>
            <param name="name">Optional object name. If it is NULL, the first top-level object in the storage will be loaded. </param>
            <returns>The function cvLoad loads object from file.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage,System.String,System.String@)">
            <summary>
            Loads object from file
            </summary>
            <typeparam name="T">Object type to load</typeparam>
            <param name="filename">File name. </param>
            <param name="memstorage">Memory storage for dynamic structures, such as CvSeq  or CvGraph. It is not used for matrices or images. </param>
            <param name="name">Optional object name. If it is NULL, the first top-level object in the storage will be loaded. </param>
            <param name="real_name">Optional output parameter that will contain name of the loaded object (useful if name=NULL).  </param>
            <returns>The function cvLoad loads object from file.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadHaarClassifierCascade(System.String,OpenCvSharp.CvSize)">
            <summary>
            Loads a trained cascade classifier from file or the classifier database embedded in OpenCV
            </summary>
            <param name="directory">Name of directory containing the description of a trained cascade classifier. </param>
            <param name="orig_window_size">Original size of objects the cascade has been trained on. Note that it is not stored in the cascade and therefore must be specified separately. </param>
            <returns></returns>
            <remarks>The function is obsolete. Nowadays object detection classifiers are stored in XML or YAML files, rather than in directories. To load cascade from a file, use cvLoad function. </remarks>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImage(System.String)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImage(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <param name="flags">Specifies colorness and Depth of the loaded image.</param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImageM(System.String)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImageM(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <param name="flags">Specifies colorness and Depth of the loaded image.</param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadLatentSvmDetector(System.String)">
            <summary>
            load trained detector from a file
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadWindowParameters(System.String)">
            <summary>
            Load parameters of the window.
            </summary>
            <param name="name">Name of the window</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Log(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates natural logarithm of every array element absolute value
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array, it should have double type or the same type as the source. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Remaps image to log-polar space.
            The function emulates the human "foveal" vision and can be used for fast scale and rotation-invariant template matching, for object tracking etc.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="center">The transformation center, where the output precision is maximal. </param>
            <param name="M">Magnitude scale parameter. See below. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Remaps image to log-polar space.
            The function emulates the human "foveal" vision and can be used for fast scale and rotation-invariant template matching, for object tracking etc.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="center">The transformation center, where the output precision is maximal. </param>
            <param name="M">Magnitude scale parameter. See below. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHAdd(OpenCvSharp.CvLSH,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="lsh"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHAdd(OpenCvSharp.CvLSH,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="lsh"></param>
            <param name="data"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHQuery(OpenCvSharp.CvLSH,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Query the LSH n times for at most k nearest points; data is n x d,
            indices and dist are n x k. At most emax stored points will be accessed. 
            </summary>
            <param name="lsh"></param>
            <param name="query_points"></param>
            <param name="indices"></param>
            <param name="dist"></param>
            <param name="k"></param>
            <param name="emax"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHRemove(OpenCvSharp.CvLSH,OpenCvSharp.CvMat)">
            <summary>
            Remove vectors from LSH, as addressed by given indices.
            </summary>
            <param name="lsh"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHSize(OpenCvSharp.CvLSH)">
            <summary>
            Return the number of vectors in the LSH.
            </summary>
            <param name="lsh"></param>
            <returns>number of vectors</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. In case of multi-channel source and destination arrays, the table should either have a single-channel (in this case the same table is used for all channels), or the same number of channels as the source/destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Byte[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int16[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Single[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="src">Source array of 8-bit elements. </param>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanCorrect(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            Adjusts model state
            </summary>
            <param name="kalman">Kalman filter</param>
            <param name="measurement">CvMat containing the measurement vector. </param>
            <returns>The function stores adjusted state at kalman->state_post and returns it on output.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByMeasurement(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            Adjusts model state
            </summary>
            <param name="kalman">Kalman filter</param>
            <param name="measurement">CvMat containing the measurement vector. </param>
            <returns>The function stores adjusted state at kalman->state_post and returns it on output.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanPredict(OpenCvSharp.CvKalman)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="kalman">Kalman filter state. </param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanPredict(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="kalman">Kalman filter state. </param>
            <param name="control">Control vector (uk), should be null iff there is no external control (control_params=0).</param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByTime(OpenCvSharp.CvKalman)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="kalman">Kalman filter state. </param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByTime(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="kalman">Kalman filter state. </param>
            <param name="control">Control vector (uk), should be null iff there is no external control (control_params=0).</param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="samples">Floating-point matrix of input samples, one row per sample. </param>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="samples">Floating-point matrix of input samples, one row per sample. </param>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
            <param name="attemps"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="samples">Floating-point matrix of input samples, one row per sample. </param>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="samples">Floating-point matrix of input samples, one row per sample. </param>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="_centers"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr,System.Double@)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="samples">Floating-point matrix of input samples, one row per sample. </param>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="_centers"></param>
            <param name="compactness"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IncRefData(OpenCvSharp.CvArr)">
            <summary>
            Increments array data reference counter
            </summary>
            <param name="arr">Array header. </param>
            <returns>The function cvIncRefData increments CvMat or CvMatND data reference counter and returns the new counter value if the reference counter pointer is not NULL, otherwise it returns zero. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFaceTracker(OpenCvSharp.IplImage,OpenCvSharp.CvRect[])">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font">font structure initialized by the function. </param>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font">font structure initialized by the function. </param>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font">font structure initialized by the function. </param>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
            <param name="thickness">Thickness of the text strokes. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font">font structure initialized by the function. </param>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
            <param name="thickness">Thickness of the text strokes. </param>
            <param name="line_type">Type of the strokes, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Initializes allocated by user image header
            </summary>
            <param name="image">Image header to initialise. </param>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin)">
            <summary>
            Initializes allocated by user image header
            </summary>
            <param name="image">Image header to initialise. </param>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <param name="origin">Origin of image</param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin,System.Int32)">
            <summary>
            Initializes allocated by user image header
            </summary>
            <param name="image">Image header to initialise. </param>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <param name="origin">Origin of image</param>
            <param name="align">Alignment for image rows, typically 4 or 8 bytes. </param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitIntrinsicParams2D(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat)">
            <summary>
            Finds the initial camera matrix from the 3D-2D point correspondences
            </summary>
            <param name="objectPoints">The joint array of object points</param>
            <param name="imagePoints">The joint array of object point projections</param>
            <param name="npoints">The array of point counts</param>
            <param name="imageSize">The image size in pixels</param>
            <param name="cameraMatrix">The output camera matrix</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitIntrinsicParams2D(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,System.Double)">
            <summary>
            Finds the initial camera matrix from the 3D-2D point correspondences
            </summary>
            <param name="objectPoints">The joint array of object points</param>
            <param name="imagePoints">The joint array of object point projections</param>
            <param name="npoints">The array of point counts</param>
            <param name="imageSize">The image size in pixels</param>
            <param name="cameraMatrix">The output camera matrix</param>
            <param name="aspectRatio">If it is zero or negative, both f_x and f_y are estimated independently. Otherwise f_x = f_y * aspectRatio</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="line_iterator">Line iterator state structure to be generated. </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@,OpenCvSharp.PixelConnectivity)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="line_iterator">Line iterator state structure to be generated. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="line_iterator">Line iterator state structure to be generated. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <param name="left_to_right">The flag, indicating whether the line should be always scanned from the left-most point to the right-most out of pt1 and pt2 (left_to_right=true), or it is scanned in the specified order, from pt1 to pt2 (left_to_right=false). </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Initializes matrix header.
            </summary>
            <param name="mat">Reference to the matrix header to be initialized. </param>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader``1(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            Initializes matrix header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">Reference to the matrix header to be initialized. </param>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader``1(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[],System.Int32)">
            <summary>
            Initializes matrix header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">Reference to the matrix header to be initialized. </param>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <param name="step">Full row width in bytes of the data assigned. By default, the minimal possible step is used, i.e., no gaps is assumed between subsequent rows of the matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatNDHeader(OpenCvSharp.CvMatND,System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Initializes multi-dimensional array header.
            </summary>
            <param name="mat">Reference to the array header to be initialized. </param>
            <param name="dims">Number of array dimensions. </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements. The same as for CvMat. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatNDHeader``1(OpenCvSharp.CvMatND,System.Int32,System.Int32[],OpenCvSharp.MatrixType,``0[])">
            <summary>
            Initializes multi-dimensional array header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">Reference to the array header to be initialized. </param>
            <param name="dims">Number of array dimensions. </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements. The same as for CvMat. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitSparseMatIterator(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMatIterator@)">
            <summary>
            Initializes sparse array elements iterator
            </summary>
            <param name="mat">Input array</param>
            <param name="mat_iterator">Initialized iterator</param>
            <returns>the first sparse matrix element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitSubdivDelaunay2D(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvRect)">
            <summary>
            CvSubdiv2Dの初期化
            </summary>
            <param name="subdiv"></param>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitTreeNodeIterator``1(OpenCvSharp.CvTreeNodeIterator@,OpenCvSharp.CvTreeNode{``0},System.Int32)">
            <summary>
            Initializes tree node iterator
            </summary>
            <param name="tree_iterator">Tree iterator initialized by the function. </param>
            <param name="first">The initial node to start traversing from. </param>
            <param name="max_level">The maximal level of the tree (first node assumed to be at the first level) to traverse up to. For example, 1 means that only nodes at the same level as first  should be visited, 2 means that the nodes on the same level as first and their direct children should be visited etc. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitUndistortMap(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Pre-computes the undistortion map - coordinates of the corresponding pixel in the distorted image for every pixel in the corrected image. 
            </summary>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. </param>
            <param name="mapx">The output array of x-coordinates of the map. </param>
            <param name="mapy">The output array of y-coordinates of the map. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitUndistortRectifyMap(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes undistortion+rectification transformation map a head of stereo camera
            </summary>
            <param name="camera_matrix">The camera matrix A=[fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="dist_coeffs">The vector of distortion coefficients, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="R">The rectification transformation in object space (3x3 matrix). R1 or R2, computed by cvStereoRectify can be passed here. If the parameter is null, the identity matrix is used. </param>
            <param name="new_camera_matrix">The new camera matrix A'=[fx' 0 cx'; 0 fy' cy'; 0 0 1]. </param>
            <param name="mapx">The output array of x-coordinates of the map. </param>
            <param name="mapy">The output array of y-coordinates of the map. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Inpaint(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.InpaintMethod)">
            <summary>
            Inpaints the selected region in the image.
            </summary>
            <param name="src">The input 8-bit 1-channel or 3-channel image. </param>
            <param name="mask">The inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that needs to be inpainted. </param>
            <param name="dst">The output image of the same format and the same size as input. </param>
            <param name="inpaintRange">The radius of circlular neighborhood of each point inpainted that is considered by the algorithm. </param>
            <param name="flags">The inpainting method.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InRange(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Checks that array elements lie between elements of two other arrays
            </summary>
            <param name="src">The first source array. </param>
            <param name="lower">The inclusive lower boundary array. </param>
            <param name="upper">The exclusive upper boundary array. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InRangeS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Checks that array elements lie between two scalars
            </summary>
            <param name="src">The first source array. </param>
            <param name="lower">The inclusive lower boundary. </param>
            <param name="upper">The exclusive upper boundary. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.InsertNodeIntoTree``1(OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0})">
            <summary>
            Adds new node to the tree
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The inserted node. </param>
            <param name="parent">The parent node that is already in the tree. </param>
            <param name="frame">The top level node. If parent and frame are the same, v_prev  field of node is set to null rather than parent. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="image">The source image, WxH, 8-bit or floating-point (32f or 64f) image. </param>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="image">The source image, WxH, 8-bit or floating-point (32f or 64f) image. </param>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
            <param name="sqsum">The integral image for squared pixel values, W+1xH+1, double precision floating-point (64f). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="image">The source image, WxH, 8-bit or floating-point (32f or 64f) image. </param>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
            <param name="sqsum">The integral image for squared pixel values, W+1xH+1, double precision floating-point (64f). </param>
            <param name="tilted_sum">The integral for the image rotated by 45 degrees, W+1xH+1, the same data type as sum. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Invert(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Invert(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <param name="method">Inversion method</param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Inv(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Inv(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
            <param name="method">Inversion method</param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InvSqrt(System.Single)">
            <summary>
            Calculates inverse square root
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IplDepth(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IsInf(System.Double)">
            <summary>
            Determines if the argument is Infinity
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IsNaN(System.Double)">
            <summary>
            Determines if the argument is Not A Number
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <param name="min_size">Minimum window size. By default, it is set to the size of samples the classifier has been trained on (~20×20 for face detection). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <param name="max_radius">Maximal radius of the circles to search for. By default the maximal radius is set to max(image_width, image_height). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel grayscale image. </param>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <param name="max_radius">Maximal radius of the circles to search for. By default the maximal radius is set to max(image_width, image_height). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel binary image. In case of probabilistic method the image is modified by the function. </param>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel binary image. In case of probabilistic method the image is modified by the function. </param>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel binary image. In case of probabilistic method the image is modified by the function. </param>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="image">The input 8-bit single-channel binary image. In case of probabilistic method the image is modified by the function. </param>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>am>
        </member>
        <member name="M:OpenCvSharp.Cv.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.XorS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.XorS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GEMM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="alpha">Scale factor</param>
            <param name="src3">The third source array (shift). Can be null, if there is no shift. </param>
            <param name="beta">Scale factor</param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GEMM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.GemmOperation)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="alpha">Scale factor</param>
            <param name="src3">The third source array (shift). Can be null, if there is no shift. </param>
            <param name="beta">Scale factor</param>
            <param name="dst">The destination array. </param>
            <param name="tABC">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAdd(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="src3">The third source array (shift). Can be null, if there is no shift. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="alpha">Scale factor</param>
            <param name="src3">The third source array (shift). Can be null, if there is no shift. </param>
            <param name="beta">Scale factor</param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.GemmOperation)">
            <summary>
            Performs generalized matrix multiplication
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="alpha">Scale factor</param>
            <param name="src3">The third source array (shift). Can be null, if there is no shift. </param>
            <param name="beta">Scale factor</param>
            <param name="dst">The destination array. </param>
            <param name="tABC">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Get1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Get2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Get3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Return the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetAffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            Calculates affine transform from 3 corresponding points.
            </summary>
            <param name="src">Coordinates of 3 triangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 3 corresponding triangle vertices in the destination image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetAffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            Calculates affine transform from 3 corresponding points.
            </summary>
            <param name="src">Coordinates of 3 triangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 3 corresponding triangle vertices in the destination image. </param>
            <param name="map_matrix">Pointer to the destination 2×3 matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCaptureProperty(OpenCvSharp.CvCapture,System.Int32)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="property_id">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCaptureProperty(OpenCvSharp.CvCapture,OpenCvSharp.CaptureProperty)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="property_id">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCentralMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            Retrieves central moment from moment state structure
            </summary>
            <param name="moments">Moment state structure</param>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Central moment</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCol(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            Returns array column
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="col">Zero-based index of the selected column. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCols(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            Returns array column span
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="start_col">Zero-based index of the starting column (inclusive) of the span. </param>
            <param name="end_col">Zero-based index of the ending column (exclusive) of the span. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDiag(OpenCvSharp.CvArr,OpenCvSharp.CvMat@)">
            <summary>
            Returns one of array diagonals
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDiag(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.DiagType)">
            <summary>
            Returns one of array diagonals
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="diag">Array diagonal. Zero corresponds to the main diagonal, -1 corresponds to the diagonal above the main etc., 1 corresponds to the diagonal below the main etc. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDims(OpenCvSharp.CvArr)">
            <summary>
            Return number of array dimensions and their sizes
            </summary>
            <param name="arr">Input array. </param>
            <returns>number of array dimensions.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDims(OpenCvSharp.CvArr,System.Int32[]@)">
            <summary>
            Return number of array dimensions and their sizes
            </summary>
            <param name="arr">Input array. </param>
            <param name="sizes">Optional output vector of the array dimension sizes. For 2d arrays the number of rows (height) goes first, number of columns (width) next. </param>
            <returns>number of array dimensions.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDimSize(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Return the size of particular dimension
            </summary>
            <param name="arr">Input array. </param>
            <param name="index">Zero-based dimension index (for matrices 0 means number of rows, 1 means number of columns; for images 0 means height, 1 means width). </param>
            <returns>the particular dimension size (number of elements per that dimension).</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetElemType(OpenCvSharp.CvArr)">
            <summary>
            Returns type of array elements
            </summary>
            <param name="arr">Input array. </param>
            <returns>type of the array elements</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetErrMode">
            <summary>
            Returns the current error mode
            </summary>
            <returns>the current error mode</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetErrStatus">
            <summary>
            Returns the current error status
            </summary>
            <returns>the current error status</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNode(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. If both map and key are nulls, the function returns the root file node - a map that contains top-level nodes. </param>
            <param name="key">Unique pointer to the node name, retrieved with cvGetHashedKey. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNode(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode,System.Boolean)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. If both map and key are nulls, the function returns the root file node - a map that contains top-level nodes. </param>
            <param name="key">Unique pointer to the node name, retrieved with cvGetHashedKey. </param>
            <param name="create_missing">Flag that specifies, whether an absent node should be added to the map, or not. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNodeName(OpenCvSharp.CvFileNode)">
            <summary>
            Returns name of file node
            </summary>
            <param name="node">File node.</param>
            <returns>name of the file node or null</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNodeByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches in all the top-level nodes (streams), starting from the first one. </param>
            <param name="name">The file node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetGraphVtx(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            Finds graph vertex by index
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx_idx">Index of the vertex. </param>
            <returns>The function cvGetGraphVtx finds the graph vertex by index and returns the pointer to it or NULL if the vertex does not belong to the graph.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHashedKey(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Returns a unique pointer for given name
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Literal node name. </param>
            <returns>The unique pointer for each particular file node name.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHashedKey(OpenCvSharp.CvFileStorage,System.String,System.Boolean)">
            <summary>
            Returns a unique pointer for given name
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Literal node name. </param>
            <param name="create_missing">Length of the name (if it is known a priori), or -1 if it needs to be calculated. </param>
            <returns>The unique pointer for each particular file node name.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_1D(OpenCvSharp.CvHistogram,System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_2D(OpenCvSharp.CvHistogram,System.Int32,System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_3D(OpenCvSharp.CvHistogram,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <param name="idx2">3rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_nD(OpenCvSharp.CvHistogram,System.Int32[])">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="idx">Indices of the bin. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHuMoments(OpenCvSharp.CvMoments,OpenCvSharp.CvHuMoments@)">
            <summary>
            Calculates seven Hu invariants
            </summary>
            <param name="moments">Moment state structure</param>
            <param name="humoments">Pointer to Hu moments structure</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImage(OpenCvSharp.CvArr)">
            <summary>
            Returns image header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <returns>returns the image header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImage(OpenCvSharp.CvArr,OpenCvSharp.IplImage@)">
            <summary>
            Returns image header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <param name="image_header">IplImage structure used as a temporary buffer. </param>       
            <returns>returns the image header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImageCOI(OpenCvSharp.IplImage)">
            <summary>
            Returns index of channel of interest
            </summary>
            <param name="image">Image header. </param>
            <returns>channel of interest of the image (it returns 0 if all the channels are selected)</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImageROI(OpenCvSharp.IplImage)">
            <summary>
            Returns image ROI coordinates.
            The rectangle cvRect(0,0,image.Width,image.Height) is returned if there is no ROI.
            </summary>
            <param name="image">Image header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <returns>returns a matrix header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer. </param>       
            <returns>returns a matrix header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32@)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer. </param>       
            <param name="coi">Optional output parameter for storing COI. </param>
            <returns>returns a matrix header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32@,System.Boolean)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer. </param>       
            <param name="coi">Optional output parameter for storing COI. </param>
            <param name="allowND">If true, the function accepts multi-dimensional dense arrays (CvMatND*) and returns 2D (if CvMatND has two dimensions) or 1D matrix (when CvMatND has 1 dimension or more than 2 dimensions). The array must be continuous. </param>       
            <returns>returns a matrix header for the input array that can be a matrix</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNextSparseNode(OpenCvSharp.CvSparseMatIterator)">
            <summary>
            Moves iterator to the next sparse matrix element and returns pointer to it.
            </summary>
            <param name="mat_iterator">Sparse array iterator.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMinMaxHistValue(OpenCvSharp.CvHistogram,System.Single@,System.Single@)">
            <summary>
            Finds minimum and maximum histogram bins.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="min_value">The minimum value of the histogram.</param>
            <param name="max_value">The maximum value of the histogram.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMinMaxHistValue(OpenCvSharp.CvHistogram,System.Single@,System.Single@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds minimum and maximum histogram bins.
            </summary>
            <param name="hist">Histogram. </param>
            <param name="min_value">The minimum value of the histogram.</param>
            <param name="max_value">The maximum value of the histogram.</param>
            <param name="min_idx">The array of coordinates for minimum.</param>
            <param name="max_idx">The array of coordinates for maximum.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetModuleInfo(System.String,System.String@,System.String@)">
            <summary>
            Retrieves information about the registered module(s) and plugins
            </summary>
            <param name="module_name">Name of the module of interest, or null, which means all the modules. </param>
            <param name="version">The output parameter. Information about the module(s), including version. </param>
            <param name="loaded_addon_plugins">The list of names and versions of the optimized plugins that CXCORE was able to find and load. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNormalizedCentralMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            Retrieves normalized central moment from moment state structure
            </summary>
            <param name="moments">Moment state structure</param>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Central moment</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNumThreads">
            <summary>
            Returns the current number of threads that are used by parallelized (via OpenMP) OpenCV functions.
            </summary>
            <returns>the current number of threads used</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalDFTSize(System.Int32)">
            <summary>
            Returns optimal DFT size for given vector size
            </summary>
            <param name="size0">Vector size. </param>
            <returns>optimal DFT size for given vector size</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter
            </summary>
            <param name="cameraMatrix">The input camera matrix</param>
            <param name="distCoeffs">The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">The original image size</param>
            <param name="alpha">The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image);</param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat,OpenCvSharp.CvSize)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter
            </summary>
            <param name="cameraMatrix">The input camera matrix</param>
            <param name="distCoeffs">The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">The original image size</param>
            <param name="alpha">The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image);</param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
            <param name="newImageSize">The image size after rectification. By default it will be set to imageSize .</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvRect@)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter
            </summary>
            <param name="cameraMatrix">The input camera matrix</param>
            <param name="distCoeffs">The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">The original image size</param>
            <param name="alpha">The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image);</param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
            <param name="newImageSize">The image size after rectification. By default it will be set to imageSize .</param>
            <param name="validPixROI">The optional output rectangle that will outline all-good-pixels region in the undistorted image.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetPerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            Calculates perspective transform from 4 corresponding points.
            </summary>
            <param name="src">Coordinates of 4 quadrangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 4 corresponding quadrangle vertices in the destination image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetPerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            Calculates perspective transform from 4 corresponding points.
            </summary>
            <param name="src">Coordinates of 4 quadrangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 4 corresponding quadrangle vertices in the destination image. </param>
            <param name="map_matrix">Pointer to the destination 3×3 matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspectiveQMatrix(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            Calculates perspective transform from 4 corresponding points.
            </summary>
            <param name="src">Coordinates of 4 quadrangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 4 corresponding quadrangle vertices in the destination image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspectiveQMatrix(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            Calculates perspective transform from 4 corresponding points.
            </summary>
            <param name="src">Coordinates of 4 quadrangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 4 corresponding quadrangle vertices in the destination image. </param>
            <param name="map_matrix">Pointer to the destination 3×3 matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetQuadrangleSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Retrieves pixel quadrangle from image with sub-pixel accuracy.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Extracted quadrangle. </param>
            <param name="map_matrix">The transformation 2 × 3 matrix [A|b]. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="arr">Array header. </param>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="arr">Array header. </param>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
            <param name="step">Output full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@,System.Int32@,OpenCvSharp.CvSize@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="arr">Array header. </param>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
            <param name="step">Output full row length in bytes. </param>
            <param name="roi_size">Output ROI size. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="arr">Input array. Must have a single channel. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="arr">Input array. Must have a single channel. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="arr">Input array. Must have a single channel. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRealND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="arr">Input array. Must have a single channel. </param>
            <param name="idx">Array of the element indices </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRectSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Retrieves pixel rectangle from image with sub-pixel accuracy.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Extracted rectangle. </param>
            <param name="center">Floating point coordinates of the extracted rectangle center within the source image. The center must be inside the image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRootFileNode(OpenCvSharp.CvFileStorage)">
            <summary>
            Retrieves one of top-level nodes of the file storage
            </summary>
            <param name="fs">File storage. </param>
            <returns>One of top-level file nodes</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRootFileNode(OpenCvSharp.CvFileStorage,System.Int32)">
            <summary>
            Retrieves one of top-level nodes of the file storage
            </summary>
            <param name="fs">File storage. </param>
            <param name="stream_index">Zero-based index of the stream. In most cases, there is only one stream in the file, however there can be several. </param>
            <returns>One of top-level file nodes</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRotationMatrix2D(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            Calculates affine matrix of 2d rotation.
            </summary>
            <param name="center">Center of the rotation in the source image. </param>
            <param name="angle">The rotation angle in degrees. Positive values mean couter-clockwise rotation (the coordiate origin is assumed at top-left corner). </param>
            <param name="scale">Isotropic scale factor. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv._2DRotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            Calculates affine matrix of 2d rotation.
            </summary>
            <param name="center">Center of the rotation in the source image. </param>
            <param name="angle">The rotation angle in degrees. Positive values mean couter-clockwise rotation (the coordiate origin is assumed at top-left corner). </param>
            <param name="scale">Isotropic scale factor. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv._2DRotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double,OpenCvSharp.CvMat@)">
            <summary>
            Calculates affine matrix of 2d rotation.
            </summary>
            <param name="center">Center of the rotation in the source image. </param>
            <param name="angle">The rotation angle in degrees. Positive values mean couter-clockwise rotation (the coordiate origin is assumed at top-left corner). </param>
            <param name="scale">Isotropic scale factor. </param>
            <param name="map_matrix">Pointer to the destination 2×3 matrix. </param>
            <returns>The transformation maps the rotation center to itself. If this is not the purpose, the shift should be adjusted.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRow(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            Returns array row
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="row">Zero-based index of the selected row. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRows(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            Returns array row span
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="start_row">Zero-based index of the starting row (inclusive) of the span. </param>
            <param name="end_row">Zero-based index of the ending row (exclusive) of the span. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRows(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns array row span
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="start_row">Zero-based index of the starting row (inclusive) of the span. </param>
            <param name="end_row">Zero-based index of the ending row (exclusive) of the span. </param>
            <param name="delta_row">Index step in the row span. That is, the function extracts every delta_row-th row from start_row and up to (but not including) end_row. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqElem``1(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            Returns pointer to sequence element by its index
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="index">Index of element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqElem``1(OpenCvSharp.CvSeq{``0},System.Int32)">
            <summary>
            Returns pointer to sequence element by its index
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="index">Index of element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqReaderPos(OpenCvSharp.CvSeqReader)">
            <summary>
            Returns the current reader position
            </summary>
            <param name="reader">Reader state. </param>
            <returns>the current reader position</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSetElem(OpenCvSharp.CvSet,System.Int32)">
            <summary>
            Finds set element by its index
            </summary>
            <param name="set_header">Set. </param>
            <param name="index">Index of the set element within a sequence. </param>
            <returns>the pointer to it or null if the index is invalid or the corresponding node is free.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSize(OpenCvSharp.CvArr)">
            <summary>
            Returns size of matrix or image ROI
            </summary>
            <param name="arr">array header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSpatialMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            Retrieves spatial moment from moment state structure
            </summary>
            <param name="moments">The moment state, calculated by cvMoments</param>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Spatial moments</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetStarKeypoints(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Retrieves keypoints using the StarDetector algorithm.
            </summary>
            <param name="img">The input 8-bit grayscale image</param>
            <param name="storage">Memory storage where the keypoints will be stored</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetStarKeypoints(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            Retrieves keypoints using the StarDetector algorithm.
            </summary>
            <param name="img">The input 8-bit grayscale image</param>
            <param name="storage">Memory storage where the keypoints will be stored</param>
            <param name="params">Various algorithm parameters given to the structure CvStarDetectorParams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSubRect(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            Returns matrix header corresponding to the rectangular sub-array of input image or matrix
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resultant sub-array header. </param>
            <param name="rect">Zero-based coordinates of the rectangle of interest. </param>
            <returns>Reference to the header, corresponding to a specified rectangle of the input array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSubArr(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            Returns matrix header corresponding to the rectangular sub-array of input image or matrix
            </summary>
            <param name="arr">Input array. </param>
            <param name="submat">Reference to the resultant sub-array header. </param>
            <param name="rect">Zero-based coordinates of the rectangle of interest. </param>
            <returns>Reference to the header, corresponding to a specified rectangle of the input array.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTextSize(System.String,OpenCvSharp.CvFont,OpenCvSharp.CvSize@,System.Int32@)">
            <summary>
            Retrieves width and height of text string
            </summary>
            <param name="text_string">Input string. </param>
            <param name="font">Reference to the font structure. </param>
            <param name="text_size">Resultant size of the text string. Height of the text does not include the height of character parts that are below the baseline. </param>
            <param name="baseline">y-coordinate of the baseline relatively to the bottom-most text point. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTickCount">
            <summary>
            Returns number of tics starting from some platform-dependent event (number of CPU ticks from the startup, number of milliseconds from 1970th year etc.).
            </summary>
            <returns>Number of tics</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTickFrequency">
            <summary>
            Returns number of tics per microsecond
            </summary>
            <returns>number of tics per microsecond.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetThreadNum">
            <summary>
            Returns index of the current thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTrackbarPos(System.String,System.String)">
            <summary>
            Returns the current position of the specified trackbar.
            </summary>
            <param name="trackbar_name">Name of trackbar. </param>
            <param name="window_name">Name of the window which is the parent of trackbar. </param>
            <returns>the current position of the specified trackbar.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetValidDisparityROI(OpenCvSharp.CvRect,OpenCvSharp.CvRect,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="roi1"></param>
            <param name="roi2"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="SADWindowSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowHandle(System.String)">
            <summary>
            Returns native window handle (HWND in case of Win32 and GtkWidget in case of GTK+). 
            </summary>
            <param name="name">Name of the window. </param>
            <returns>HWND in case of Win32 and GtkWidget in case of GTK+</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowName(System.IntPtr)">
            <summary>
            Returns the name of window given its native handle (HWND in case of Win32 and GtkWidget in case of GTK+). 
            </summary>
            <param name="window_handle">Handle of the window. </param>
            <returns>Window name</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowProperty(System.String,OpenCvSharp.WindowProperty)">
            <summary>
            Get Property of the window
            </summary>
            <param name="name">Window name</param>
            <param name="prop_id">Property identifier</param>
            <returns>Value of the specified property</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double)">
            <summary>
            Determines strong corners on image
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image. </param>
            <param name="eig_image">Temporary floating-point 32-bit image of the same size as image. </param>
            <param name="temp_image">Another temporary image of the same size and same format as eig_image. </param>
            <param name="corners">Output parameter. Detected corners. </param>
            <param name="corner_count">Output parameter. Number of detected corners. </param>
            <param name="quality_level">Multiplier for the maxmin eigenvalue; specifies minimal accepted quality of image corners. </param>
            <param name="min_distance">Limit, specifying minimum possible distance between returned corners; Euclidian distance is used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Determines strong corners on image
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image. </param>
            <param name="eig_image">Temporary floating-point 32-bit image of the same size as image. </param>
            <param name="temp_image">Another temporary image of the same size and same format as eig_image. </param>
            <param name="corners">Output parameter. Detected corners. </param>
            <param name="corner_count">Output parameter. Number of detected corners. </param>
            <param name="quality_level">Multiplier for the maxmin eigenvalue; specifies minimal accepted quality of image corners. </param>
            <param name="min_distance">Limit, specifying minimum possible distance between returned corners; Euclidian distance is used. </param>
            <param name="mask">Region of interest. The function selects points either in the specified region or in the whole image if the mask is null. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Determines strong corners on image
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image. </param>
            <param name="eig_image">Temporary floating-point 32-bit image of the same size as image. </param>
            <param name="temp_image">Another temporary image of the same size and same format as eig_image. </param>
            <param name="corners">Output parameter. Detected corners. </param>
            <param name="corner_count">Output parameter. Number of detected corners. </param>
            <param name="quality_level">Multiplier for the maxmin eigenvalue; specifies minimal accepted quality of image corners. </param>
            <param name="min_distance">Limit, specifying minimum possible distance between returned corners; Euclidian distance is used. </param>
            <param name="mask">Region of interest. The function selects points either in the specified region or in the whole image if the mask is null. </param>
            <param name="block_size">Size of the averaging block, passed to underlying cvCornerMinEigenVal or cvCornerHarris used by the function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32,System.Boolean)">
            <summary>
            Determines strong corners on image
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image. </param>
            <param name="eig_image">Temporary floating-point 32-bit image of the same size as image. </param>
            <param name="temp_image">Another temporary image of the same size and same format as eig_image. </param>
            <param name="corners">Output parameter. Detected corners. </param>
            <param name="corner_count">Output parameter. Number of detected corners. </param>
            <param name="quality_level">Multiplier for the maxmin eigenvalue; specifies minimal accepted quality of image corners. </param>
            <param name="min_distance">Limit, specifying minimum possible distance between returned corners; Euclidian distance is used. </param>
            <param name="mask">Region of interest. The function selects points either in the specified region or in the whole image if the mask is null. </param>
            <param name="block_size">Size of the averaging block, passed to underlying cvCornerMinEigenVal or cvCornerHarris used by the function. </param>
            <param name="use_harris">If true, Harris operator (cvCornerHarris) is used instead of default cvCornerMinEigenVal. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32,System.Boolean,System.Double)">
            <summary>
            Determines strong corners on image
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image. </param>
            <param name="eig_image">Temporary floating-point 32-bit image of the same size as image. </param>
            <param name="temp_image">Another temporary image of the same size and same format as eig_image. </param>
            <param name="corners">Output parameter. Detected corners. </param>
            <param name="corner_count">Output parameter. Number of detected corners. </param>
            <param name="quality_level">Multiplier for the maxmin eigenvalue; specifies minimal accepted quality of image corners. </param>
            <param name="min_distance">Limit, specifying minimum possible distance between returned corners; Euclidian distance is used. </param>
            <param name="mask">Region of interest. The function selects points either in the specified region or in the whole image if the mask is null. </param>
            <param name="block_size">Size of the averaging block, passed to underlying cvCornerMinEigenVal or cvCornerHarris used by the function. </param>
            <param name="use_harris">If true, Harris operator (cvCornerHarris) is used instead of default cvCornerMinEigenVal. </param>
            <param name="k">Free parameter of Harris detector; used only if use_harris is true.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GrabFrame(OpenCvSharp.CvCapture)">
            <summary>
            Grabs the frame from camera or file. The grabbed frame is stored internally. 
            The purpose of this function is to grab frame fast that is important for syncronization in case of reading from several cameras simultaneously. 
            The grabbed frames are not exposed because they may be stored in compressed format (as defined by camera/driver). 
            To retrieve the grabbed frame, cvRetrieveFrame should be used. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph)">
            <summary>
            Adds vertex to graph
            </summary>
            <param name="graph">Graph. </param>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Adds vertex to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Optional input argument used to initialize the added vertex (only user-defined fields beyond sizeof(CvGraphVtx) are copied). </param>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx@)">
            <summary>
            Adds vertex to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Optional input argument used to initialize the added vertex (only user-defined fields beyond sizeof(CvGraphVtx) are copied). </param>
            <param name="inserted_vtx">The address of the new vertex is written there. </param>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <param name="inserted_edge">Optional output parameter to contain the address of the inserted edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <param name="inserted_edge">Optional output parameter to contain the address of the inserted edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphEdgeIdx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge)">
            <summary>
            Returns index of graph edge
            </summary>
            <param name="graph">Graph. </param>
            <param name="edge">Graph edge. </param>
            <returns>The function cvGraphEdgeIdx returns index of the graph edge.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphGetEdgeCount(OpenCvSharp.CvGraph)">
            <summary>
            Returns count of edges
            </summary>
            <param name="graph">Graph. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphGetVtxCount(OpenCvSharp.CvGraph)">
            <summary>
            Returns count of vertex
            </summary>
            <param name="graph">Graph. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            Removes edge from graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <remarks>The function cvGraphRemoveEdge removes the edge connecting two specified vertices. If the vertices are not connected [in that order], the function does nothing. </remarks>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Removes edge from graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <remarks>The function cvGraphRemoveEdgeByPtr removes the edge connecting two specified vertices. If the vertices are not connected [in that order], the function does nothing.</remarks>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveVtx(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            Removes vertex from graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="index">Index of the removed vertex. </param>
            <returns>The function cvGraphRemoveAddVtx removes a vertex from the graph together with all the edges incident to it. The function reports an error, if the input vertex does not belong to the graph. The return value is number of edges deleted, or -1 if the vertex does not belong to the graph.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveVtxByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Removes vertex from graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Vertex to remove </param>
            <returns>The function cvGraphRemoveVtxByPtr removes a vertex from the graph together with all the edges incident to it. The function reports an error, if the vertex does not belong to the graph. The return value is number of edges deleted, or -1 if the vertex does not belong to the graph.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxDegree(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            Counts edges indicent to the vertex
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx_idx">Index of the graph vertex.  </param>
            <returns>The function cvGraphVtxDegree returns the number of edges incident to the specified vertex, both incoming and outcoming. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxDegreeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Counts edges indicent to the vertex
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Index of the graph vertex.  </param>
            <returns>The function cvGraphVtxDegree returns the number of edges incident to the specified vertex, both incoming and outcoming.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxIdx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Returns index of graph vertex
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Graph vertex. </param>
            <returns>The function cvGraphVtxIdx returns index of the graph vertex.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WaitKey">
            <summary>
            Waits for key event infinitely (delay&lt;=0) or for "delay" milliseconds. 
            Returns the code of the pressed key or -1 if no key were pressed until the specified timeout has elapsed. 
            </summary>
            <returns>key code</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WaitKey(System.Int32)">
            <summary>
            Waits for key event infinitely (delay&lt;=0) or for "delay" milliseconds. 
            Returns the code of the pressed key or -1 if no key were pressed until the specified timeout has elapsed. 
            </summary>
            <param name="delay">Delay in milliseconds. </param>
            <returns>key code</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Applies affine transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">2x3 transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            Applies affine transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">2x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            Applies affine transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">2x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
            <param name="fillval">A value used to fill outliers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
            <param name="fillval">A value used to fill outliers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Watershed(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Does watershed segmentation.
            </summary>
            <param name="image">The input 8-bit 3-channel image. </param>
            <param name="markers">The input/output 32-bit single-channel image (map) of markers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Write(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvArr)">
            <summary>
            Writes user object
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name, of the written object. Should be null if and only if the parent structure is a sequence. </param>
            <param name="ptr">Pointer to the object. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Write(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvArr,OpenCvSharp.CvAttrList)">
            <summary>
            Writes user object
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name, of the written object. Should be null if and only if the parent structure is a sequence. </param>
            <param name="ptr">Pointer to the object. </param>
            <param name="attributes">The attributes of the object. They are specific for each particular type.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteComment(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes comment
            </summary>
            <param name="fs">File storage. </param>
            <param name="comment">The written comment, single-line or multi-line. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteComment(OpenCvSharp.CvFileStorage,System.String,System.Boolean)">
            <summary>
            Writes comment
            </summary>
            <param name="fs">File storage. </param>
            <param name="comment">The written comment, single-line or multi-line. </param>
            <param name="eol_comment">If true, the function tries to put the comment in the end of current line. 
            If the flag is false, if the comment is multi-line, or if it does not fit in the end of the current line, the comment starts from a new line. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteFileNode(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvFileNode,System.Boolean)">
            <summary>
            Writes file node to another file storage
            </summary>
            <param name="fs">Destination file storage. </param>
            <param name="new_node_name">New name of the file node in the destination file storage. To keep the existing name, use cvGetFileNodeName(node). </param>
            <param name="node">The written node </param>
            <param name="embed">If the written node is a collection and this parameter is true, no extra level of hierarchy is created. 
            Instead, all the elements of node are written into the currently written structure. 
            Of course, map elements may be written only to map, and sequence elements may be written only to sequence. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteFrame(OpenCvSharp.CvVideoWriter,OpenCvSharp.IplImage)">
            <summary>
            Writes/appends one frame to video file. 
            </summary>
            <param name="writer">video writer structure. </param>
            <param name="image">the written frame.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteInt(OpenCvSharp.CvFileStorage,System.String,System.Int32)">
            <summary>
            Writes an integer value
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written value. Should be NULL if and only if the parent structure is a sequence. </param>
            <param name="value">The written value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteRawData``1(OpenCvSharp.CvFileStorage,``0[],System.String)">
            <summary>
            Writes multiple numbers
            </summary>
            <typeparam name="T">Type of the elements in src</typeparam>
            <param name="fs">File storage. </param>
            <param name="src">Written array </param>
            <param name="dt">Format</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteReal(OpenCvSharp.CvFileStorage,System.String,System.Double)">
            <summary>
            Writes a floating-point value
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written value. Should be null if and only if the parent structure is a sequence. </param>
            <param name="value">The written value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteString(OpenCvSharp.CvFileStorage,System.String,System.String)">
            <summary>
            Writes a text string
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written string. Should be null if and only if the parent structure is a sequence. </param>
            <param name="str">The written text string. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteString(OpenCvSharp.CvFileStorage,System.String,System.String,System.Boolean)">
            <summary>
            Writes a text string
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written string. Should be null if and only if the parent structure is a sequence. </param>
            <param name="str">The written text string. </param>
            <param name="quote">If true, the written string is put in quotes, regardless of whether they are required or not. 
            Otherwise, if the flag is false, quotes are used only when they are required (e.g. when the string starts with a digit or contains spaces). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FastArctan(System.Single,System.Single)">
            <summary>
            Calculates angle of 2D vector
            </summary>
            <param name="y">y-coordinate of 2D vector </param>
            <param name="x">x-coordinate of 2D vector </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">Type of the polygon boundaries.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">Type of the polygon boundaries.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">ype of the polygon boundaries.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="img">Image. </param>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">ype of the polygon boundaries.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Applies arbitrary linear filter to the image. In-place operation is supported. 
            When the aperture is partially outside the image, the function interpolates outlier pixel values from the nearest pixels that is inside the image. 
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="kernel">Convolution kernel, single-channel floating point matrix. If you want to apply different kernels to different channels, split the image using cvSplit into separate color planes and process them individually. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvPoint)">
            <summary>
            Applies arbitrary linear filter to the image. In-place operation is supported. 
            When the aperture is partially outside the image, the function interpolates outlier pixel values from the nearest pixels that is inside the image. 
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="kernel">Convolution kernel, single-channel floating point matrix. If you want to apply different kernels to different channels, split the image using cvSplit into separate color planes and process them individually. </param>
            <param name="anchor">The anchor of the kernel that indicates the relative position of a filtered point within the kernel. The anchor shoud lie within the kernel. The special default value (-1,-1) means that it is at the kernel center. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="image">Source chessboard view; it must be 8-bit grayscale or color image. </param>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="image">Source chessboard view; it must be 8-bit grayscale or color image. </param>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <param name="corner_count">The output corner counter. If it is not null, the function stores there the number of corners found. </param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,OpenCvSharp.ChessboardFlag)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="image">Source chessboard view; it must be 8-bit grayscale or color image. </param>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <param name="corner_count">The output corner counter. If it is not null, the function stores there the number of corners found. </param>
            <param name="flags">Various operation flags</param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="image">The source 8-bit single channel image. Non-zero pixels are treated as 1’s, zero pixels remain 0’s - that is image treated as binary. 
            To get such a binary image from grayscale, one may use cvThreshold, cvAdaptiveThreshold or cvCanny. The function modifies the source image content. </param>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="image">The source 8-bit single channel image. Non-zero pixels are treated as 1’s, zero pixels remain 0’s - that is image treated as binary. 
            To get such a binary image from grayscale, one may use cvThreshold, cvAdaptiveThreshold or cvCanny. The function modifies the source image content. </param>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="image">The source 8-bit single channel image. Non-zero pixels are treated as 1’s, zero pixels remain 0’s - that is image treated as binary. 
            To get such a binary image from grayscale, one may use cvThreshold, cvAdaptiveThreshold or cvCanny. The function modifies the source image content. </param>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="image">The source 8-bit single channel image. Non-zero pixels are treated as 1’s, zero pixels remain 0’s - that is image treated as binary. 
            To get such a binary image from grayscale, one may use cvThreshold, cvAdaptiveThreshold or cvCanny. The function modifies the source image content. </param>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <param name="method">Approximation method. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="image">The source 8-bit single channel image. Non-zero pixels are treated as 1’s, zero pixels remain 0’s - that is image treated as binary. 
            To get such a binary image from grayscale, one may use cvThreshold, cvAdaptiveThreshold or cvCanny. The function modifies the source image content. </param>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <param name="method">Approximation method. </param>
            <param name="offset">Offset, by which every contour point is shifted. This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindCornerSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],System.Int32,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Iterates to find the sub-pixel accurate location of corners, or radial saddle points.
            </summary>
            <param name="image">Input image. </param>
            <param name="corners">Initial coordinates of the input corners and refined coordinates on output. </param>
            <param name="count">Number of corners. </param>
            <param name="win">Half sizes of the search window.</param>
            <param name="zero_zone">Half size of the dead region in the middle of the search zone over which the summation in formulae below is not done. It is used sometimes to avoid possible singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such size. </param>
            <param name="criteria">Criteria for termination of the iterative process of corner refinement. That is, the process of corner position refinement stops either after certain number of iteration or when a required accuracy is achieved. The criteria may specify either of or both the maximum number of iteration and the required accuracy. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindDominantPoints(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,OpenCvSharp.DominantsFlag,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds high-curvature points of the contour
            </summary>
            <param name="contour">pointer to input contour object.</param>
            <param name="storage">memory storage</param>
            <param name="method"></param>
            <param name="parameter1">for IPAN algorithm - minimal distance</param>
            <param name="parameter2">for IPAN algorithm - maximal distance</param>
            <param name="parameter3">for IPAN algorithm - neighborhood distance (must be not greater than dmaximal distance)</param>
            <param name="parameter4">for IPAN algorithm - maximal possible angle of curvature</param>
            <returns>array of dominant points indices</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds extrinsic camera parameters for particular view
            </summary>
            <param name="object_points">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="image_points">The array of corresponding image points, 2xN or Nx2, where N is the number of points in the view. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is NULL, all distortion coefficients are considered 0's. </param>
            <param name="rotation_vector">The output 3x1 or 1x3 rotation vector (compact representation of a rotation matrix, see cvRodrigues2). </param>
            <param name="translation_vector">The output 3x1 or 1x3 translation vector. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Finds extrinsic camera parameters for particular view
            </summary>
            <param name="object_points">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="image_points">The array of corresponding image points, 2xN or Nx2, where N is the number of points in the view. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is NULL, all distortion coefficients are considered 0's. </param>
            <param name="rotation_vector">The output 3x1 or 1x3 rotation vector (compact representation of a rotation matrix, see cvRodrigues2). </param>
            <param name="translation_vector">The output 3x1 or 1x3 translation vector. </param>
            <param name="use_extrinsic_guess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds extrinsic camera parameters for particular view
            </summary>
            <param name="objectPoints">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="imagePoints">The array of corresponding image points, 2xN or Nx2, where N is the number of points in the view. </param>
            <param name="cameraMatrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distCoeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is NULL, all distortion coefficients are considered 0's. </param>
            <param name="rvec">The output 3x1 or 1x3 rotation vector (compact representation of a rotation matrix, see cvRodrigues2). </param>
            <param name="tvec">The output 3x1 or 1x3 translation vector. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Finds extrinsic camera parameters for particular view
            </summary>
            <param name="objectPoints">The array of object points, 3xN or Nx3, where N is the number of points in the view. </param>
            <param name="imagePoints">The array of corresponding image points, 2xN or Nx2, where N is the number of points in the view. </param>
            <param name="cameraMatrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distCoeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. If it is NULL, all distortion coefficients are considered 0's. </param>
            <param name="rvec">The output 3x1 or 1x3 rotation vector (compact representation of a rotation matrix, see cvRodrigues2). </param>
            <param name="tvec">The output 3x1 or 1x3 translation vector. </param>
            <param name="useExtrinsicGuess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.UndistortPoints_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="_src"></param>
            <param name="_dst"></param>
            <param name="_cameraMatrix"></param>
            <param name="_distCoeffs"></param>
            <param name="matR"></param>
            <param name="matP"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="objectPoints"></param>
            <param name="imagePoints"></param>
            <param name="__H"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2_(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFace(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="tr">pointer to kd-tree index of reference vectors. </param>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="tr">pointer to kd-tree index of reference vectors. </param>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
            <param name="k">The number of neighbors to find. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="tr">pointer to kd-tree index of reference vectors. </param>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
            <param name="k">The number of neighbors to find. </param>
            <param name="emax">The maximum number of leaves to visit. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeaturesBoxed(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Performs orthogonal range seaching on the given kd-tree.
            </summary>
            <param name="tr">Pointer to kd-tree index of reference vectors. </param>
            <param name="bounds_min">1 x d or d x 1 vector (CV_32FC1 or CV_64FC1) giving minimum value for each dimension. </param>
            <param name="bounds_max">1 x d or d x 1 vector (CV_32FC1 or CV_64FC1) giving maximum value for each dimension. </param>
            <param name="result">1 x m or m x 1 vector (CV_32SC1) to contain output row indices (referring to matrix passed to cvCreateFeatureTree). </param>
            <returns>the number of such vectors found. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Calculates fundamental matrix from corresponding points in two images
            </summary>
            <param name="points1">Array of the first image points of 2xN, Nx2, 3xN or Nx3 size (where N is number of points). Multi-channel 1xN or Nx1 array is also acceptable. The point coordinates should be floating-point (single or double precision) </param>
            <param name="points2">Array of the second image points of the same size and format as points1</param>
            <param name="fundamental_matrix">The output fundamental matrix or matrices. The size should be 3x3 or 9x3 (7-point method may return up to 3 matrices). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod)">
            <summary>
            Calculates fundamental matrix from corresponding points in two images
            </summary>
            <param name="points1">Array of the first image points of 2xN, Nx2, 3xN or Nx3 size (where N is number of points). Multi-channel 1xN or Nx1 array is also acceptable. The point coordinates should be floating-point (single or double precision) </param>
            <param name="points2">Array of the second image points of the same size and format as points1</param>
            <param name="fundamental_matrix">The output fundamental matrix or matrices. The size should be 3x3 or 9x3 (7-point method may return up to 3 matrices). </param>
            <param name="method">Method for computing the fundamental matrix </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod,System.Double,System.Double)">
            <summary>
            Calculates fundamental matrix from corresponding points in two images
            </summary>
            <param name="points1">Array of the first image points of 2xN, Nx2, 3xN or Nx3 size (where N is number of points). Multi-channel 1xN or Nx1 array is also acceptable. The point coordinates should be floating-point (single or double precision) </param>
            <param name="points2">Array of the second image points of the same size and format as points1</param>
            <param name="fundamental_matrix">The output fundamental matrix or matrices. The size should be 3x3 or 9x3 (7-point method may return up to 3 matrices). </param>
            <param name="method">Method for computing the fundamental matrix </param>
            <param name="param1">The parameter is used for RANSAC method only. It is the maximum distance from point to epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. Usually it is set somewhere from 1 to 3. </param>
            <param name="param2">The parameter is used for RANSAC or LMedS methods only. It denotes the desirable level of confidence of the fundamental matrix estimate. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod,System.Double,System.Double,OpenCvSharp.CvMat)">
            <summary>
            Calculates fundamental matrix from corresponding points in two images
            </summary>
            <param name="points1">Array of the first image points of 2xN, Nx2, 3xN or Nx3 size (where N is number of points). Multi-channel 1xN or Nx1 array is also acceptable. The point coordinates should be floating-point (single or double precision) </param>
            <param name="points2">Array of the second image points of the same size and format as points1</param>
            <param name="fundamental_matrix">The output fundamental matrix or matrices. The size should be 3x3 or 9x3 (7-point method may return up to 3 matrices). </param>
            <param name="method">Method for computing the fundamental matrix </param>
            <param name="param1">The parameter is used for RANSAC method only. It is the maximum distance from point to epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. Usually it is set somewhere from 1 to 3. </param>
            <param name="param2">The parameter is used for RANSAC or LMedS methods only. It denotes the desirable level of confidence of the fundamental matrix estimate. </param>
            <param name="status">The optional output array of N elements, every element of which is set to 0 for outliers and to 1 for the "inliers", i.e. points that comply well with the estimated epipolar geometry. The array is computed only in RANSAC and LMedS methods. For other methods it is set to all 1’s. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindGraphEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphFindEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindGraphEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphFindEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds perspective transformation between two planes
            </summary>
            <param name="src_points">Point coordinates in the original plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates), where N is the number of points. </param>
            <param name="dst_points">Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates) </param>
            <param name="homography">Output 3x3 homography matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod)">
            <summary>
            Finds perspective transformation between two planes
            </summary>
            <param name="src_points">Point coordinates in the original plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates), where N is the number of points. </param>
            <param name="dst_points">Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates) </param>
            <param name="homography">Output 3x3 homography matrix. </param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod,System.Double)">
            <summary>
            Finds perspective transformation between two planes
            </summary>
            <param name="src_points">Point coordinates in the original plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates), where N is the number of points. </param>
            <param name="dst_points">Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates) </param>
            <param name="homography">Output 3x3 homography matrix. </param>
            <param name="method"></param>
            <param name="ransacReprojThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod,System.Double,OpenCvSharp.CvMat)">
            <summary>
            Finds perspective transformation between two planes
            </summary>
            <param name="src_points">Point coordinates in the original plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates), where N is the number of points. </param>
            <param name="dst_points">Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 array (the latter two are for representation in homogenious coordinates) </param>
            <param name="homography">Output 3x3 homography matrix. </param>
            <param name="method"></param>
            <param name="ransacReprojThreshold"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindNearestPoint2D(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Finds the closest subdivision vertex to given point
            </summary>
            <param name="subdiv">Delaunay or another subdivision. </param>
            <param name="pt">Input point. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindNextContour(OpenCvSharp.CvContourScanner)">
            <summary>
            Finds next contour in the image
            </summary>
            <param name="scanner">Contour scanner initialized by The function cvStartFindContours </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DisparityMode,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Calculates disparity for stereo-pair
            </summary>
            <param name="leftImage">Left image of stereo pair, rectified grayscale 8-bit image </param>
            <param name="rightImage">Right image of stereo pair, rectified grayscale 8-bit image </param>
            <param name="mode">Algorithm used to find a disparity (now only CV_DISPARITY_BIRCHFIELD is supported) </param>
            <param name="depthImage">Destination depth image, grayscale 8-bit image that codes the scaled disparity, so that the zero disparity (corresponding to the points that are very far from the cameras) maps to 0, maximum disparity maps to 255. </param>
            <param name="maxDisparity">Maximum possible disparity. The closer the objects to the cameras, the larger value should be specified here. Too big values slow down the process significantly. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DisparityMode,OpenCvSharp.CvArr,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates disparity for stereo-pair
            </summary>
            <param name="leftImage">Left image of stereo pair, rectified grayscale 8-bit image </param>
            <param name="rightImage">Right image of stereo pair, rectified grayscale 8-bit image </param>
            <param name="mode">Algorithm used to find a disparity (now only CV_DISPARITY_BIRCHFIELD is supported) </param>
            <param name="depthImage">Destination depth image, grayscale 8-bit image that codes the scaled disparity, so that the zero disparity (corresponding to the points that are very far from the cameras) maps to 0, maximum disparity maps to 255. </param>
            <param name="maxDisparity">Maximum possible disparity. The closer the objects to the cameras, the larger value should be specified here. Too big values slow down the process significantly. </param>
            <param name="param1">Constant occlusion penalty, default=25</param>
            <param name="param2">Constant match reward, default=5</param>
            <param name="param3">Defines a highly reliable region (set of contiguous pixels whose reliability is at least param3), default=12</param>
            <param name="param4">Defines a moderately reliable region, default=15</param>
            <param name="param5">Defines a slightly reliable region, default=25</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceBM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoBMState)">
            <summary>
            Computes the disparity map using block matching algorithm
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="disparity">The output single-channel 16-bit signed disparity map of the same size as input images. Its elements will be the computed disparities, multiplied by 16 and rounded to integer's. </param>
            <param name="state">Stereo correspondence structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceGC(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoGCState)">
            <summary>
            Computes the disparity map using graph cut-based algorithm
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="dispLeft">The optional output single-channel 16-bit signed left disparity map of the same size as input images. </param>
            <param name="dispRight">The optional output single-channel 16-bit signed right disparity map of the same size as input images. </param>
            <param name="state">Stereo correspondence structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceGC(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoGCState,System.Boolean)">
            <summary>
            Computes the disparity map using graph cut-based algorithm
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="dispLeft">The optional output single-channel 16-bit signed left disparity map of the same size as input images. </param>
            <param name="dispRight">The optional output single-channel 16-bit signed right disparity map of the same size as input images. </param>
            <param name="state">Stereo correspondence structure. </param>
            <param name="useDisparityGuess">If the parameter is not zero, the algorithm will start with pre-defined disparity maps. Both dispLeft and dispRight should be valid disparity maps. Otherwise, the function starts with blank disparity maps (all pixels are marked as occlusions). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindType(System.String)">
            <summary>
            Finds type by its name
            </summary>
            <param name="type_name">Type name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FirstType">
            <summary>
            Returns the beginning of type list
            </summary>
            <returns>the first type of the list of registered types. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitEllipse2(OpenCvSharp.CvArr)">
            <summary>
            Fits ellipse to set of 2D points
            </summary>
            <param name="points">Contour scanner. </param>
            <returns>ellipse that fits best (in least-squares sense) to a set of 2D points.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitLine(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            Fits line to 2D or 3D point set
            </summary>
            <param name="points">Sequence or array of 2D or 3D points with 32-bit integer or floating-point coordinates. </param>
            <param name="dist_type">The distance used for fitting (see the discussion). </param>
            <param name="param">Numerical parameter (C) for some types of distances, if 0 then some optimal value is chosen. </param>
            <param name="reps">Sufficient accuracy for radius (distance between the coordinate origin and the line) and angle, respectively, 0.01 would be a good defaults for both. </param>
            <param name="aeps">Sufficient accuracy for radius (distance between the coordinate origin and the line) and angle, respectively, 0.01 would be a good defaults for both. </param>
            <param name="line">The output line parameters. In case of 2d fitting it is array of 4 floats (vx, vy, x0, y0) where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is some point on the line. In case of 3D fitting it is array of 6 floats (vx, vy, vz, x0, y0, z0) where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is some point on the line. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
            <param name="src">Source array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
            <param name="flip_mode">Specifies how to flip the array.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
            <param name="src">Source array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
            <param name="flip_mode">Specifies how to flip the array.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,System.Int32)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
            <param name="flags">The operation flags. Lower bits contain connectivity value, 4 (by default) or 8, used within the function. Connectivity determines which neighbors of a pixel are considered. Upper bits can be 0 or combination of the flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,System.Int32,OpenCvSharp.CvArr)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="image">Input 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless CV_FLOODFILL_MASK_ONLY flag is set. </param>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
            <param name="flags">The operation flags. Lower bits contain connectivity value, 4 (by default) or 8, used within the function. Connectivity determines which neighbors of a pixel are considered. Upper bits can be 0 or combination of the flags</param>
            <param name="mask">Operation mask</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Floor(System.Double)">
            <summary>
            Returns the maximum integer value that is not larger than the argument. 
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FlushSeqWriter(OpenCvSharp.CvSeqWriter)">
            <summary>
            Updates sequence headers from the writer state
            </summary>
            <param name="writer">Writer state </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
            <param name="style">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle,System.Int32)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
            <param name="style">The operation flags</param>
            <param name="spacing">Spacing between characters. Can be negative or positive.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Free(System.IntPtr@)">
            <summary>
            Deallocates memory buffer
            </summary>
            <param name="ptr">Double pointer to released buffer. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ValidateDisparity(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="disparity"></param>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ValidateDisparity(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="disparity"></param>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="disp12MaxDiff"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenDecomposite(OpenCvSharp.IplImage,OpenCvSharp.IplImage[],OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates all of the decomposition coefficients for an input object. (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="obj">Input object.</param>
            <param name="eigInput">Pointer to the array of IplImage input objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="coeffs">Calculated coefficients; an output parameter.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenDecomposite(OpenCvSharp.IplImage,System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.IntPtr,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates all of the decomposition coefficients for an input object.
            </summary>
            <param name="obj">Input object.</param>
            <param name="eigenvec_count">Number of eigen objects.</param>
            <param name="eigInput">ointer to the read callback function.</param>
            <param name="ioFlags">Input/output flags.</param>
            <param name="userData">Pointer to the structure that contains all of the necessary data for the callback functions.</param>
            <param name="avg">Averaged object.</param>
            <param name="coeffs">Calculated coefficients; an output parameter.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenProjection(OpenCvSharp.IplImage[],System.Int32,System.Single[],OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Calculates the object projection into the eigen sub-space. (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="input_vecs">Pointer to an array of IplImage input objects.</param>
            <param name="eigenvec_count">Number of eigenvectors.</param>
            <param name="coeffs">Previously calculated decomposition coefficients.</param>
            <param name="avg">Average vector</param>
            <param name="proj">Projection to the eigen sub-space.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenProjection(OpenCvSharp.CvCallback,System.Int32,OpenCvSharp.EigenObjectsIOFlag,System.IntPtr,System.Single[],OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Calculates the object projection into the eigen sub-space.
            </summary>
            <param name="input_vecs">Pointer to to a callback function, depending on io_flags.</param>
            <param name="eigenvec_count">Number of eigenvectors.</param>
            <param name="io_flags">Input/output flags</param>
            <param name="userdata">Pointer to the structure that contains all of the necessary data for the callback functions.</param>
            <param name="coeffs">Previously calculated decomposition coefficients.</param>
            <param name="avg">Average vector</param>
            <param name="proj">Projection to the eigen sub-space.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="mat">The input symmetric square matrix. It is modified during the processing. </param>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="mat">The input symmetric square matrix. It is modified during the processing. </param>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
            <param name="eps">Accuracy of diagonalization (typically, DBL_EPSILON=≈10-15 is enough). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="mat">The input symmetric square matrix. It is modified during the processing. </param>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
            <param name="eps">Accuracy of diagonalization (typically, DBL_EPSILON=≈10-15 is enough). </param>
            <param name="lowindex">Optional index of largest eigenvalue/-vector to calculate.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32,System.Int32)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="mat">The input symmetric square matrix. It is modified during the processing. </param>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
            <param name="eps">Accuracy of diagonalization (typically, DBL_EPSILON=≈10-15 is enough). </param>
            <param name="lowindex">Optional index of largest eigenvalue/-vector to calculate.</param>
            <param name="highindex">Optional index of smallest eigenvalue/-vector to calculate.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
            <param name="line_type">Type of the ellipse boundary</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
            <param name="line_type">Type of the ellipse boundary</param>
            <param name="shift">Number of fractional bits in the box vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse2Poly(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            Approximates elliptic arc with polyline
            </summary>
            <param name="center">Center of the arc. </param>
            <param name="axes">Half-sizes of the arc. See cvEllipse. </param>
            <param name="angle">Rotation angle of the ellipse in degrees. See cvEllipse. </param>
            <param name="arc_start">Starting angle of the elliptic arc. </param>
            <param name="arc_end">Ending angle of the elliptic arc. </param>
            <param name="pts">The array of points, filled by the function. </param>
            <param name="delta">Angle between the subsequent polyline vertices, approximation accuracy. So, the total number of output points will ceil((end_angle - start_angle)/delta) + 1 at max. </param>
            <returns>The function cvEllipse2Poly computes vertices of the polyline that approximates the specified elliptic arc. It is used by cvEllipse. It returns the numbers of output points.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EncodeImage(System.String,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Encode image and store the result as a byte vector (single-row 8uC1 matrix)
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="image">The image to be written</param>
            <param name="prms">The format-specific parameters</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EncodeImage(System.String,OpenCvSharp.CvArr,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Encode image and store the result as a byte vector (single-row 8uC1 matrix)
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="image">The image to be written</param>
            <param name="prms">The format-specific parameters</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndFindContours(OpenCvSharp.CvContourScanner)">
            <summary>
            Finishes scanning process
            </summary>
            <param name="scanner">Contour scanner. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndWriteSeq(OpenCvSharp.CvSeqWriter)">
            <summary>
            Finishes process of writing sequence
            </summary>
            <param name="writer">Writer state </param>
            <returns>the pointer to the written sequence.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndWriteStruct(OpenCvSharp.CvFileStorage)">
            <summary>
            Ends writing a structure
            </summary>
            <param name="fs">File storage. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.EqualizeHist(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Equalizes histogram of grayscale image.
            </summary>
            <param name="src">The input 8-bit single-channel image. </param>
            <param name="dst">The output image of the same size and the same data type as src. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
            <param name="iterations">Number of times erosion is applied. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Error(OpenCvSharp.CvStatus,System.String,System.String,System.String,System.Int32)">
            <summary>
            Raises an error
            </summary>
            <param name="status">The error status.</param>
            <param name="func_name">Name of the function where the error occurred. </param>
            <param name="err_msg">Additional information/diagnostics about the error. </param>
            <param name="file_name">Name of the file where the error occurred. </param>
            <param name="line">Line number, where the error occurred. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ErrorStr(OpenCvSharp.CvStatus)">
            <summary>
            Returns textual description of error status code
            </summary>
            <param name="status">The error status. </param>
            <returns>The textual description for the specified error status code.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EstimateRigidTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Estimate rigid transformation between 2 images or 2 point sets
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="M"></param>
            <param name="full_affine"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Exp(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates exponent of every array element
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array, it should have double type or the same type as the source. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractMSER(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvContour[]@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvMSERParams)">
            <summary>
            Extracts the contours of Maximally Stable Extremal Regions
            </summary>
            <param name="img"></param>
            <param name="mask"></param>
            <param name="contours"></param>
            <param name="storage"></param>
            <param name="params"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.Single}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams)">
            <summary>
            Extracts Speeded Up Robust Features from image
            </summary>
            <param name="image">The input 8-bit grayscale image. </param>
            <param name="mask">The optional input 8-bit mask. The features are only found in the areas that contain more than 50% of non-zero mask pixels. </param>
            <param name="keypoints">The output parameter; double pointer to the sequence of keypoints. This will be the sequence of CvSURFPoint structures.</param>
            <param name="descriptors">The optional output parameter; double pointer to the sequence of descriptors; Depending on the params.extended value, each element of the sequence will be either 64-element or 128-element floating-point (CV_32F) vector. If the parameter is null, the descriptors are not computed. </param>
            <param name="storage">Memory storage where keypoints and descriptors will be stored. </param>
            <param name="param">Various algorithm parameters put to the structure CvSURFParams</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.Single}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams,System.Boolean)">
            <summary>
            Extracts Speeded Up Robust Features from image
            </summary>
            <param name="image">The input 8-bit grayscale image. </param>
            <param name="mask">The optional input 8-bit mask. The features are only found in the areas that contain more than 50% of non-zero mask pixels. </param>
            <param name="keypoints">The output parameter; double pointer to the sequence of keypoints. This will be the sequence of CvSURFPoint structures.</param>
            <param name="descriptors">The optional output parameter; double pointer to the sequence of descriptors; Depending on the params.extended value, each element of the sequence will be either 64-element or 128-element floating-point (CV_32F) vector. If the parameter is null, the descriptors are not computed. </param>
            <param name="storage">Memory storage where keypoints and descriptors will be stored. </param>
            <param name="param">Various algorithm parameters put to the structure CvSURFParams</param>
            <param name="useProvidedKeyPts">If useProvidedKeyPts!=0, keypoints are not detected, but descriptors are computed at the locations provided in keypoints (a CvSeq of CvSURFPoint).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecRefData(OpenCvSharp.CvArr)">
            <summary>
            Decrements array data reference counter．
            </summary>
            <param name="arr">Input array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Det(OpenCvSharp.CvArr)">
            <summary>
            Returns determinant of matrix
            </summary>
            <param name="mat">The source matrix. </param>
            <returns>determinant of the square matrix mat</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DCT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DCTFlag)">
            <summary>
            Performs forward or inverse Discrete Cosine transform of 1D or 2D floating-point array
            </summary>
            <param name="src">Source array, real 1D or 2D array. </param>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecodeImage(OpenCvSharp.CvMat,OpenCvSharp.LoadMode)">
            <summary>
            Decode image stored in the buffer
            </summary>
            <param name="buf">The input array of vector of bytes</param>
            <param name="iscolor">Specifies color type of the loaded image</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DecodeImageM(OpenCvSharp.CvMat,OpenCvSharp.LoadMode)">
            <summary>
            Decode image stored in the buffer
            </summary>
            <param name="buf">The input array of vector of bytes</param>
            <param name="iscolor">Specifies color type of the loaded image</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="projMatr">The 3x4 input projection matrix P</param>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="projMatr">The 3x4 input projection matrix P</param>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
            <param name="rotMatrX">Optional 3x3 rotation matrix around x-axis</param>
            <param name="rotMatrY">Optional 3x3 rotation matrix around y-axis</param>
            <param name="rotMatrZ">Optional 3x3 rotation matrix around z-axis</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="projMatr">The 3x4 input projection matrix P</param>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
            <param name="rotMatrX">Optional 3x3 rotation matrix around x-axis</param>
            <param name="rotMatrY">Optional 3x3 rotation matrix around y-axis</param>
            <param name="rotMatrZ">Optional 3x3 rotation matrix around z-axis</param>
            <param name="eulerAngles">Optional 3 points containing the three Euler angles of rotation</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DeleteMoire(OpenCvSharp.IplImage)">
            <summary>
            Deletes moire in given image
            </summary>
            <param name="img">Image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DestroyAllWindows">
            <summary>
            Destroys all the opened HighGUI windows. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.DestroyWindow(System.String)">
            <summary>
            Destroys the window with a given name. 
            </summary>
            <param name="name">Name of the window to be destroyed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="src">Source array, real or complex. </param>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="src">Source array, real or complex. </param>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
            <param name="nonzero_rows">Number of nonzero rows to in the source array (in case of forward 2d transform), or a number of rows of interest in the destination array (in case of inverse 2d transform). If the value is negative, zero, or greater than the total number of rows, it is ignored. The parameter can be used to speed up 2d convolution/correlation when computing them via DFT.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="src">Source array, real or complex. </param>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="src">Source array, real or complex. </param>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
            <param name="nonzero_rows">Number of nonzero rows to in the source array (in case of forward 2d transform), or a number of rows of interest in the destination array (in case of inverse 2d transform). If the value is negative, zero, or greater than the total number of rows, it is ignored. The parameter can be used to speed up 2d convolution/correlation when computing them via DFT.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
            <param name="iterations">Number of times erosion is applied. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DisplayOverlay(System.String,System.String,System.Int32)">
            <summary>
            Display text on the window's image as an overlay for delay milliseconds. This is not editing the image's data. The text is display on the top of the image.
            </summary>
            <param name="name">Name of the window</param>
            <param name="text">Overlay text to write on the window’s image</param>
            <param name="delayms">Delay to display the overlay text. If this function is called before the previous overlay text time out, the timer is restarted and the text updated. . If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DisplayStatusBar(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name">Name of the window</param>
            <param name="text">Text to write on the window’s statusbar</param>
            <param name="delayms">Delay to display the text. If this function is called before the previous text time out, the timer is restarted and the text updated. If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="src">Source 8-bit single-channel (binary) image. </param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="src">Source 8-bit single-channel (binary) image. </param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="src">Source 8-bit single-channel (binary) image. </param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[])">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="src">Source 8-bit single-channel (binary) image. </param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
            <param name="mask">User-defined mask in case of user-defined distance, it consists of 2 numbers (horizontal/vertical shift cost, diagonal shift cost) in case of 3x3 mask and 3 numbers (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in case of 5x5 mask. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[],OpenCvSharp.CvArr)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="src">Source 8-bit single-channel (binary) image. </param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
            <param name="mask">User-defined mask in case of user-defined distance, it consists of 2 numbers (horizontal/vertical shift cost, diagonal shift cost) in case of 3x3 mask and 3 numbers (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in case of 5x5 mask. </param>
            <param name="labels">The optional output 2d array of labels of integer type and the same size as src and dst, can now be used only with mask_size==3 or 5. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element division of two arrays
            </summary>
            <param name="src1">The first source array. If the pointer is NULL, the array is assumed to be all 1’s. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Performs per-element division of two arrays
            </summary>
            <param name="src1">The first source array. If the pointer is NULL, the array is assumed to be all 1’s. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="scale">Optional scale factor </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DotProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates dot product of two arrays in Euclidean metrics
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[],System.Boolean)">
            <summary>
            Draws the individual chessboard corners detected (as red circles) in case if the board was not found (pattern_was_found=0) or the colored corners connected with lines when the board was found (pattern_was_found≠0). 
            </summary>
            <param name="image">The destination image; it must be 8-bit color image. </param>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The array of corners detected. </param>
            <param name="pattern_was_found">Indicates whether the complete board was found (≠0) or not (=0). One may just pass the return value cvFindChessboardCorners here. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="img">Image where the contours are to be drawn. Like in any other drawing function, the contours are clipped with the ROI. </param>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="img">Image where the contours are to be drawn. Like in any other drawing function, the contours are clipped with the ROI. </param>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="img">Image where the contours are to be drawn. Like in any other drawing function, the contours are clipped with the ROI. </param>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
            <param name="line_type">Type of the contour segments.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CvPoint)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="img">Image where the contours are to be drawn. Like in any other drawing function, the contours are clipped with the ROI. </param>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
            <param name="line_type">Type of the contour segments.</param>
            <param name="offset">Shift all the point coordinates by the specified value. It is useful in case if the contours retrieved in some image ROI and then the ROI offset needs to be taken into account during the rendering. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Transforms image to compensate lens distortion.
            </summary>
            <param name="src">The input (distorted) image. </param>
            <param name="dst">The output (corrected) image. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Transforms image to compensate lens distortion.
            </summary>
            <param name="src">The input (distorted) image. </param>
            <param name="dst">The output (corrected) image. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. </param>
            <param name="new_camera_matrix"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.UndistortPoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes the ideal point coordinates from the observed point coordinates
            </summary>
            <param name="src">The observed point coordinates. </param>
            <param name="dst">The ideal point coordinates, after undistortion and reverse perspective transformation. </param>
            <param name="camera_matrix">The camera matrix A=[fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="dist_coeffs">The vector of distortion coefficients, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="R">The rectification transformation in object space (3x3 matrix). R1 or R2, computed by cvStereoRectify can be passed here. If the parameter is null, the identity matrix is used. </param>
            <param name="P">The new camera matrix (3x3) or the new projection matrix (3x4). P1 or P2, computed by cvStereoRectify can be passed here. If the parameter is null, the identity matrix is used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.UnregisterType(System.String)">
            <summary>
            Unregisters the type
            </summary>
            <param name="type_name">Name of the unregistered type. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.UpdateMotionHistory(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Updates motion history image by moving silhouette
            </summary>
            <param name="silhouette">Silhouette mask that has non-zero pixels where the motion occurs. </param>
            <param name="mhi">Motion history image, that is updated by the function (single-channel, 32-bit floating-point)  </param>
            <param name="timestamp">Current time in milliseconds or other units.  </param>
            <param name="duration">Maximal duration of motion track in the same units as timestamp.  </param>
        </member>
        <member name="M:OpenCvSharp.Cv.UseOptimized(System.Boolean)">
            <summary>
            Switches between optimized/non-optimized modes
            </summary>
            <param name="on_off">Use optimized (true) or not (false). </param>
            <returns>the number of optimized functions loaded</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ToPtr(OpenCvSharp.ICvPtrHolder)">
            <summary>
            引数がnullの時はIntPtr.Zeroに変換する
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.Cv.WHOLE_SEQ">
            <summary>
            CV_WHOLE_SEQ
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_CNS_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_DEPTHS_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_SIZES_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1"></param>
            <param name="mat2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ELEM_SIZE1(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ELEM_SIZE(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.String)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="fourcc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_IMAGE_HDR(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_IMAGE(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(OpenCvSharp.CvGraphEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(OpenCvSharp.CvGraphVtx)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT_HDR(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(OpenCvSharp.CvSetElem)">
            <summary>
            
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAKETYPE(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="depth"></param>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_CN(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_DEPTH(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_ELEM_PTR_FAST(OpenCvSharp.CvMat,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="pix_size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_ELEM_PTR(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CV_MAT_ELEM``1(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_TYPE(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NEXT_LINE_POINT(OpenCvSharp.CvLineIterator)">
            <summary>
            
            </summary>
            <param name="line_iterator"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.NEXT_SEQ_ELEM(System.Int32,OpenCvSharp.CvSeqReader)">
            <summary>
            
            </summary>
            <param name="elem_size"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IDX(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_IDX
            </summary>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_VAL``1(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_VAL(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_TYPE(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_INT(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_REAL(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_STRING(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_SEQ(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_MAP(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_COLLECTION(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_FLOW(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_EMPTY(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_USER(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_HAS_NAME(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PREV_SEQ_ELEM(System.Int32,OpenCvSharp.CvSeqReader)">
            <summary>
            
            </summary>
            <param name="elem_size"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.READ_SEQ_ELEM``1(``0@,OpenCvSharp.CvSeqReader)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.REV_READ_SEQ_ELEM``1(``0@,OpenCvSharp.CvSeqReader)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a color value
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SUBDIV2D_NEXT_EDGE(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SWAP(System.Object@,System.Object@,System.Object@)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SWAP``1(``0@,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM_VAR(System.IntPtr,OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <param name="elem_ptr"></param>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM``1(``0,OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM``1(``0,OpenCvSharp.CvSeqWriter{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.TermCriteria(OpenCvSharp.CriteriaType,System.Int32,System.Double)">
            <summary>
            Creates termination criteria for iterative algorithms.
            </summary>
            <param name="type">A combination of Iteration and Epsilon</param>
            <param name="max_iter">Maximum number of iterations</param>
            <param name="epsilon">Required accuracy</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ThreshHist(OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            Clears histogram bins that are below the specified threshold.
            </summary>
            <param name="hist">Reference to the histogram. </param>
            <param name="threshold">Threshold level. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Threshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            Applies fixed-level threshold to array elements.
            </summary>
            <param name="src">Source array (single-channel, 8-bit of 32-bit floating point). </param>
            <param name="dst">Destination array; must be either the same type as src or 8-bit. </param>
            <param name="threshold">Threshold value. </param>
            <param name="max_value">Maximum value to use with CV_THRESH_BINARY and CV_THRESH_BINARY_INV thresholding types. </param>
            <param name="threshold_type">Thresholding type.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Trace(OpenCvSharp.CvArr)">
            <summary>
            Returns trace of matrix
            </summary>
            <param name="mat">The source matrix. </param>
            <returns>sum of diagonal elements of the matrix src1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TrackFace(OpenCvSharp.CvFaceTracker,OpenCvSharp.IplImage,OpenCvSharp.CvRect[],OpenCvSharp.CvPoint@,System.Double@)">
            <summary>
            
            </summary>
            <param name="pFaceTracker"></param>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <param name="ptRotate"></param>
            <param name="dbAngleRotate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Transform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Performs matrix transform of every array element
            </summary>
            <param name="src">The first source array. </param>
            <param name="dst">The destination array. </param>
            <param name="transmat">Transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Transform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Performs matrix transform of every array element
            </summary>
            <param name="src">The first source array. </param>
            <param name="dst">The destination array. </param>
            <param name="transmat">Transformation matrix. </param>
            <param name="shiftvec">Optional shift vector. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Performs matrix transform of every array element
            </summary>
            <param name="src">The first source array. </param>
            <param name="dst">The destination array. </param>
            <param name="transmat">Transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Performs matrix transform of every array element
            </summary>
            <param name="src">The first source array. </param>
            <param name="dst">The destination array. </param>
            <param name="transmat">Transformation matrix. </param>
            <param name="shiftvec">Optional shift vector. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Transpose(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Transposes matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.T(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Transposes matrix
            </summary>
            <param name="src">The source matrix. </param>
            <param name="dst">The destination matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.TreeToNodeSeq``1(OpenCvSharp.CvTreeNode{``0},System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Gathers all node pointers to the single sequence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The initial tree node. </param>
            <param name="header_size">Header size of the created sequence (sizeof(CvSeq) is the most used value). </param>
            <param name="storage">Container for the sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TriangulatePoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="projMatr1"></param>
            <param name="projMatr2"></param>
            <param name="projPoints1"></param>
            <param name="projPoints2"></param>
            <param name="points4D"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.TypeOf(System.IntPtr)">
            <summary>
            Returns type of the object
            </summary>
            <param name="struct_ptr">The object pointer. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TypeOf(OpenCvSharp.ICvPtrHolder)">
            <summary>
            Returns type of the object
            </summary>
            <param name="struct_ptr">The OpenCV object. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcAffineFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,System.Single[]@,System.Int32,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,System.Single[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
            Modification of a previous sparse optical flow algorithm to calculate affine flow
            </summary>
            <param name="prev"></param>
            <param name="curr"></param>
            <param name="prev_pyr"></param>
            <param name="curr_pyr"></param>
            <param name="prev_features"></param>
            <param name="curr_features"></param>
            <param name="matrices"></param>
            <param name="count"></param>
            <param name="win_size"></param>
            <param name="level"></param>
            <param name="status"></param>
            <param name="track_error"></param>
            <param name="criteria"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
            <param name="hist">Reference to the histogram.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
            <param name="hist">Reference to the histogram.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
            <param name="hist">Reference to the histogram.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
            <param name="hist">Reference to the histogram.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
            <param name="hist">Reference to the histogram.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
            <param name="hist">Reference to the histogram. </param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProject(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            Calculates back projection
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="back_project">Destination back projection image of the same type as the source images. </param>
            <param name="hist">Histogram. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProject(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            Calculates back projection
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="back_project">Destination back projection image of the same type as the source images. </param>
            <param name="hist">Histogram. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="hist">Histogram. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="hist">Histogram. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <param name="factor">Normalization factor for histograms, will affect normalization scale of destination image, pass 1. if unsure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProjectPatch(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="hist">Histogram. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProjectPatch(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="hist">Histogram. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <param name="factor">Normalization factor for histograms, will affect normalization scale of destination image, pass 1. if unsure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBayesianProb(OpenCvSharp.CvHistogram[],OpenCvSharp.CvHistogram[])">
            <summary>
            Calculates bayesian probabilistic histograms
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrix(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CovarMatrixFlag)">
            <summary>
            Calculates covariation matrix of the set of vectors
            </summary>
            <param name="vects">The input vectors. They all must have the same type and the same size. The vectors do not have to be 1D, they can be 2D (e.g. images) etc. </param>
            <param name="cov_mat">The output covariation matrix that should be floating-point and square. </param>
            <param name="avg">The input or output (depending on the flags) array - the mean (average) vector of the input vectors. </param>
            <param name="flags">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrixEx(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.Int32,System.Byte[],System.IntPtr,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the covariance matrix for a group of input objects.
            </summary>
            <param name="object_count">Number of source objects.</param>
            <param name="input">Pointer to the read callback function.</param>
            <param name="io_flags">Input/output flags.</param>
            <param name="iobuf_size">Input/output buffer size.</param>
            <param name="buffer">Pointer to the input/output buffer.</param>
            <param name="userdata">Pointer to the structure that contains all necessary data for the callback functions.</param>
            <param name="avg">Averaged object.</param>
            <param name="covar_matrix">Covariance matrix. An output parameter; must be allocated before the call.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrixEx(OpenCvSharp.IplImage[],OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the covariance matrix for a group of input objects. (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="input">Array of IplImage input objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="covar_matrix">Covariance matrix. An output parameter; must be allocated before the call.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcDecompCoeff(OpenCvSharp.IplImage,OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Calculates the decomposition coefficient of an input object.
            </summary>
            <param name="obj">Input object.</param>
            <param name="eigObj">Eigen object.</param>
            <param name="avg">Averaged object.</param>
            <returns>decomposition coefficient</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(OpenCvSharp.IplImage[],OpenCvSharp.IplImage[],System.Int32,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the orthonormal eigen basis and the averaged object for group a of input objects. (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="input">Pointer to the array of IplImage input objects.</param>
            <param name="output">Pointer to the array of eigen objects.</param>
            <param name="ioBufSize">Input/output buffer size in bytes. The size is zero if unknown.</param>
            <param name="calcLimit">Criteria that determine when to stop the calculation of eigen objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="eigVals">Pointer to the eigenvalues array in the descending order; may be null.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.IplImage[],OpenCvSharp.CvCallback,System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the orthonormal eigen basis and the averaged object for group a of input objects. (ioFlags = CV_EIGOBJ_OUTPUT_CALLBACK)
            </summary>
            <param name="nObjects">nObjects – Number of source objects.</param>
            <param name="input">Pointer to the array of IplImage input objects.</param>
            <param name="output">Pointer to the write callback function.</param>
            <param name="ioBufSize">Input/output buffer size in bytes. The size is zero if unknown.</param>
            <param name="userData">Pointer to the structure that contains all of the necessary data for the callback functions.</param>
            <param name="calcLimit">Criteria that determine when to stop the calculation of eigen objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="eigVals">Pointer to the eigenvalues array in the descending order; may be null.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.IplImage[],System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the orthonormal eigen basis and the averaged object for group a of input objects. (ioFlags = CV_EIGOBJ_INPUT_CALLBACK)
            </summary>
            <param name="nObjects">nObjects – Number of source objects.</param>
            <param name="input">Pointer to the read callback function.</param>
            <param name="output">Pointer to the array of eigen objects.</param>
            <param name="ioBufSize">Input/output buffer size in bytes. The size is zero if unknown.</param>
            <param name="userData">Pointer to the structure that contains all of the necessary data for the callback functions.</param>
            <param name="calcLimit">Criteria that determine when to stop the calculation of eigen objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="eigVals">Pointer to the eigenvalues array in the descending order; may be null.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            Calculates the orthonormal eigen basis and the averaged object for group a of input objects.
            </summary>
            <param name="nObjects">nObjects – Number of source objects.</param>
            <param name="input">Pointer to the read callback function.</param>
            <param name="output">Pointer to the write callback function.</param>
            <param name="ioFlags">Input/output flags.</param>
            <param name="ioBufSize">Input/output buffer size in bytes. The size is zero if unknown.</param>
            <param name="userData">Pointer to the structure that contains all of the necessary data for the callback functions.</param>
            <param name="calcLimit">Criteria that determine when to stop the calculation of eigen objects.</param>
            <param name="avg">Averaged object.</param>
            <param name="eigVals">Pointer to the eigenvalues array in the descending order; may be null.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            Computes "minimal work" distance between two weighted point configurations.
            </summary>
            <param name="signature1">First signature, size1×dims+1 floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. </param>
            <param name="signature2">Second signature of the same format as signature1, though the number of rows may be different. The total weights may be different, in this case an extra "dummy" point is added to either signature1 or signature2. </param>
            <param name="distance_type">Metrics used</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction)">
            <summary>
            Computes "minimal work" distance between two weighted point configurations.
            </summary>
            <param name="signature1">First signature, size1×dims+1 floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. </param>
            <param name="signature2">Second signature of the same format as signature1, though the number of rows may be different. The total weights may be different, in this case an extra "dummy" point is added to either signature1 or signature2. </param>
            <param name="distance_type">Metrics used</param>
            <param name="distance_func">The user-defined distance function. It takes coordinates of two points and returns the distance between the points. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr)">
            <summary>
            Computes "minimal work" distance between two weighted point configurations.
            </summary>
            <param name="signature1">First signature, size1×dims+1 floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. </param>
            <param name="signature2">Second signature of the same format as signature1, though the number of rows may be different. The total weights may be different, in this case an extra "dummy" point is added to either signature1 or signature2. </param>
            <param name="distance_type">Metrics used</param>
            <param name="distance_func">The user-defined distance function. It takes coordinates of two points and returns the distance between the points. </param>
            <param name="cost_matrix">The user-defined size1×size2 cost matrix. At least one of cost_matrix and distance_func must be NULL. Also, if a cost matrix is used, lower boundary (see below) can not be calculated, because it needs a metric function. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes "minimal work" distance between two weighted point configurations.
            </summary>
            <param name="signature1">First signature, size1×dims+1 floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. </param>
            <param name="signature2">Second signature of the same format as signature1, though the number of rows may be different. The total weights may be different, in this case an extra "dummy" point is added to either signature1 or signature2. </param>
            <param name="distance_type">Metrics used</param>
            <param name="distance_func">The user-defined distance function. It takes coordinates of two points and returns the distance between the points. </param>
            <param name="cost_matrix">The user-defined size1×size2 cost matrix. At least one of cost_matrix and distance_func must be NULL. Also, if a cost matrix is used, lower boundary (see below) can not be calculated, because it needs a metric function. </param>
            <param name="flow">The resultant size1×size2 flow matrix: flowij is a flow from i-th point of signature1 to j-th point of signature2</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Single@)">
            <summary>
            Computes "minimal work" distance between two weighted point configurations.
            </summary>
            <param name="signature1">First signature, size1×dims+1 floating-point matrix. Each row stores the point weight followed by the point coordinates. The matrix is allowed to have a single column (weights only) if the user-defined cost matrix is used. </param>
            <param name="signature2">Second signature of the same format as signature1, though the number of rows may be different. The total weights may be different, in this case an extra "dummy" point is added to either signature1 or signature2. </param>
            <param name="distance_type">Metrics used</param>
            <param name="distance_func">The user-defined distance function. It takes coordinates of two points and returns the distance between the points. </param>
            <param name="cost_matrix">The user-defined size1×size2 cost matrix. At least one of cost_matrix and distance_func must be NULL. Also, if a cost matrix is used, lower boundary (see below) can not be calculated, because it needs a metric function. </param>
            <param name="flow">The resultant size1×size2 flow matrix: flowij is a flow from i-th point of signature1 to j-th point of signature2</param>
            <param name="lower_bound">Optional input/output parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcGlobalOrientation(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Calculates global motion orientation of some selected region
            </summary>
            <param name="orientation">Motion gradient orientation image; calculated by the function cvCalcMotionGradient. </param>
            <param name="mask">Mask image. It may be a conjunction of valid gradient mask, obtained with cvCalcMotionGradient and mask of the region, whose direction needs to be calculated. </param>
            <param name="mhi">Motion history image </param>
            <param name="timestamp">Current time in milliseconds or other units, it is better to store time passed to cvUpdateMotionHistory before and reuse it here, because running cvUpdateMotionHistory and cvCalcMotionGradient on large images may take some time. </param>
            <param name="duration">Maximal duration of motion track in milliseconds, the same as in cvUpdateMotionHistory. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcImageHomography(System.Single[],OpenCvSharp.CvPoint3D32f,System.Single[0:,0:],System.Single[0:,0:]@)">
            <summary>
            Calculates homography matrix for oblong planar object (e.g. arm)
            </summary>
            <param name="line">The main object axis direction (vector (dx,dy,dz)). </param>
            <param name="center">Object center ((cx,cy,cz)). </param>
            <param name="intrinsic">Intrinsic camera parameters (3x3 matrix). </param>
            <param name="homography">Output homography matrix (3x3). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
            <param name="hist">Reference to the histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
            <param name="hist">Reference to the histogram. </param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
            <param name="hist">Reference to the histogram. </param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
            <param name="hist">Reference to the histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
            <param name="hist">Reference to the histogram. </param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
            <param name="hist">Reference to the histogram. </param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMatMulDeriv(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes d(AB)/dA and d(AB)/dB
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="dABdA"></param>
            <param name="dABdB"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMotionGradient(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Calculates gradient orientation of motion history image
            </summary>
            <param name="mhi">Motion history image </param>
            <param name="mask">Mask image; marks pixels where motion gradient data is correct. Output parameter. </param>
            <param name="orientation">Motion gradient orientation image; contains angles from 0 to ~360°. </param>
            <param name="delta1">The function finds minimum (m(x,y)) and maximum (M(x,y)) mhi values over each pixel (x,y) neihborhood and assumes the gradient is valid only if min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="delta2">The function finds minimum (m(x,y)) and maximum (M(x,y)) mhi values over each pixel (x,y) neihborhood and assumes the gradient is valid only if min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMotionGradient(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates gradient orientation of motion history image
            </summary>
            <param name="mhi">Motion history image </param>
            <param name="mask">Mask image; marks pixels where motion gradient data is correct. Output parameter. </param>
            <param name="orientation">Motion gradient orientation image; contains angles from 0 to ~360°. </param>
            <param name="delta1">The function finds minimum (m(x,y)) and maximum (M(x,y)) mhi values over each pixel (x,y) neihborhood and assumes the gradient is valid only if min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="delta2">The function finds minimum (m(x,y)) and maximum (M(x,y)) mhi values over each pixel (x,y) neihborhood and assumes the gradient is valid only if min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="aperture_size">Aperture size of derivative operators used by the function: CV_SCHARR, 1, 3, 5 or 7 (see cvSobel). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowBM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvSize,System.Boolean,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates optical flow for two images by block matching method
            </summary>
            <param name="prev">First image, 8-bit, single-channel. </param>
            <param name="curr">Second image, 8-bit, single-channel. </param>
            <param name="block_size">Size of basic blocks that are compared. </param>
            <param name="shift_size">Block coordinate increments. </param>
            <param name="max_range">Size of the scanned neighborhood in pixels around block. </param>
            <param name="use_previous">Uses previous (input) velocity field. </param>
            <param name="velx">Horizontal component of the optical flow of floor((prev->width - block_size.width)/shiftSize.width) × floor((prev->height - block_size.height)/shiftSize.height) size, 32-bit floating-point, single-channel. </param>
            <param name="vely">Vertical component of the optical flow of the same size velx, 32-bit floating-point, single-channel. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowFarneback(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCvSharp.LKFlowFlag)">
            <summary>
            Estimate optical flow for each pixel using the two-frame G. Farneback algorithm
            </summary>
            <param name="prev"></param>
            <param name="next"></param>
            <param name="flow"></param>
            <param name="pyr_scale"></param>
            <param name="levels"></param>
            <param name="winsize"></param>
            <param name="iterations"></param>
            <param name="poly_n"></param>
            <param name="poly_sigma"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowHS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvTermCriteria)">
            <summary>
            Computes flow for every pixel of the first input image using Horn &amp; Schunck algorithm
            </summary>
            <param name="prev">First image, 8-bit, single-channel. </param>
            <param name="curr">Second image, 8-bit, single-channel. </param>
            <param name="use_previous">Uses previous (input) velocity field. </param>
            <param name="velx">Horizontal component of the optical flow of the same size as input images, 32-bit floating-point, single-channel. </param>
            <param name="vely">Vertical component of the optical flow of the same size as input images, 32-bit floating-point, single-channel. </param>
            <param name="lambda">Lagrangian multiplier. </param>
            <param name="criteria">Criteria of termination of velocity computing. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes flow for every pixel of the first input image using Lucas &amp; Kanade algorithm
            </summary>
            <param name="prev">First image, 8-bit, single-channel. </param>
            <param name="curr">Second image, 8-bit, single-channel. </param>
            <param name="win_size">Size of the averaging window used for grouping pixels. </param>
            <param name="velx">Horizontal component of the optical flow of the same size as input images, 32-bit floating-point, single-channel. </param>
            <param name="vely">Vertical component of the optical flow of the same size as input images, 32-bit floating-point, single-channel. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
            Calculates optical flow for a sparse feature set using iterative Lucas-Kanade method in pyramids
            </summary>
            <param name="prev">First frame, at time t. </param>
            <param name="curr">Second frame, at time t + dt . </param>
            <param name="prev_pyr">Buffer for the pyramid for the first frame. If the pointer is not null , the buffer must have a sufficient size to store the pyramid from level 1 to level #level ; the total size of (image_width+8)*image_height/3 bytes is sufficient. </param>
            <param name="curr_pyr">Similar to prev_pyr, used for the second frame. </param>
            <param name="prev_features">Array of points for which the flow needs to be found. </param>
            <param name="curr_features">Array of 2D points containing calculated new positions of input features in the second image. </param>
            <param name="win_size">Size of the search window of each pyramid level. </param>
            <param name="level">Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1 , two levels are used, etc. </param>
            <param name="status">Array. Every element of the array is set to 1 if the flow for the corresponding feature has been found, 0 otherwise. </param>
            <param name="criteria">Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped. </param>
            <param name="flags">Miscellaneous flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,System.Single[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
            Calculates optical flow for a sparse feature set using iterative Lucas-Kanade method in pyramids
            </summary>
            <param name="prev">First frame, at time t. </param>
            <param name="curr">Second frame, at time t + dt . </param>
            <param name="prev_pyr">Buffer for the pyramid for the first frame. If the pointer is not null , the buffer must have a sufficient size to store the pyramid from level 1 to level #level ; the total size of (image_width+8)*image_height/3 bytes is sufficient. </param>
            <param name="curr_pyr">Similar to prev_pyr, used for the second frame. </param>
            <param name="prev_features">Array of points for which the flow needs to be found. </param>
            <param name="curr_features">Array of 2D points containing calculated new positions of input features in the second image. </param>
            <param name="win_size">Size of the search window of each pyramid level. </param>
            <param name="level">Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1 , two levels are used, etc. </param>
            <param name="status">Array. Every element of the array is set to 1 if the flow for the corresponding feature has been found, 0 otherwise. </param>
            <param name="track_error">Array of double numbers containing difference between patches around the original and moved points. Optional parameter; can be NULL . </param>
            <param name="criteria">Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped. </param>
            <param name="flags">Miscellaneous flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.PCAFlag)">
            <summary>
            Performs Principal Component Analysis of a vector set
            </summary>
            <param name="data">The input data; each vector is either a single row (CV_PCA_DATA_AS_ROW) or a single column (CV_PCA_DATA_AS_COL).  </param>
            <param name="avg">The mean (average) vector, computed inside the function or provided by user. </param>
            <param name="eigenvalues">The output eigenvalues of covariation matrix. </param>
            <param name="eigenvectors">The output eigenvectors of covariation matrix (i.e. principal components); one vector per row. </param>
            <param name="flags">The operation flags</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcPGH(OpenCvSharp.CvSeq,OpenCvSharp.CvHistogram)">
            <summary>
            Calculates pair-wise geometrical histogram for contour
            </summary>
            <param name="contour">Input contour. Currently, only integer point coordinates are allowed. </param>
            <param name="hist">Calculated histogram; must be two-dimensional. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram)">
            <summary>
            Divides one histogram by another.
            </summary>
            <param name="hist1">first histogram (the divisor). </param>
            <param name="hist2">second histogram. </param>
            <param name="dst_hist">destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            Divides one histogram by another.
            </summary>
            <param name="hist1">first histogram (the divisor). </param>
            <param name="hist2">second histogram. </param>
            <param name="dst_hist">destination histogram. </param>
            <param name="scale">scale factor for the destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcSubdivVoronoi2D(OpenCvSharp.CvSubdiv2D)">
            <summary>
            Calculates coordinates of Voronoi diagram cells.
            </summary>
            <param name="subdiv">Delaunay subdivision, where all the points are added already. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points">The joint matrix of corresponding image points, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="point_counts">Vector containing numbers of points in each particular view, 1xM or Mx1, where M is the number of a scene views. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="intrinsic_matrix">The output camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS and/or CV_CALIB_FIX_ASPECT_RATION are specified, some or all of fx, fy, cx, cy must be initialized. </param>
            <param name="distortion_coeffs">The output 4x1 or 1x4 vector of distortion coefficients [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points">The joint matrix of corresponding image points, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="point_counts">Vector containing numbers of points in each particular view, 1xM or Mx1, where M is the number of a scene views. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="intrinsic_matrix">The output camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS and/or CV_CALIB_FIX_ASPECT_RATION are specified, some or all of fx, fy, cx, cy must be initialized. </param>
            <param name="distortion_coeffs">The output 4x1 or 1x4 vector of distortion coefficients [k1, k2, p1, p2]. </param>
            <param name="rotation_vectors">The output 3xM or Mx3 array of rotation vectors (compact representation of rotation matrices, see cvRodrigues2). </param>
            <param name="translation_vectors">The output 3xM or Mx3 array of translation vectors. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CalibrationFlag)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points">The joint matrix of corresponding image points, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="point_counts">Vector containing numbers of points in each particular view, 1xM or Mx1, where M is the number of a scene views. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="intrinsic_matrix">The output camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS and/or CV_CALIB_FIX_ASPECT_RATION are specified, some or all of fx, fy, cx, cy must be initialized. </param>
            <param name="distortion_coeffs">The output 4x1 or 1x4 vector of distortion coefficients [k1, k2, p1, p2]. </param>
            <param name="rotation_vectors">The output 3xM or Mx3 array of rotation vectors (compact representation of rotation matrices, see cvRodrigues2). </param>
            <param name="translation_vectors">The output 3xM or Mx3 array of translation vectors. </param>
            <param name="flags">Different flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
            <param name="principal_point">The principal point in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="camera_matrix">The matrix of intrinsic parameters, e.g. computed by cvCalibrateCamera2</param>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
            <param name="principal_point">The principal point in realworld units</param>
            <param name="pixel_aspect_ratio">The pixel aspect ratio ~ fy/fx</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria)">
            <summary>
            Finds object center, size, and orientation
            </summary>
            <param name="prob_image">Back projection of object histogram (see cvCalcBackProject). </param>
            <param name="window">Initial search window. </param>
            <param name="criteria">Criteria applied to determine when the window search should be finished. </param>
            <returns>The function returns number of iterations made within cvMeanShift. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp@)">
            <summary>
            Finds object center, size, and orientation
            </summary>
            <param name="prob_image">Back projection of object histogram (see cvCalcBackProject). </param>
            <param name="window">Initial search window. </param>
            <param name="criteria">Criteria applied to determine when the window search should be finished. </param>
            <param name="comp">Resultant structure that contains converged search window coordinates (comp->rect field) and sum of all pixels inside the window (comp->area field). </param>
            <returns>The function returns number of iterations made within cvMeanShift. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp@,OpenCvSharp.CvBox2D@)">
            <summary>
            Finds object center, size, and orientation
            </summary>
            <param name="prob_image">Back projection of object histogram (see cvCalcBackProject). </param>
            <param name="window">Initial search window. </param>
            <param name="criteria">Criteria applied to determine when the window search should be finished. </param>
            <param name="comp">Resultant structure that contains converged search window coordinates (comp->rect field) and sum of all pixels inside the window (comp->area field). </param>
            <param name="box">Circumscribed box for the object. If not NULL, contains object size and orientation. </param>
            <returns>The function returns number of iterations made within cvMeanShift. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Canny(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Finds the edges on the input image image and marks them in the output image edges using the Canny algorithm. 
            The smallest of threshold1 and threshold2 is used for edge linking, the largest - to find initial segments of strong edges.
            </summary>
            <param name="image">Input image. </param>
            <param name="edges">Image to store the edges found by the function. </param>
            <param name="threshold1">The first threshold. </param>
            <param name="threshold2">The second threshold. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Canny(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            Finds the edges on the input image image and marks them in the output image edges using the Canny algorithm. 
            The smallest of threshold1 and threshold2 is used for edge linking, the largest - to find initial segments of strong edges.
            </summary>
            <param name="image">Input image. </param>
            <param name="edges">Image to store the edges found by the function. </param>
            <param name="threshold1">The first threshold. </param>
            <param name="threshold2">The second threshold. </param>
            <param name="aperture_size">Aperture parameter for Sobel operator. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates magnitude and/or angle of 2d vectors
            </summary>
            <param name="x">The array of x-coordinates </param>
            <param name="y">The array of y-coordinates </param>
            <param name="magnitude">The destination array of magnitudes, may be set to null if it is not needed </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates magnitude and/or angle of 2d vectors
            </summary>
            <param name="x">The array of x-coordinates </param>
            <param name="y">The array of y-coordinates </param>
            <param name="magnitude">The destination array of magnitudes, may be set to null if it is not needed </param>
            <param name="angle">The destination array of angles, may be set to null if it is not needed. The angles are measured in radians (0..2π) or in degrees (0..360°). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.AngleUnit)">
            <summary>
            Calculates magnitude and/or angle of 2d vectors
            </summary>
            <param name="x">The array of x-coordinates </param>
            <param name="y">The array of y-coordinates </param>
            <param name="magnitude">The destination array of magnitudes, may be set to null if it is not needed </param>
            <param name="angle">The destination array of angles, may be set to null if it is not needed. The angles are measured in radians (0..2π) or in degrees (0..360°). </param>
            <param name="unit">The flag indicating whether the angles are measured in radians, which is default mode, or in degrees. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Cbrt(System.Single)">
            <summary>
            Calculates cubic root
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ceil(System.Double)">
            <summary>
            Returns the minimum integer value that is not smaller than the argument.
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="arr">The array to check. </param>
            <param name="flags">The operation flags</param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="arr">The array to check. </param>
            <param name="flags">The operation flags</param>
            <param name="min_val">The inclusive lower boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <param name="max_val">The exclusive upper boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="arr">The array to check. </param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="arr">The array to check. </param>
            <param name="flags">The operation flags</param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="arr">The array to check. </param>
            <param name="flags">The operation flags</param>
            <param name="min_val">The inclusive lower boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <param name="max_val">The exclusive upper boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckChessboard(OpenCvSharp.IplImage,OpenCvSharp.CvSize)">
            <summary>
            Performs a fast check if a chessboard is in the input image. 
            This is a workaround to a problem of cvFindChessboardCorners being slow on images with no chessboard
            </summary>
            <param name="src">input image</param>
            <param name="size">chessboard size</param>
            <returns>Returns 1 if a chessboard can be in this image and findChessboardCorners should be called, 
            0 if there is no chessboard, -1 in case of error</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckContourConvexity(OpenCvSharp.CvArr)">
            <summary>
            Tests contour convexity.
            </summary>
            <param name="contour">Tested contour (sequence or array of points)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckTermCriteria(OpenCvSharp.CvTermCriteria,System.Double,System.Int32)">
            <summary>
            Check termination criteria and transform it so that type=CriteriaType.Iteration | CriteriaType.Epsilon,
            and both max_iter and epsilon are valid
            </summary>
            <param name="criteria">Termination criteria</param>
            <param name="default_eps">Default epsilon</param>
            <param name="default_max_iters">Default maximum number of iteration</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearGraph(OpenCvSharp.CvGraph)">
            <summary>
            Returns index of graph vertex
            </summary>
            <param name="graph">Graph. </param>
            <remarks>The function cvClearGraph removes all vertices and edges from the graph. The function has O(1) time complexity.</remarks>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearHist(OpenCvSharp.CvHistogram)">
            <summary>
            Sets all histogram bins to 0 in case of dense histogram and removes all histogram bins in case of sparse array.
            </summary>
            <param name="hist">Histogram.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            Clears memory storage
            </summary>
            <param name="storage">Memory storage. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Clears the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx">Array of the element indices </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSeq(OpenCvSharp.CvSeq)">
            <summary>
            Clears sequence
            </summary>
            <param name="seq">Sequence. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSet(OpenCvSharp.CvSet)">
            <summary>
            Clears set
            </summary>
            <param name="set">Cleared set. </param>
            <returns>The function cvClearSet removes all elements from set. It has O(1) time complexity.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSubdivVoronoi2D(OpenCvSharp.CvSubdiv2D)">
            <summary>
            Removes all virtual points
            </summary>
            <param name="subdiv">Delaunay subdivision. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClipLine(OpenCvSharp.CvSize,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            Clips the line against the image rectangle
            </summary>
            <param name="img_size">Size of the image. </param>
            <param name="pt1">First ending point of the line segment. It is modified by the function. </param>
            <param name="pt2">Second ending point of the line segment. It is modified by the function. </param>
            <returns>The function cvClipLine calculates a part of the line segment which is entirely in the image. It returns 0 if the line segment is completely outside the image and 1 otherwise. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Clone(System.IntPtr)">
            <summary>
            Makes a clone of the object
            </summary>
            <param name="struct_ptr">The object to clone. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Clone``1(``0)">
            <summary>
            Makes a clone of the object
            </summary>
            <param name="struct_ptr">The object to clone. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneGraph(OpenCvSharp.CvGraph,OpenCvSharp.CvMemStorage)">
            <summary>
            Clone graph
            </summary>
            <param name="graph">Graph. </param>
            <param name="storage">Container for the copy. </param>
            <returns>The function cvCloneGraph creates full copy of the graph. If the graph vertices or edges have pointers to some external data, it still be shared between the copies. The vertex and edge indices in the new graph may be different from the original, because the function defragments the vertex and edge sets.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneImage(OpenCvSharp.IplImage)">
            <summary>
            Makes a full copy of image
            </summary>
            <param name="image">Original image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneMat(OpenCvSharp.CvMat)">
            <summary>
            Creates matrix copy
            </summary>
            <param name="mat">Input matrix</param>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneMatND(OpenCvSharp.CvMatND)">
            <summary>
            Creates full copy of multi-dimensional array
            </summary>
            <param name="mat">Input array</param>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq(OpenCvSharp.CvSeq)">
            <summary>
            Creates a copy of sequence
            </summary>
            <param name="seq">Sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates a copy of sequence
            </summary>
            <param name="seq">Sequence. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq``1(OpenCvSharp.CvSeq{``0})">
            <summary>
            Creates a copy of sequence
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvMemStorage)">
            <summary>
            Creates a copy of sequence
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSparseMat(OpenCvSharp.CvSparseMat)">
            <summary>
            Creates full copy of sparse array
            </summary>
            <param name="mat">Input array</param>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Cmp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            Performs per-element comparison of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. Both source array must have a single channel. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
            <param name="cmp_op">The flag specifying the relation between the elements to be checked</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CmpS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            Performs per-element comparison of array and scalar
            </summary>
            <param name="src">The source array, must have a single channel. </param>
            <param name="value">The scalar value to compare each array element with. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
            <param name="cmp_op">The flag specifying the relation between the elements to be checked</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConDensInitSampleSet(OpenCvSharp.CvConDensation,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Initializes sample set for ConDensation algorithm
            </summary>
            <param name="condens">Structure to be initialized. </param>
            <param name="lower_bound">Vector of the lower boundary for each dimension. </param>
            <param name="upper_bound">Vector of the upper boundary for each dimension. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConDensUpdateByTime(OpenCvSharp.CvConDensation)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="condens">Structure to be updated. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompleteSymm(OpenCvSharp.CvMat)">
            <summary>
            Completes the symmetric matrix from the lower part
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompleteSymm(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Completes the symmetric matrix from the lower (LtoR=0) or from the upper (LtoR!=0) part
            </summary>
            <param name="matrix"></param>
            <param name="LtoR"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompareHist(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            Compares two dense histograms.
            </summary>
            <param name="hist1">The first dense histogram. </param>
            <param name="hist2">The second dense histogram. </param>
            <param name="method">Comparison method.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ComposeRT(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes r3 = rodrigues(rodrigues(r2)*rodrigues(r1)),
            t3 = rodrigues(r2)*t1 + t2 and the respective derivatives
            </summary>
            <param name="rvec1"></param>
            <param name="tvec1"></param>
            <param name="rvec2"></param>
            <param name="tvec2"></param>
            <param name="rvec3"></param>
            <param name="tvec3"></param>
            <param name="dr3dr1"></param>
            <param name="dr3dt1"></param>
            <param name="dr3dr2"></param>
            <param name="dr3dt2"></param>
            <param name="dt3dr1"></param>
            <param name="dt3dt1"></param>
            <param name="dt3dr2"></param>
            <param name="dt3dt2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ComputeCorrespondEpilines(OpenCvSharp.CvMat,System.Int32,OpenCvSharp.CvMat,OpenCvSharp.CvMat@)">
            <summary>
            For points in one image of stereo pair computes the corresponding epilines in the other image
            </summary>
            <param name="points">The input points. 2xN, Nx2, 3xN or Nx3 array (where N number of points). Multi-channel 1xN or Nx1 array is also acceptable. </param>
            <param name="which_image">Index of the image (1 or 2) that contains the points</param>
            <param name="fundamental_matrix">Fundamental matrix </param>
            <param name="correspondent_lines">Computed epilines, 3xN or Nx3 array </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourArea(OpenCvSharp.CvArr)">
            <summary>
            Calculates area of the whole contour or contour section.
            </summary>
            <param name="contour">Contour (sequence or array of vertices). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourArea(OpenCvSharp.CvArr,OpenCvSharp.CvSlice)">
            <summary>
            Calculates area of the whole contour or contour section.
            </summary>
            <param name="contour">Contour (sequence or array of vertices). </param>
            <param name="slice">Starting and ending points of the contour section of interest, by default area of the whole contour is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourFromContourTree(OpenCvSharp.CvContourTree,OpenCvSharp.CvMemStorage,OpenCvSharp.CvTermCriteria)">
            <summary>
            Restores contour from tree.
            </summary>
            <param name="tree">Contour tree. </param>
            <param name="storage">Container for the reconstructed contour. </param>
            <param name="criteria">Criteria, where to stop reconstruction. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContoursMoments(OpenCvSharp.CvSeq,OpenCvSharp.CvMoments@)">
            <summary>
            Alias for Moments with CvSeq contours
            </summary>
            <param name="contour">Contours</param>
            <param name="moments">Moments</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourPerimeter(OpenCvSharp.CvArr)">
            <summary>
            Alias for cvArcLength(curve,Whole_Seq,1)
            </summary>
            <param name="contour">Contours</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertImage(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ConvertImageFlag)">
            <summary>
            Converts one image to another and flips the result vertically if required. 
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. Must be single-channel or 3-channel 8-bit image. </param>
            <param name="flags">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertMaps(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts mapx &amp; mapy from floating-point to integer formats for cvRemap
            </summary>
            <param name="mapx"></param>
            <param name="mapy"></param>
            <param name="mapxy"></param>
            <param name="mapalpha"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertPointsHomogenious(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Convert points to/from homogeneous coordinates
            </summary>
            <param name="src">The input point array, 2xN, Nx2, 3xN, Nx3, 4xN or Nx4  (where N is the number of points). Multi-channel 1xN or Nx1 array is also acceptable. </param>
            <param name="dst">The output point array, must contain the same number of points as the input; The dimensionality must be the same, 1 less or 1 more than the input, and also within 2..4. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertPointsHomogeneous(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Convert points to/from homogeneous coordinates
            </summary>
            <param name="src">The input point array, 2xN, Nx2, 3xN, Nx3, 4xN or Nx4  (where N is the number of points). Multi-channel 1xN or Nx1 array is also acceptable. </param>
            <param name="dst">The output point array, must contain the same number of points as the input; The dimensionality must be the same, 1 less or 1 more than the input, and also within 2..4. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Convert(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="src">Source array. </param>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit integer or floating-point coordinates. </param>
            <param name="hull">Vector of 0-based point indices of the hull points in the original array.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint[],System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit integer coordinates. </param>
            <param name="hull">Vector of 0-based point indices of the hull points in the original array.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint2D32f[],System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit floating-point coordinates. </param>
            <param name="hull">Vector of 0-based point indices of the hull points in the original array.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit integer or floating-point coordinates. </param>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit integer or floating-point coordinates. </param>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint[],OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit integer coordinates. </param>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="input">Array of 2D points with 32-bit floating-point coordinates. </param>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="contour">Input contour. </param>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain pointers or indices to the contour points, not the hull points themselves, i.e. return_points parameter in cvConvexHull2 should be 0. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="contour">Input contour. </param>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain pointers or indices to the contour points, not the hull points themselves, i.e. return_points parameter in cvConvexHull2 should be 0. </param>
            <param name="storage">Container for output sequence of convexity defects. If it is null, contour or hull (in that order) storage is used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="contour">Input contour. </param>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain indices to the contour points </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Copies one array to another
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Copies one array to another
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CopyHist(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram@)">
            <summary>
            The function cvCopyHist makes a copy of the histogram. 
            If the second histogram pointer dst is null, a new histogram of the same size as src is created. 
            Otherwise, both histograms must have equal types and sizes. 
            Then the function copies the source histogram bins values to destination histogram and sets the same bin values ranges as in src. 
            </summary>
            <param name="src">Source histogram. </param>
            <param name="dst">Reference to destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType)">
            <summary>
            Copies image and makes border around it.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="offset">Coordinates of the top-left corner (or bottom-left in case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. Size of the rectanlge matches the source image size/ROI size. </param>
            <param name="bordertype">Type of the border to create around the copied source image rectangle.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType,OpenCvSharp.CvScalar)">
            <summary>
            Copies image and makes border around it.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="offset">Coordinates of the top-left corner (or bottom-left in case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. Size of the rectanlge matches the source image size/ROI size. </param>
            <param name="bordertype">Type of the border to create around the copied source image rectangle.</param>
            <param name="value">Value of the border pixels if bordertype=IPL_BORDER_CONSTANT. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerEigenValsAndVecs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Calculates eigenvalues and eigenvectors of image blocks for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="eigenvv">Image to store the results. It must be 6 times wider than the input image. </param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerEigenValsAndVecs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates eigenvalues and eigenvectors of image blocks for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="eigenvv">Image to store the results. It must be 6 times wider than the input image. </param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="image">Input image. </param>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="image">Input image. </param>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize,System.Double)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="image">Input image. </param>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
            <param name="k">Harris detector free parameter.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerMinEigenVal(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Calculates minimal eigenvalue of gradient matrices for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="eigenval">Image to store the minimal eigen values. Should have the same size as image</param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerMinEigenVal(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates minimal eigenvalue of gradient matrices for corner detection
            </summary>
            <param name="image">Input image. </param>
            <param name="eigenval">Image to store the minimal eigen values. Should have the same size as image</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CorrectMatches(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            The Optimal Triangulation Method
            </summary>
            <param name="F">3x3 fundamental matrix</param>
            <param name="points1">2xN matrix containing the first set of points</param>
            <param name="points2">2xN matrix containing the second set of points</param>
            <param name="new_points1">the optimized points1_. if this is null, the corrected points are placed back in points1_</param>
            <param name="new_points2">the optimized points2_. if this is null, the corrected points are placed back in points2_</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CountNonZero(OpenCvSharp.CvArr)">
            <summary>
            Counts non-zero array elements
            </summary>
            <param name="arr">The array, must be single-channel array or multi-channel image with COI set. </param>
            <returns>the number of non-zero elements in arr</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateBGCodeBookModel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton">
            <summary>
            Create a button on the control panel
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String)">
            <summary>
            Create a button on the control panel
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback)">
            <summary>
            Create a button on the control panel
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object)">
            <summary>
            Create a button on the control panel
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType)">
            <summary>
            Create a button on the control panel
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
            <param name="button_type">button type</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType,System.Int32)">
            <summary>
            Create a button on the control panel
            </summary>
            <param name="name">Name of the button ( if null, the name will be “button &lt;number of boutton&gt;”)</param>
            <param name="callback">Pointer to the function to be called every time the button changed its state.</param>
            <param name="userdata">object passed to the callback function. </param>
            <param name="button_type">button type</param>
            <param name="initial_button_state">Default state of the button. Use for checkbox and radiobox, its value could be 0 or 1. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateCameraCapture(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateCameraCapture(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateChildMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            Creates child memory storage
            </summary>
            <param name="parent">Parent memory storage. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateConDensation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates ConDensation filter structure
            </summary>
            <param name="dynam_params">Dimension of the state vector. </param>
            <param name="measure_params">Dimension of the measurement vector. </param>
            <param name="sample_count">Number of samples. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateContourTree(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Creates hierarchical representation of contour
            </summary>
            <param name="contour">Input contour. </param>
            <param name="storage">Container for output tree. </param>
            <param name="threshold">Approximation accuracy. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateData(OpenCvSharp.CvArr)">
            <summary>
            Allocates array data.
            </summary>
            <param name="arr">Array header. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateFeatureTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs a tree of feature vectors
            </summary>
            <param name="desc">n x d matrix of n d-dimensional feature vectors (CV_32FC1 or CV_64FC1). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateFileCapture(System.String)">
            <summary>
            Allocates and initialized the CvCapture structure for reading the video stream from the specified file.
            After the allocated structure is not used any more it should be released by cvReleaseCapture function. 
            </summary>
            <param name="filename">Name of the video file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat)">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][])">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <param name="ranges">Array of ranges for histogram bins. Its meaning depends on the uniform parameter value. The ranges are used for when histogram is calculated or backprojected to determine, which histogram bin corresponds to which value/tuple of values from the input image[s]. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][],System.Boolean)">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <param name="ranges">Array of ranges for histogram bins. Its meaning depends on the uniform parameter value. The ranges are used for when histogram is calculated or backprojected to determine, which histogram bin corresponds to which value/tuple of values from the input image[s]. </param>
            <param name="uniform">Uniformity flag.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraph(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty graph
            </summary>
            <param name="graph_flags">Type of the created graph. Usually, it is either CV_SEQ_KIND_GRAPH for generic unoriented graphs and CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED for generic oriented graphs. </param>
            <param name="vtx_size">Graph vertex size; the custom vertex structure must start with CvGraphVtx  (use CV_GRAPH_VERTEX_FIELDS()) </param>
            <param name="edge_size">Graph edge size; the custom edge structure must start with CvGraphEdge  (use CV_GRAPH_EDGE_FIELDS()) </param>
            <param name="storage">The graph container. </param>
            <returns>The function cvCreateGraph creates an empty graph and returns it.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraph(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Creates empty graph
            </summary>
            <param name="graph_flags">Type of the created graph. Usually, it is either CV_SEQ_KIND_GRAPH for generic unoriented graphs and CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED for generic oriented graphs. </param>
            <param name="header_size">Graph header size; may not be less than sizeof(CvGraph).</param>
            <param name="vtx_size">Graph vertex size; the custom vertex structure must start with CvGraphVtx  (use CV_GRAPH_VERTEX_FIELDS()) </param>
            <param name="edge_size">Graph edge size; the custom edge structure must start with CvGraphEdge  (use CV_GRAPH_EDGE_FIELDS()) </param>
            <param name="storage">The graph container. </param>
            <returns>The function cvCreateGraph creates an empty graph and returns it.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Initial vertex to start from. If NULL, the traversal starts from the first vertex (a vertex with the minimal index in the sequence of vertices). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.GraphScannerMask)">
            <summary>
            Creates structure for depth-first graph traversal
            </summary>
            <param name="graph">Graph. </param>
            <param name="vtx">Initial vertex to start from. If NULL, the traversal starts from the first vertex (a vertex with the minimal index in the sequence of vertices). </param>
            <param name="mask">Event mask indicating which events are interesting to the user (where cvNextGraphItem  function returns control to the user) It can be CV_GRAPH_ALL_ITEMS (all events are interesting) or combination of the following flags:
            <br/> * CV_GRAPH_VERTEX - stop at the graph vertices visited for the first time
              <br/>* CV_GRAPH_TREE_EDGE - stop at tree edges (tree edge is the edge connecting the last visited vertex and the vertex to be visited next)
            <br/>* CV_GRAPH_BACK_EDGE - stop at back edges (back edge is an edge connecting the last visited vertex with some of its ancestors in the search tree)
            <br/>* CV_GRAPH_FORWARD_EDGE - stop at forward edges (forward edge is an edge conecting the last visited vertex with some of its descendants in the search tree). The forward edges are only possible during oriented graph traversal)
              <br/>* CV_GRAPH_CROSS_EDGE - stop at cross edges (cross edge is an edge connecting different search trees or branches of the same tree. The cross edges are only possible during oriented graphs traversal)
              <br/> * CV_GRAPH_ANY_EDGE - stop and any edge (tree, back, forward and cross edges)
              <br/>* CV_GRAPH_NEW_TREE - stop in the beginning of every new search tree. When the traversal procedure visits all vertices and edges reachible from the initial vertex (the visited vertices together with tree edges make up a tree), it searches for some unvisited vertex in the graph and resumes the traversal process from that vertex. Before starting a new tree (including the very first tree when cvNextGraphItem is called for the first time) it generates CV_GRAPH_NEW_TREE event.
               <br/> For unoriented graphs each search tree corresponds to a connected component of the graph.
             <br/> * CV_GRAPH_BACKTRACKING - stop at every already visited vertex during backtracking - returning to already visited vertexes of the traversal tree.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateImage(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Creates header and allocates data
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Bit depth of image elements.</param>
            <param name="channels">Number of channels per element(pixel).</param>
            <returns>Reference to image header</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Allocates, initializes, and returns structure IplImage
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <returns>Reference to image header</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKalman(System.Int32,System.Int32)">
            <summary>
            Allocates Kalman filter structure
            </summary>
            <param name="dynam_params">dimensionality of the state vector </param>
            <param name="measure_params">dimensionality of the measurement vector </param>
            <returns>Kalman structure</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKalman(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates Kalman filter structure
            </summary>
            <param name="dynam_params">dimensionality of the state vector </param>
            <param name="measure_params">dimensionality of the measurement vector </param>
            <param name="control_params">dimensionality of the control vector </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKDTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs kd-tree from set of feature descriptors
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMat(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix.
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatHeader(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            allocates new matrix header and returns pointer to it.
            The matrix data can further be allocated using cvCreateData or set explicitly to user-allocated data via cvSetData.
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatND(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Allocates header for multi-dimensional dense array and the underlying data, and returns pointer to the created array.
            </summary>
            <param name="dims">Number of array dimensions. It must not exceed CV_MAX_DIM (=32 by default, though it may be changed at build time) </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatNDHeader(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Allocates header for multi-dimensional dense array. 
            The array data can further be allocated using cvCreateData or set explicitly to user-allocated data via cvSetData. 
            </summary>
            <param name="dims">Number of array dimensions. </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemStorage">
            <summary>
            Creates memory storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemStorage(System.Int32)">
            <summary>
            Creates memory storage
            </summary>
            <param name="block_size">Size of the storage blocks in bytes. If it is 0, the block size is set to default value - currently it is ≈64K. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePOSITObject(OpenCvSharp.CvPoint3D32f[])">
            <summary>
            Initializes structure containing object information
            </summary>
            <param name="points">Array of points of the 3D object model. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePOSITObject(OpenCvSharp.CvPoint3D32f[],System.Int32)">
            <summary>
            Initializes structure containing object information
            </summary>
            <param name="points">Array of points of the 3D object model. </param>
            <param name="point_count">Number of object points. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePyramid(OpenCvSharp.CvArr,System.Int32,System.Double,OpenCvSharp.CvSize[],OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvFilter)">
            <summary>
            Builds pyramid for an image
            </summary>
            <param name="img"></param>
            <param name="extra_layers"></param>
            <param name="rate"></param>
            <param name="layer_sizes"></param>
            <param name="bufarr"></param>
            <param name="calc"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <param name="tau"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeq(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header; must be greater or equal to sizeof(CvSeq). If a specific type or its extension is indicated, this type must fit the base type header. </param>
            <param name="elem_size">Size of the sequence elements in bytes. The size must be consistent with the sequence type. For example, for a sequence of points to be created, the element type CV_SEQ_ELTYPE_POINT should be specified and the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeq``1(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence
            </summary>
            <typeparam name="T">Element type (ex. int, CvPoint)</typeparam>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header; must be greater or equal to sizeof(CvSeq). If a specific type or its extension is indicated, this type must fit the base type header. </param>
            <param name="storage">Sequence location. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeqBlock(OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSet(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty set
            </summary>
            <param name="set_flags">Type of the created set. </param>
            <param name="header_size">Set header size; may not be less than sizeof(CvSet). </param>
            <param name="elem_size">Set element size; may not be less than CvSetElem. </param>
            <param name="storage">Container for the set. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSet``1(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set_flags">Type of the created set. </param>
            <param name="header_size">Set header size; may not be less than sizeof(CvSet). </param>
            <param name="elem_size">Set element size; may not be less than CvSetElem. </param>
            <param name="storage">Container for the set. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSparseMat(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Creates sparse array
            </summary>
            <param name="dims">Number of array dimensions. As opposite to the dense matrix, the number of dimensions is practically unlimited (up to 2^16). </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState">
            <summary>
            Creates block matching stereo correspondence structure
            </summary>
            <returns>stereo correspondence structure</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState(OpenCvSharp.StereoBMPreset)">
            <summary>
            Creates block matching stereo correspondence structure
            </summary>
            <param name="preset">ID of one of the pre-defined parameter sets. Any of the parameters can be overridden after creating the structure. </param>
            <returns>stereo correspondence structure</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState(OpenCvSharp.StereoBMPreset,System.Int32)">
            <summary>
            Creates block matching stereo correspondence structure
            </summary>
            <param name="preset">ID of one of the pre-defined parameter sets. Any of the parameters can be overridden after creating the structure. </param>
            <param name="numberOfDisparities">The number of disparities. If the parameter is 0, it is taken from the preset, otherwise the supplied value overrides the one from preset. </param>
            <returns>stereo correspondence structure</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoGCState(System.Int32,System.Int32)">
            <summary>
            Creates the state of graph cut-based stereo correspondence algorithm
            </summary>
            <param name="numberOfDisparities">The number of disparities. The disparity search range will be state-&gt;minDisparity ≤ disparity &lt; state-&gt;minDisparity + state-&gt;numberOfDisparities</param>
            <param name="maxIters">Maximum number of iterations. On each iteration all possible (or reasonable) alpha-expansions are tried. The algorithm may terminate earlier if it could not find an alpha-expansion that decreases the overall cost function value.</param>
            <returns>stereo correspondence structure</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStructuringElementEx(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape)">
            <summary>
            Allocates and fills the structure IplConvKernel, which can be used as a structuring element in the morphological operations.
            </summary>
            <param name="cols">Number of columns in the structuring element. </param>
            <param name="rows">Number of rows in the structuring element. </param>
            <param name="anchor_x">Relative horizontal offset of the anchor point. </param>
            <param name="anchor_y">Relative vertical offset of the anchor point. </param>
            <param name="shape">Shape of the structuring element.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStructuringElementEx(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape,System.Int32[0:,0:])">
            <summary>
            Allocates and fills the structure IplConvKernel, which can be used as a structuring element in the morphological operations.
            </summary>
            <param name="cols">Number of columns in the structuring element. </param>
            <param name="rows">Number of rows in the structuring element. </param>
            <param name="anchor_x">Relative horizontal offset of the anchor point. </param>
            <param name="anchor_y">Relative vertical offset of the anchor point. </param>
            <param name="shape">Shape of the structuring element.</param>
            <param name="values">Pointer to the structuring element data, a plane array, representing row-by-row scanning of the element matrix. 
            Non-zero values indicate points that belong to the element. If the pointer is null, then all values are considered non-zero, 
            that is, the element is of a rectangular shape. This parameter is considered only if the shape is CV_SHAPE_CUSTOM . </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSubdiv2D(OpenCvSharp.SeqType,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty Delaunay triangulation.
            The users must initialize the returned value by cvInitSubdivDelaunay2D.
            </summary>
            <param name="subdiv_type"></param>
            <param name="header_size"></param>
            <param name="vtx_size"></param>
            <param name="quadedge_size"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSubdivDelaunay2D(OpenCvSharp.CvRect,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty Delaunay triangulation
            </summary>
            <param name="rect">Rectangle that includes all the 2d points that are to be added to subdivision. </param>
            <param name="storage">Container for subdivision. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateTrackbar(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Creates the trackbar (a.k.a. slider or range control) with the specified name and range, 
            assigns the variable to be syncronized with trackbar position and specifies callback function to be called on trackbar position change. 
            The created trackbar is displayed on top of given window.
            </summary>
            <param name="trackbar_name">Name of created trackbar. </param>
            <param name="window_name">Name of the window which will e used as a parent for created trackbar. </param>
            <param name="value">Initial position of the slider.</param>
            <param name="count">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="on_change">Reference to the function to be called every time the slider changes the position. 
            This function should be prototyped as void Foo(int);Can be null if callback is not required. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateTrackbar2(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            Creates the trackbar (a.k.a. slider or range control) with the specified name and range, 
            assigns the variable to be syncronized with trackbar position and specifies callback function to be called on trackbar position change. 
            The created trackbar is displayed on top of given window.
            </summary>
            <param name="trackbar_name">Name of created trackbar. </param>
            <param name="window_name">Name of the window which will e used as a parent for created trackbar. </param>
            <param name="value">Initial position of the slider.</param>
            <param name="count">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="on_change">Reference to the function to be called every time the slider changes the position. 
            This function should be prototyped as void Foo(int);Can be null if callback is not required. </param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateVideoWriter(System.String,System.String,System.Double,OpenCvSharp.CvSize)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateVideoWriter(System.String,System.String,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <param name="is_color">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CrossProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates cross product of two 3D vectors
            </summary>
            <param name="src1">The first source vector. </param>
            <param name="src2">The second source vector. </param>
            <param name="dst">The destination vector. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtColor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ColorConversion)">
            <summary>
            Converts image from one color space to another.
            </summary>
            <param name="src">The source 8-bit (8u), 16-bit (16u) or single-precision floating-point (32f) image. </param>
            <param name="dst">The destination image of the same data type as the source one. The number of channels may be different. </param>
            <param name="code">Color conversion operation that can be specifed using CV_&lt;src_color_space&gt;2&lt;dst_color_space&gt; constants (see below). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtSeqToArray``1(OpenCvSharp.CvSeq,``0[]@)">
            <summary>
            Copies sequence to one continuous block of memory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq">Sequence. </param>
            <param name="elements">destination array that must be large enough. It should be a pointer to data, not a matrix header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtSeqToArray``1(OpenCvSharp.CvSeq,``0[]@,OpenCvSharp.CvSlice)">
            <summary>
            Copies sequence to one continuous block of memory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq">Sequence. </param>
            <param name="elements">destination array that must be large enough. It should be a pointer to data, not a matrix header. </param>
            <param name="slice">The sequence part to copy to the array. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SampleLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            Implements a particular case of application of line iterators. 
            The function reads all the image points lying on the line between pt1 and pt2, including the ending points, and stores them into the buffer.
            </summary>
            <param name="image">Image to sample the line from. </param>
            <param name="pt1">Starting the line point. </param>
            <param name="pt2">Ending the line point. </param>
            <param name="buffer">Buffer to store the line points.</param>
            <param name="connectivity">The line connectivity, 4 or 8. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr)">
            <summary>
            Saves object to file
            </summary>
            <param name="filename">File name. </param>
            <param name="struct_ptr">Object to save. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String)">
            <summary>
            Saves object to file
            </summary>
            <param name="filename">File name. </param>
            <param name="struct_ptr">Object to save. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String,System.String)">
            <summary>
            Saves object to file
            </summary>
            <param name="filename">File name. </param>
            <param name="struct_ptr">Object to save. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
            <param name="comment">Optional comment to put in the beginning of the file. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String,System.String,OpenCvSharp.CvAttrList)">
            <summary>
            Saves object to file
            </summary>
            <param name="filename">File name. </param>
            <param name="struct_ptr">Object to save. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
            <param name="comment">Optional comment to put in the beginning of the file. </param>
            <param name="attributes">Optional attributes passed to cvWrite. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String)">
            <summary>
            Saves object to file
            </summary>
            <param name="struct_ptr">Object to save. </param>
            <param name="filename">File name. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String)">
            <summary>
            Saves object to file
            </summary>
            <param name="struct_ptr">Object to save. </param>
            <param name="filename">File name. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String,System.String)">
            <summary>
            Saves object to file
            </summary>
            <param name="struct_ptr">Object to save. </param>
            <param name="filename">File name. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
            <param name="comment">Optional comment to put in the beginning of the file. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String,System.String,OpenCvSharp.CvAttrList)">
            <summary>
            Saves object to file
            </summary>
            <param name="struct_ptr">Object to save. </param>
            <param name="filename">File name. </param>
            <param name="name">Optional object name. If it is null, the name will be formed from filename. </param>
            <param name="comment">Optional comment to put in the beginning of the file. </param>
            <param name="attributes">Optional attributes passed to cvWrite. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveImage(System.String,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Saves the image to the specified file. The image format is chosen depending on the filename extension, see cvLoadImage. 
            Only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function. 
            </summary>
            <param name="filename">Name of the file. </param>
            <param name="image">Image to be saved. </param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveImage(System.String,OpenCvSharp.CvArr,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Saves the image to the specified file. The image format is chosen depending on the filename extension, see cvLoadImage. 
            Only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function. 
            </summary>
            <param name="filename">Name of the file. </param>
            <param name="image">Image to be saved. </param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveMemStoragePos(OpenCvSharp.CvMemStorage,OpenCvSharp.CvMemStoragePos@)">
            <summary>
            Saves memory storage position
            </summary>
            <param name="storage">Memory storage. </param>
            <param name="pos">The output position of the storage top. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveWindowParameters(System.String)">
            <summary>
            Save parameters of the window.
            </summary>
            <param name="name">Name of the window</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ScalarAll(System.Double)">
            <summary>
            Initializes val[0]...val[3] with val0123
            </summary>
            <param name="val0123"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ScaleAdd(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates sum of scaled array and another array
            </summary>
            <param name="src1">The first source array. </param>
            <param name="scale">Scale factor for the first array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates sum of scaled array and another array
            </summary>
            <param name="src1">The first source array. </param>
            <param name="scale">Scale factor for the first array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AXPY(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            cvScaleAdd(A, cvRealScalar(real_scalar), B, C)
            </summary>
            <param name="A"></param>
            <param name="real_scalar"></param>
            <param name="B"></param>
            <param name="C"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single,OpenCvSharp.CvMemStorage,OpenCvSharp.CvPoint)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <param name="storage"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentMotion(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Double)">
            <summary>
            Segments whole motion into separate moving parts
            </summary>
            <param name="mhi">Motion history image.</param>
            <param name="seg_mask">Image where the mask found should be stored, single-channel, 32-bit floating-point.</param>
            <param name="storage">Memory storage that will contain a sequence of motion connected components.</param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="seg_thresh">Segmentation threshold; recommended to be equal to the interval between motion history "steps" or greater.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqElemIdx``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            Returns index of concrete sequence element
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">the element within the sequence. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqElemIdx``1(OpenCvSharp.CvSeq,``0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            Returns index of concrete sequence element
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">the element within the sequence. </param>
            <param name="block">the address of the sequence block that contains the element is stored in this location. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInsert``1(OpenCvSharp.CvSeq,System.Int32,``0)">
            <summary>
            Inserts element in sequence middle
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="before_index">Index before which the element is inserted. Inserting before 0 (the minimal allowed value of the parameter) is equal to cvSeqPushFront and inserting before seq->total (the maximal allowed value of the parameter) is equal to cvSeqPush. </param>
            <param name="element">Inserted element. </param>
            <returns>Inserted element. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInsertSlice(OpenCvSharp.CvSeq,System.Int32,OpenCvSharp.CvArr)">
            <summary>
            Inserts array in the middle of sequence
            </summary>
            <param name="seq">Sequence. </param>
            <param name="before_index">The part of the sequence to remove. </param>
            <param name="from_arr">The array to take elements from. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInvert(OpenCvSharp.CvSeq)">
            <summary>
            Reverses the order of sequence elements
            </summary>
            <param name="seq">Sequence. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqRemove(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            Removes element from sequence middle
            </summary>
            <param name="seq">Sequence. </param>
            <param name="index">Index of removed element. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqRemoveSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice)">
            <summary>
            Removes sequence slice
            </summary>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to remove. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPartition(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc)">
            <summary>
            Splits sequence into equivalence classes
            </summary>
            <param name="seq">The sequence to partition. </param>
            <param name="storage">The storage to store the sequence of equivalence classes. If it is null, the function uses seq->storage for output labels. </param>
            <param name="labels">Output parameter. Double pointer to the sequence of 0-based labels of input sequence elements. </param>
            <param name="is_equal">The relation function that should return non-zero if the two particular sequence elements are from the same class, and zero otherwise. The partitioning algorithm uses transitive closure of the relation function as equivalence criteria. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPartition``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc{``0})">
            <summary>
            Splits sequence into equivalence classes
            </summary>
            <param name="seq">The sequence to partition. </param>
            <param name="storage">The storage to store the sequence of equivalence classes. If it is null, the function uses seq->storage for output labels. </param>
            <param name="labels">Output parameter. Double pointer to the sequence of 0-based labels of input sequence elements. </param>
            <param name="is_equal">The relation function that should return non-zero if the two particular sequence elements are from the same class, and zero otherwise. The partitioning algorithm uses transitive closure of the relation function as equivalence criteria. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPop(OpenCvSharp.CvSeq)">
            <summary>
            Removes element from sequence end
            </summary>
            <param name="seq">Sequence. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPop``1(OpenCvSharp.CvSeq,``0@)">
            <summary>
            Removes element from sequence end
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">copied the removed element to this location. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopFront(OpenCvSharp.CvSeq)">
            <summary>
            Removes element from sequence beginning
            </summary>
            <param name="seq">Sequence. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopFront``1(OpenCvSharp.CvSeq,``0@)">
            <summary>
            Removes element from sequence beginning
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">copied the removed element to this location. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopMulti``1(OpenCvSharp.CvSeq,``0[]@,System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            Removes several elements from the either end of sequence
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="elements">Removed elements. </param>
            <param name="count">Number of elements to pop. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPush(OpenCvSharp.CvSeq)">
            <summary>
            allocates a space for one more element.
            </summary>
            <param name="seq">Sequence. </param>
            <returns>pointer to the allocated element. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPush``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            Adds element to sequence end
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">Added element. </param>
            <returns>pointer to the allocated element. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushFront(OpenCvSharp.CvSeq)">
            <summary>
            Adds element to sequence beginning
            </summary>
            <param name="seq">Sequence. </param>
            <returns>pointer to the added element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushFront``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            Adds element to sequence beginning
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="element">Added element. </param>
            <returns>pointer to the added element</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushMulti``1(OpenCvSharp.CvSeq,``0[],OpenCvSharp.InsertPosition)">
            <summary>
            Pushes several elements to the either end of sequence
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="elements">Added elements. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSearch(OpenCvSharp.CvSeq,System.IntPtr,OpenCvSharp.CvCmpFunc,System.Boolean,System.Int32@)">
            <summary>
            Searches element in sequence
            </summary>
            <param name="seq">The sequence </param>
            <param name="elem">The element to look for </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation</param>
            <param name="is_sorted">Whether the sequence is sorted or not. </param>
            <param name="elem_idx">Output parameter; index of the found element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSearch``1(OpenCvSharp.CvSeq,``0,OpenCvSharp.CvCmpFunc{``0},System.Boolean,System.Int32@)">
            <summary>
            Searches element in sequence
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">The sequence </param>
            <param name="elem">The element to look for </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation</param>
            <param name="is_sorted">Whether the sequence is sorted or not. </param>
            <param name="elem_idx">Output parameter; index of the found element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <param name="copy_data">The flag that indicates whether to copy the elements of the extracted slice (copy_data=true) or not (copy_data=false) </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            Makes separate header for the sequence slice
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">Sequence. </param>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <param name="copy_data">The flag that indicates whether to copy the elements of the extracted slice (copy_data=true) or not (copy_data=false) </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSort(OpenCvSharp.CvSeq,OpenCvSharp.CvCmpFunc)">
            <summary>
            Sorts sequence element using the specified comparison function
            </summary>
            <param name="seq">The sequence to sort </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation (see the above declaration and the example below) - similar function is used by qsort from C runtime except that in the latter userdata is not used </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSort``1(OpenCvSharp.CvSeq,OpenCvSharp.CvCmpFunc{``0})">
            <summary>
            Sorts sequence element using the specified comparison function
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="seq">The sequence to sort </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation (see the above declaration and the example below) - similar function is used by qsort from C runtime except that in the latter userdata is not used </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            Sets every element of array to given value
            </summary>
            <param name="arr">The destination array. </param>
            <param name="value">Fill value. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Sets every element of array to given value
            </summary>
            <param name="arr">The destination array. </param>
            <param name="value">Fill value. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set1D(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set2D(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetND(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,System.Int32[])">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="value">The assigned value </param>
            <param name="idx">Array of the element indices</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet)">
            <summary>
            Occupies a node in the set
            </summary>
            <param name="set_header">Set.</param>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet,OpenCvSharp.CvSetElem)">
            <summary>
            Occupies a node in the set
            </summary>
            <param name="set_header">Set.</param>
            <param name="elem">Optional input argument, inserted element. If not null, the function copies the data to the allocated node (The MSB of the first integer field is cleared after copying). </param>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet,OpenCvSharp.CvSetElem,OpenCvSharp.CvSetElem@)">
            <summary>
            Occupies a node in the set
            </summary>
            <param name="set_header">Set.</param>
            <param name="elem">Optional input argument, inserted element. If not null, the function copies the data to the allocated node (The MSB of the first integer field is cleared after copying). </param>
            <param name="inserted_elem">Optional output argument; the pointer to the allocated cell. </param>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetHistBinRanges(OpenCvSharp.CvHistogram,System.Single[][])">
            <summary>
            Sets bounds of histogram bins
            </summary>
            <param name="hist">Histogram. </param>
            <param name="ranges">Array of bin ranges arrays.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetHistBinRanges(OpenCvSharp.CvHistogram,System.Single[][],System.Boolean)">
            <summary>
            Sets bounds of histogram bins
            </summary>
            <param name="hist">Histogram. </param>
            <param name="ranges">Array of bin ranges arrays.</param>
            <param name="uniform">Uniformity flag.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetCaptureProperty(OpenCvSharp.CvCapture,System.Int32,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="property_id">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetCaptureProperty(OpenCvSharp.CvCapture,OpenCvSharp.CaptureProperty,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="property_id">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetData``1(OpenCvSharp.CvArr,``0[],System.Int32)">
            <summary>
            Assigns user data to the array header.
            Header should be initialized before using cvCreate*Header, cvInit*Header or cvMat (in case of matrix) function. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">Array header. </param>
            <param name="data">User data. </param>
            <param name="step">Full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetData(OpenCvSharp.CvArr,System.IntPtr,System.Int32)">
            <summary>
            Assigns user data to the array header.
            Header should be initialized before using cvCreate*Header, cvInit*Header or cvMat (in case of matrix) function. 
            </summary>
            <param name="arr">Array header. </param>
            <param name="data">User data. </param>
            <param name="step">Full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetErrMode(OpenCvSharp.ErrMode)">
            <summary>
            Sets error processing mode, returns previously used mode
            </summary>
            <param name="mode">The error mode. </param>
            <returns>previously used mode</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetErrStatus(OpenCvSharp.CvStatus)">
            <summary>
            Sets the error status
            </summary>
            <param name="status">The error status. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetIdentity(OpenCvSharp.CvArr)">
            <summary>
            Initializes scaled identity matrix
            </summary>
            <param name="mat">The matrix to initialize (not necessarily square). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetIdentity(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            Initializes scaled identity matrix
            </summary>
            <param name="mat">The matrix to initialize (not necessarily square). </param>
            <param name="value">The value to assign to the diagonal elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImageCOI(OpenCvSharp.IplImage,System.Int32)">
            <summary>
            Sets channel of interest to given value.
            Value 0 means that all channels are selected, 1 means that the first channel is selected etc.
            </summary>
            <param name="image">Image header. </param>
            <param name="coi">Channel of interest. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImageROI(OpenCvSharp.IplImage,OpenCvSharp.CvRect)">
            <summary>
            Sets image ROI to given rectangle
            </summary>
            <param name="image">Image header. </param>
            <param name="rect">ROI rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImagesForHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Assigns images to the hidden cascade
            </summary>
            <param name="cascade">Hidden Haar classifier cascade, created by cvCreateHidHaarClassifierCascade. </param>
            <param name="sum">Integral (sum) single-channel image of 32-bit integer format. This image as well as the two subsequent images are used for fast feature evaluation and brightness/contrast normalization. They all can be retrieved from input 8-bit or floating point single-channel image using The function cvIntegral. </param>
            <param name="sqsum">Square sum single-channel image of 64-bit floating-point format. </param>
            <param name="tilted_sum">Tilted sum single-channel image of 32-bit integer format. </param>
            <param name="scale">Window scale for the cascade. If scale=1, original window size is used (objects of that size are searched) - the same size as specified in cvLoadHaarClassifierCascade  (24x24 in case of "&lt;default_face_cascade&gt;"), if scale=2, a two times larger window is used (48x48 in case of default face cascade). While this will speed-up search about four times, faces smaller than 48x48 cannot be detected. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetMouseCallback(System.String,OpenCvSharp.CvMouseCallback)">
            <summary>
            Sets the callback function for mouse events occuting within the specified window.
            </summary>
            <param name="window_name">Name of the window. </param>
            <param name="on_mouse">Reference to the function to be called every time mouse event occurs in the specified window. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNew(OpenCvSharp.CvSet)">
            <summary>
            Adds element to set (fast variant)
            </summary>
            <param name="set_header">Set. </param>
            <returns>pointer to a new node</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNumThreads">
            <summary>
            Sets the number of threads.
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNumThreads(System.Int32)">
            <summary>
            Sets the number of threads.
            </summary>
            <param name="threads">The number of threads. 
            When the argument is zero or negative, and at the beginning of the program, the number of threads is set to the number of processors in the system, as returned by the function omp_get_num_procs() from OpenMP runtime. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetPostprocessFuncWin32(OpenCvSharp.CvWin32WindowCallback)">
            <summary>
            
            </summary>
            <param name="on_postprocess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetPreprocessFuncWin32(OpenCvSharp.CvWin32WindowCallback)">
            <summary>
            
            </summary>
            <param name="on_preprocess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal1D(OpenCvSharp.CvArr,System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal2D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRealND(OpenCvSharp.CvArr,System.Double,System.Int32[])">
            <summary>
            Change the particular array element
            </summary>
            <param name="arr">Input array. </param>
            <param name="value">The assigned value </param>
            <param name="idx">Array of the element indices </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRemove(OpenCvSharp.CvSet,System.Int32)">
            <summary>
            Removes element from set
            </summary>
            <param name="set_header">Set. </param>
            <param name="index">Index of the removed element. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRemoveByPtr(OpenCvSharp.CvSet,System.IntPtr)">
            <summary>
            Removes set element given its pointer
            </summary>
            <param name="set_header">Set. </param>
            <param name="elem">Removed element. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqBlockSize(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            Sets up sequence block size
            </summary>
            <param name="seq">Sequence. </param>
            <param name="delta_elems">Desirable sequence block size in elements. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqReaderPos(OpenCvSharp.CvSeqReader,System.Int32)">
            <summary>
            Moves the reader to specified position
            </summary>
            <param name="reader">Reader state. </param>
            <param name="index">The destination position. If the positioning mode is used (see the next parameter) the actual position will be index mod reader->seq->total. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqReaderPos(OpenCvSharp.CvSeqReader,System.Int32,System.Boolean)">
            <summary>
            Moves the reader to specified position
            </summary>
            <param name="reader">Reader state. </param>
            <param name="index">The destination position. If the positioning mode is used (see the next parameter) the actual position will be index mod reader->seq->total. </param>
            <param name="is_relative">If it is true, then index is a relative to the current position. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetTrackbarPos(System.String,System.String,System.Int32)">
            <summary>
            Sets the position of the specified trackbar.
            </summary>
            <param name="trackbar_name">Name of trackbar. </param>
            <param name="window_name">Name of the window which is the parent of trackbar. </param>
            <param name="pos">New position. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetWindowProperty(System.String,OpenCvSharp.WindowProperty,System.Double)">
            <summary>
            Set Property of the window
            </summary>
            <param name="name">Window name</param>
            <param name="prop_id">Property identifier</param>
            <param name="prop_value">New value of the specified property</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetZero(OpenCvSharp.CvArr)">
            <summary>
            Clears the array
            </summary>
            <param name="arr">array to be cleared. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Zero(OpenCvSharp.CvArr)">
            <summary>
            Clears the array
            </summary>
            <param name="arr">array to be cleared. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ShowImage(System.String,OpenCvSharp.CvArr)">
            <summary>
            Shows the image in the specified window. 
            If the window was created with CV_WINDOW_AUTOSIZE flag then the image is shown with its original size, otherwise the image is scaled to fit the window. 
            </summary>
            <param name="name">Name of the window. </param>
            <param name="image">Image to be shown. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Size(System.Int32,System.Int32)">
            <summary>
            Create CVSize structure and initializes it
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SliceLength(OpenCvSharp.CvSlice,OpenCvSharp.CvSeq)">
            <summary>
            Calculates the sequence slice length
            </summary>
            <param name="slice">Slice to measure</param>
            <param name="seq">Sequence</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
            <param name="param3">In case of Gaussian kernel this parameter may specify Gaussian sigma (standard deviation). If it is zero, it is calculated from the kernel size.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image. </param>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
            <param name="param3">In case of Gaussian kernel this parameter may specify Gaussian sigma (standard deviation). If it is zero, it is calculated from the kernel size.</param>
            <param name="param4">In case of non-square Gaussian kernel the parameter may be used to specify a different (from param3) sigma in the vertical direction. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="image">The source image or external energy field. </param>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weight of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weight of curvature energy, similar to alpha. </param>
            <param name="gamma">Weight of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="image">The source image or external energy field. </param>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weight of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weight of curvature energy, similar to alpha. </param>
            <param name="gamma">Weight of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
            <param name="calc_gradient">Gradient flag. If true, the function calculates gradient magnitude for every image pixel and consideres it as the energy field, otherwise the input image itself is considered. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="image">The source image or external energy field. </param>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weights of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weights of curvature energy, similar to alpha. </param>
            <param name="gamma">Weights of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="image">The source image or external energy field. </param>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weights of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weights of curvature energy, similar to alpha. </param>
            <param name="gamma">Weights of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
            <param name="calc_gradient">Gradient flag. If true, the function calculates gradient magnitude for every image pixel and consideres it as the energy field, otherwise the input image itself is considered. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sobel(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            Calculates first, second, third or mixed image derivatives using _extended Sobel operator
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="xorder">Order of the derivative x.</param>
            <param name="yorder">Order of the derivative y.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sobel(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates first, second, third or mixed image derivatives using extended Sobel operator
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="xorder">Order of the derivative x.</param>
            <param name="yorder">Order of the derivative y.</param>
            <param name="aperture_size">Size of the extended Sobel kernel.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Solve(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Solves linear system or least-squares problem
            </summary>
            <param name="src1">The source matrix. </param>
            <param name="src2">The right-hand part of the linear system. </param>
            <param name="dst">The output solution. </param>
            <returns>If CV_LU method is used, the function returns true if src1 is non-singular and false otherwise, in the latter case dst is not valid</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Solve(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            Solves linear system or least-squares problem
            </summary>
            <param name="src1">The source matrix. </param>
            <param name="src2">The right-hand part of the linear system. </param>
            <param name="dst">The output solution. </param>
            <param name="method">The solution (matrix inversion) method</param>
            <returns>If CV_LU method is used, the function returns true if src1 is non-singular and false otherwise, in the latter case dst is not valid</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SolveCubic(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds real roots of a cubic equation
            </summary>
            <param name="coeffs">The equation coefficients, array of 3 or 4 elements. </param>
            <param name="roots">The output array of real roots. Should have 3 elements. </param>
            <returns>the number of real roots found.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds real and complex roots of a polynomial equation with real coefficients
            </summary>
            <param name="coeffs">The (degree + 1)-length array of equation coefficients (CV_32FC1 or CV_64FC1). </param>
            <param name="roots">The degree-length output array of real or complex roots (CV_32FC2 or CV_64FC2). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Finds real and complex roots of a polynomial equation with real coefficients
            </summary>
            <param name="coeffs">The (degree + 1)-length array of equation coefficients (CV_32FC1 or CV_64FC1). </param>
            <param name="roots">The degree-length output array of real or complex roots (CV_32FC2 or CV_64FC2). </param>
            <param name="maxiter">The maximum number of iterations. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Finds real and complex roots of a polynomial equation with real coefficients
            </summary>
            <param name="coeffs">The (degree + 1)-length array of equation coefficients (CV_32FC1 or CV_64FC1). </param>
            <param name="roots">The degree-length output array of real or complex roots (CV_32FC2 or CV_64FC2). </param>
            <param name="maxiter">The maximum number of iterations. </param>
            <param name="fig">The required figures of precision required. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SortFlag)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
            <param name="flags">Sorting parameter</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Split(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Divides multi-channel array into several single-channel arrays or extracts a single channel from the array
            </summary>
            <param name="src">Source array. </param>
            <param name="dst0">Destination channel 0</param>
            <param name="dst1">Destination channel 1</param>
            <param name="dst2">Destination channel 2</param>
            <param name="dst3">Destination channel 3</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtPixToPlane(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Divides multi-channel array into several single-channel arrays or extracts a single channel from the array
            </summary>
            <param name="src">Source array. </param>
            <param name="dst0">Destination channel 0</param>
            <param name="dst1">Destination channel 1</param>
            <param name="dst2">Destination channel 2</param>
            <param name="dst3">Destination channel 3</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sqrt(System.Single)">
            <summary>
            Calculates square root
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds the square of source image to accumulator
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="sqsum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds the square of source image to accumulator
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="sqsum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
            <param name="suppressNonmaxSize"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarKeypoint(OpenCvSharp.CvPoint,System.Int32,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <param name="response"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartAppendToSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqWriter@)">
            <summary>
            Initializes process of writing data to sequence
            </summary>
            <param name="seq">Pointer to the sequence. </param>
            <param name="writer">Writer state; initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartNextStream(OpenCvSharp.CvFileStorage)">
            <summary>
            Starts the next stream
            </summary>
            <param name="fs">File storage. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadChainPoints(OpenCvSharp.CvChain,OpenCvSharp.CvChainPtReader)">
            <summary>
            
            </summary>
            <param name="chain">Pointer to chain.</param>
            <param name="reader">Chain reader state.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadRawData(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvSeqReader@)">
            <summary>
            Initializes file node sequence reader
            </summary>
            <param name="fs">File storage. </param>
            <param name="src">The file node (a sequence) to read numbers from. </param>
            <param name="reader">Output reference to the sequence reader. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqReader)">
            <summary>
            Initializes process of sequential reading from sequence
            </summary>
            <param name="seq">Sequence. </param>
            <param name="reader">Reader state; initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqReader,System.Boolean)">
            <summary>
            Initializes process of sequential reading from sequence
            </summary>
            <param name="seq">Sequence. </param>
            <param name="reader">Reader state; initialized by the function. </param>
            <param name="reverse">Determines the direction of the sequence traversal. If reverse is false, the reader is positioned at the first sequence element, otherwise it is positioned at the last element. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWindowThread">
            <summary>
            For MacOS or Linux, tries to start  thread to hande a window automatically (resizing, updating). Returns 0 if not supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteSeq(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeqWriter@)">
            <summary>
            Creates new sequence and initializes writer for it
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be equal to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header. The parameter value may not be less than sizeof(CvSeq). If a certain type or extension is specified, it must fit the base type header. </param>
            <param name="elem_size">Size of the sequence elements in bytes; must be consistent with the sequence type. For example, if the sequence of points is created (element type CV_SEQ_ELTYPE_POINT ), then the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
            <param name="writer">Writer state; initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteStruct(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.NodeType)">
            <summary>
            Starts writing a new structure
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written structure. The structure can be accessed by this name when the storage is read. </param>
            <param name="struct_flags">A combination one of the NodeType flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteStruct(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.NodeType,System.String)">
            <summary>
            Starts writing a new structure
            </summary>
            <param name="fs">File storage. </param>
            <param name="name">Name of the written structure. The structure can be accessed by this name when the storage is read. </param>
            <param name="struct_flags">A combination one of the NodeType flags</param>
            <param name="type_name">Optional parameter - the object type name. 
            In case of XML it is written as type_id attribute of the structure opening tag. 
            In case of YAML it is written after a colon following the structure name. Mainly it comes with user objects. 
            When the storage is read, the encoded type name is used to determine the object type. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Calibrates stereo camera
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points1">The joint matrix of corresponding image points in the views from the 1st camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="image_points2">The joint matrix of corresponding image points in the views from the 2nd camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="npoints">Vector containing numbers of points in each view, 1xM or Mx1, where M is the number of views. </param>
            <param name="camera_matrix1">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs1">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="camera_matrix2">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs2">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Calibrates stereo camera
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points1">The joint matrix of corresponding image points in the views from the 1st camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="image_points2">The joint matrix of corresponding image points in the views from the 2nd camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="npoints">Vector containing numbers of points in each view, 1xM or Mx1, where M is the number of views. </param>
            <param name="camera_matrix1">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs1">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="camera_matrix2">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs2">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="E">The optional output essential matrix </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Calibrates stereo camera
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points1">The joint matrix of corresponding image points in the views from the 1st camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="image_points2">The joint matrix of corresponding image points in the views from the 2nd camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="npoints">Vector containing numbers of points in each view, 1xM or Mx1, where M is the number of views. </param>
            <param name="camera_matrix1">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs1">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="camera_matrix2">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs2">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="E">The optional output essential matrix </param>
            <param name="F">The optional output fundamental matrix </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvTermCriteria)">
            <summary>
            Calibrates stereo camera
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points1">The joint matrix of corresponding image points in the views from the 1st camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="image_points2">The joint matrix of corresponding image points in the views from the 2nd camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="npoints">Vector containing numbers of points in each view, 1xM or Mx1, where M is the number of views. </param>
            <param name="camera_matrix1">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs1">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="camera_matrix2">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs2">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="E">The optional output essential matrix </param>
            <param name="F">The optional output fundamental matrix </param>
            <param name="term_crit">Termination criteria for the iterative optimiziation algorithm. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvTermCriteria,OpenCvSharp.CalibrationFlag)">
            <summary>
            Calibrates stereo camera
            </summary>
            <param name="object_points">The joint matrix of object points, 3xN or Nx3, where N is the total number of points in all views. </param>
            <param name="image_points1">The joint matrix of corresponding image points in the views from the 1st camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="image_points2">The joint matrix of corresponding image points in the views from the 2nd camera, 2xN or Nx2, where N is the total number of points in all views. </param>
            <param name="npoints">Vector containing numbers of points in each view, 1xM or Mx1, where M is the number of views. </param>
            <param name="camera_matrix1">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs1">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="camera_matrix2">The input/output camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. If CV_CALIB_USE_INTRINSIC_GUESS or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of the elements of the matrices must be initialized. </param>
            <param name="dist_coeffs2">The input/output vector of distortion coefficients for each camera, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image, used only to initialize intrinsic camera matrix. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="E">The optional output essential matrix </param>
            <param name="F">The optional output fundamental matrix </param>
            <param name="term_crit">Termination criteria for the iterative optimiziation algorithm. </param>
            <param name="flags">Different flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="Q">The optional output disparity-to-depth mapping matrix, 4x4</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="Q">The optional output disparity-to-depth mapping matrix, 4x4</param>
            <param name="flags">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="Q">The optional output disparity-to-depth mapping matrix, 4x4</param>
            <param name="flags">The operation flags</param>
            <param name="alpha"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CvSize)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="Q">The optional output disparity-to-depth mapping matrix, 4x4</param>
            <param name="flags">The operation flags</param>
            <param name="alpha"></param>
            <param name="new_image_size"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CvSize,OpenCvSharp.CvRect@,OpenCvSharp.CvRect@)">
            <summary>
            Computes rectification transform for stereo camera
            </summary>
            <param name="camera_matrix1">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="camera_matrix2">The camera matrix [fxk 0 cxk; 0 fyk cyk; 0 0 1]. </param>
            <param name="dist_coeffs1">The vector of distortion coefficients for camera1, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="dist_coeffs2">The vector of distortion coefficients for camera2, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="image_size">Size of the image used for stereo calibration. </param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras' coordinate systems </param>
            <param name="T">The translation vector between the cameras' coordinate systems. </param>
            <param name="R1">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="R2">3x3 Rectification transforms (rotation matrices) for the first and the second cameras, respectively </param>
            <param name="P1">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="P2">3x4 Projection matrices in the new (rectified) coordinate systems </param>
            <param name="Q">The optional output disparity-to-depth mapping matrix, 4x4</param>
            <param name="flags">The operation flags</param>
            <param name="alpha"></param>
            <param name="new_image_size"></param>
            <param name="valid_pix_ROI1"></param>
            <param name="valid_pix_ROI2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectifyUncalibrated(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes rectification transform for uncalibrated stereo camera
            </summary>
            <param name="points1">The 2 arrays of corresponding 2D points. </param>
            <param name="points2">The 2 arrays of corresponding 2D points. </param>
            <param name="F">Fundamental matrix. It can be computed using the same set of point pairs points1 and points2  using cvFindFundamentalMat</param>
            <param name="img_size">Size of the image. </param>
            <param name="H1">The rectification homography matrices for the first and for the second images. </param>
            <param name="H2">The rectification homography matrices for the first and for the second images. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectifyUncalibrated(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Double)">
            <summary>
            Computes rectification transform for uncalibrated stereo camera
            </summary>
            <param name="points1">The 2 arrays of corresponding 2D points. </param>
            <param name="points2">The 2 arrays of corresponding 2D points. </param>
            <param name="F">Fundamental matrix. It can be computed using the same set of point pairs points1 and points2  using cvFindFundamentalMat</param>
            <param name="img_size">Size of the image. </param>
            <param name="H1">The rectification homography matrices for the first and for the second images. </param>
            <param name="H2">The rectification homography matrices for the first and for the second images. </param>
            <param name="threshold">Optional threshold used to filter out the outliers. If the parameter is greater than zero, then all the point pairs that do not comply the epipolar geometry well enough (that is, the points for which fabs(points2[i]T*F*points1[i])&gt;threshold) are rejected prior to computing the homographies. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element difference between two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element difference between two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between array and scalar
            </summary>
            <param name="src">The source array. </param>
            <param name="value">Subtracted scalar. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between array and scalar
            </summary>
            <param name="src">The source array. </param>
            <param name="value">Subtracted scalar. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubRS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between scalar and array
            </summary>
            <param name="src">The first source array. </param>
            <param name="value">Scalar to subtract from. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubRS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between scalar and array
            </summary>
            <param name="src">The first source array. </param>
            <param name="value">Scalar to subtract from. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sum(OpenCvSharp.CvArr)">
            <summary>
            Summarizes array elements
            </summary>
            <param name="arr">The array. </param>
            <returns>sum S of array elements, independently for each channel</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DEdgeDst(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            Returns edge destination.
            </summary>
            <param name="edge">Subdivision edge (not a quad-edge) </param>
            <returns>The edge destination. If the edge is from dual subdivision and the virtual point coordinates are not calculated yet, the returned pointer may be null.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DEdgeOrg(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            Returns edge origin.
            </summary>
            <param name="edge">Subdivision edge (not a quad-edge) </param>
            <returns>The edge origin. If the edge is from dual subdivision and the virtual point coordinates are not calculated yet, the returned pointer may be null.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DGetEdge(OpenCvSharp.CvSubdiv2DEdge,OpenCvSharp.CvNextEdgeType)">
            <summary>
            Returns one of edges related to given.
            </summary>
            <param name="edge">Subdivision edge (not a quad-edge) </param>
            <param name="type">Specifies, which of related edges to return</param>
            <returns>one the edges related to the input edge</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DLocate(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@)">
            <summary>
            Inserts a single point to Delaunay triangulation
            </summary>
            <param name="subdiv">Delaunay or another subdivision. </param>
            <param name="pt">The point to locate. </param>
            <param name="edge">The output edge the point falls onto or right to. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DLocate(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@,OpenCvSharp.CvSubdiv2DPoint@)">
            <summary>
            Inserts a single point to Delaunay triangulation
            </summary>
            <param name="subdiv">Delaunay or another subdivision. </param>
            <param name="pt">The point to locate. </param>
            <param name="edge">The output edge the point falls onto or right to. </param>
            <param name="vertex">Optional output vertex double pointer the input point coinsides with. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DNextEdge(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DRotateEdge(OpenCvSharp.CvSubdiv2DEdge,OpenCvSharp.RotateEdgeFlag)">
            <summary>
            Returns another edge of the same quad-edge
            </summary>
            <param name="edge">Subdivision edge (not a quad-edge) </param>
            <param name="rotate">Specifies, which of edges of the same quad-edge as the input one to return</param>
            <returns>one the edges of the same quad-edge as the input edge. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DSymEdge(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SubdivDelaunay2DInsert(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Inserts a single point to Delaunay triangulation
            </summary>
            <param name="subdiv">Delaunay subdivision created by function cvCreateSubdivDelaunay2D. </param>
            <param name="pt">Inserted point. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SubstituteContour(OpenCvSharp.CvContourScanner,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint})">
            <summary>
            Replaces retrieved contour
            </summary>
            <param name="scanner">Contour scanner initialized by the function cvStartFindContours . </param>
            <param name="new_contour">Substituting contour. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SURFParams(System.Double,System.Boolean)">
            <summary>
            Creates SURF default parameters
            </summary>
            <param name="hessianThreshold">Only features with keypoint.hessian larger than that are extracted. </param>
            <param name="extended">false means basic descriptors (64 elements each), true means _extended descriptors (128 elements each) </param>
            <returns>default parameters</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SVBkSb(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            Performs singular value back substitution
            </summary>
            <param name="W">Matrix or vector of singular values. </param>
            <param name="U">Left orthogonal matrix (transposed, perhaps) </param>
            <param name="V">Right orthogonal matrix (transposed, perhaps) </param>
            <param name="B">The matrix to multiply the pseudo-inverse of the original matrix A by. This is the optional parameter. If it is omitted then it is assumed to be an identity matrix of an appropriate size (So X will be the reconstructed pseudo-inverse of A). </param>
            <param name="X">The destination matrix: result of back substitution. </param>
            <param name="flags">Operation flags, should match exactly to the flags passed to cvSVD. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="A">Source M×N matrix. </param>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="A">Source M×N matrix. </param>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="A">Source M×N matrix. </param>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
            <param name="V">Optional right orthogonal matrix (N×N) </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="A">Source M×N matrix. </param>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
            <param name="V">Optional right orthogonal matrix (N×N) </param>
            <param name="flags">Operation flags</param>
        </member>
        <member name="M:OpenCvSharp.Cv.BackProjectPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Reconstructs the original vectors from the projection coefficients
            </summary>
            <param name="proj">The input data; in the same format as result in cvProjectPCA. </param>
            <param name="avg">The mean (average) vector. If it is a single-row vector, it means that the output vectors are stored as rows of result; otherwise, it should be a single-column vector, then the vectors are stored as columns of result. </param>
            <param name="eigenvects">The eigenvectors (principal components); one vector per row. </param>
            <param name="result">The output matrix of reconstructed vectors. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookDiff(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookDiff(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(OpenCvSharp.CvArr)">
            <summary>
            Calculates up-right bounding rectangle of point set.
            </summary>
            <param name="points">Either a 2D point set, represented as a sequence (CvSeq, CvContour) or vector (CvMat) of points, 
            or 8-bit single-channel mask image (CvMat, IplImage), in which non-zero pixels are considered. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            Calculates up-right bounding rectangle of point set.
            </summary>
            <param name="points">Either a 2D point set, represented as a sequence (CvSeq, CvContour) or vector (CvMat) of points, 
            or 8-bit single-channel mask image (CvMat, IplImage), in which non-zero pixels are considered. </param>
            <param name="update">The update flag</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint})">
            <summary>
            Calculates up-right bounding rectangle of point set.
            </summary>
            <param name="points">An IEnumerable&lt;CvPoint&gt; object (ex. CvPoint[], List&lt;CvPoint&gt;, ....)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoxPoints(OpenCvSharp.CvBox2D,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            Finds box vertices
            </summary>
            <param name="box">Box</param>
            <param name="pt">Array of vertices</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rand(OpenCvSharp.CvRandState,OpenCvSharp.CvArr)">
            <summary>
            Fills array with random numbers
            </summary>
            <param name="state">CvRandState Structure</param>
            <param name="arr">The array to randomize</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandArr(OpenCvSharp.CvRNG,OpenCvSharp.CvArr,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills array with random numbers and updates the RNG state
            </summary>
            <param name="rng">RNG state initialized by cvRNG. </param>
            <param name="arr">The destination array. </param>
            <param name="dist_type">Distribution type.</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInit(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32)">
            <summary>
            Initialize CvRandState structure
            </summary>
            <param name="state">CvRandState structure to initialize</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="seed">Seed value</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInit(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            Initialize CvRandState structure
            </summary>
            <param name="state">CvRandState structure to initialize</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="seed">Seed value</param>
            <param name="disttype">Type of distribution</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInt(OpenCvSharp.CvRNG)">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <param name="rng">RNG state initialized by RandInit and, optionally, customized by RandSetRange (though, the latter function does not affect on the discussed function outcome). </param>
            <returns>uniformly-distributed random 32-bit unsigned integer</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RandReal(OpenCvSharp.CvRNG)">
            <summary>
            Returns floating-point random number and updates RNG
            </summary>
            <param name="rng">RNG state initialized by cvRNG. </param>
            <returns>uniformly-distributed random floating-point number from 0..1 range (1 is not included).</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RANSACUpdateNumIters(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            updates the number of RANSAC iterations
            </summary>
            <param name="p"></param>
            <param name="err_prob"></param>
            <param name="model_points"></param>
            <param name="max_iters"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RandSetRange(OpenCvSharp.CvRandState,System.Double,System.Double)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="state">CvRandState structure to be opdated</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandSetRange(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="state">CvRandState structure to be opdated</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="index">Index dimension to initialize, -1 = all</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr)">
            <summary>
            Randomly shuffles the array elements
            </summary>
            <param name="mat">The input/output matrix. It is shuffled in-place. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr,OpenCvSharp.CvRNG)">
            <summary>
            Randomly shuffles the array elements
            </summary>
            <param name="mat">The input/output matrix. It is shuffled in-place. </param>
            <param name="rng">The Random Number Generator  used to shuffle the elements. When the pointer is null, a temporary RNG will be created and used. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr,OpenCvSharp.CvRNG,System.Double)">
            <summary>
            Randomly shuffles the array elements
            </summary>
            <param name="mat">The input/output matrix. It is shuffled in-place. </param>
            <param name="rng">The Random Number Generator  used to shuffle the elements. When the pointer is null, a temporary RNG will be created and used. </param>
            <param name="iter_factor">The relative parameter that characterizes intensity of the shuffling performed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Range(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Fills matrix with given range of numbers as following:
            arr(i,j) = (end-start) * (i*cols(arr)+j) / (cols(arr)*rows(arr))
            </summary>
            <param name="mat">The matrix to initialize. It should be single-channel 32-bit, integer or floating-point. </param>
            <param name="start">The lower inclusive boundary of the range. </param>
            <param name="end">The upper exclusive boundary of the range. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Read``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Decodes object and returns pointer to it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">File storage. </param>
            <param name="node">The root object node. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadByName``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds object and decodes it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadChainPoint(OpenCvSharp.CvChainPtReader)">
            <summary>
            Gets next chain point
            </summary>
            <param name="reader">Chain reader state.</param>
            <returns>Current chain point.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadInt(OpenCvSharp.CvFileNode)">
            <summary>
            Retrieves integer value from file node
            </summary>
            <param name="node">File node. </param>
            <returns>integer that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadInt(OpenCvSharp.CvFileNode,System.Int32)">
            <summary>
            Retrieves integer value from file node
            </summary>
            <param name="node">File node. </param>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>integer that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadIntByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadIntByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.Int32)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRawData``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,``0[]@,System.String)">
            <summary>
            Reads multiple numbers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">File storage. </param>
            <param name="src">The file node (a sequence) to read numbers from. </param>
            <param name="dst">Reference to the destination array. </param>
            <param name="dt">Specification of each array element. It has the same format as in cvWriteRawData. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRawDataSlice``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvSeqReader,System.Int32,``0[]@,System.String)">
            <summary>
            Initializes file node sequence reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">File storage. </param>
            <param name="reader">The sequence reader. Initialize it with cvStartReadRawData. </param>
            <param name="count">The number of elements to read. </param>
            <param name="dst">Destination array. </param>
            <param name="dt">Specification of each array element. It has the same format as in cvWriteRawData. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadReal(OpenCvSharp.CvFileNode)">
            <summary>
            Retrieves floating-point value from file node
            </summary>
            <param name="node">File node. </param>
            <returns>returns floating-point value that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadReal(OpenCvSharp.CvFileNode,System.Double)">
            <summary>
            Retrieves floating-point value from file node
            </summary>
            <param name="node">File node. </param>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>returns floating-point value that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRealByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRealByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.Double)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadString(OpenCvSharp.CvFileNode)">
            <summary>
            Retrieves text string from file node
            </summary>
            <param name="node">File node. </param>
            <returns>returns text string that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadString(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Retrieves text string from file node
            </summary>
            <param name="node">File node. </param>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>returns text string that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadStringByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadStringByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="fs">File storage. </param>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RealScalar(System.Double)">
            <summary>
            Initializes val[0] with val0, val[1]...val[3] with zeros
            </summary>
            <param name="val0"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(OpenCvSharp.CvErrorCallback)">
            <summary>
            Sets a new error handler
            </summary>
            <param name="error_handler">The new error_handler</param>
            <returns>Current error handler</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(OpenCvSharp.CvErrorCallback,System.IntPtr,System.IntPtr@)">
            <summary>
            Sets a new error handler
            </summary>
            <param name="error_handler">The new error_handler</param>
            <param name="userdata">Arbitrary pointer that is transparently passed to the error handler</param>
            <param name="prev_userdata">Pointer to the previously assigned user data pointer</param>
            <returns>Current error handler</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(System.IntPtr)">
            <summary>
            Sets a new error handler
            </summary>
            <param name="error_handler">The new error_handler</param>
            <returns>Current error handler</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Sets a new error handler
            </summary>
            <param name="error_handler">The new error_handler</param>
            <param name="userdata">Arbitrary pointer that is transparently passed to the error handler</param>
            <param name="prev_userdata">Pointer to the previously assigned user data pointer</param>
            <returns>Current error handler</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="src">The input matrix. </param>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="src">The input matrix. </param>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
            <param name="dim">The dimension index along which the matrix is reduce. 0 means that the matrix is reduced to a single row, 1 means that the matrix is reduced to a single column. -1 means that the dimension is chosen automatically by analysing the dst size. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="src">The input matrix. </param>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
            <param name="dim">The dimension index along which the matrix is reduce. 0 means that the matrix is reduced to a single row, 1 means that the matrix is reduced to a single column. -1 means that the dimension is chosen automatically by analysing the dst size. </param>
            <param name="type">The reduction operation.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RegisterType(OpenCvSharp.CvTypeInfo)">
            <summary>
            Registers new type
            </summary>
            <param name="info">Type info structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Release(System.IntPtr@)">
            <summary>
            Releases the object
            </summary>
            <param name="struct_ptr">Double pointer to the object. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Release(OpenCvSharp.ICvPtrHolder@)">
            <summary>
            Releases the object
            </summary>
            <param name="struct_ptr">Double pointer to the object. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseBGCodeBookModel(OpenCvSharp.CvBGCodeBookModel)">
            <summary>
            Deallocates BGCodeBookModel structure
            </summary>
            <param name="model">Structure to be released. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseCapture(OpenCvSharp.CvCapture)">
            <summary>
            Releases the CvCapture structure allocated by cvCreateFileCapture or cvCreateCameraCapture. 
            </summary>
            <param name="capture">Reference to video capturing structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseConDensation(OpenCvSharp.CvConDensation)">
            <summary>
            Deallocates ConDensation filter structure
            </summary>
            <param name="condens">Structure to be released. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseData(OpenCvSharp.CvArr)">
            <summary>
            Releases array data.
            </summary>
            <param name="arr">Array header.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFaceTracker(OpenCvSharp.CvFaceTracker)">
            <summary>
            
            </summary>
            <param name="ppFaceTracker"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFeatureTree(OpenCvSharp.CvFeatureTree)">
            <summary>
            Destroys a tree of feature vectors
            </summary>
            <param name="tr">pointer to tree being destroyed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFileStorage(OpenCvSharp.CvFileStorage)">
            <summary>
            Releases file storage
            </summary>
            <param name="fs">Reference to the released file storage. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseGraphScanner(OpenCvSharp.CvGraphScanner)">
            <summary>
            Finishes graph traversal procedure
            </summary>
            <param name="scanner">Reference to graph traverser. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade)">
            <summary>
            Releases haar classifier cascade
            </summary>
            <param name="cascade">Double pointer to the released cascade. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseHist(OpenCvSharp.CvHistogram)">
            <summary>
            Releases the histogram (header and the data).
            </summary>
            <param name="hist">Double pointer to the released histogram. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseImage(OpenCvSharp.IplImage)">
            <summary>
            Releases header and image data
            </summary>
            <param name="image">Reference to the header of the deallocated image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseImageHeader(OpenCvSharp.IplImage)">
            <summary>
            Releases IplImage header
            </summary>
            <param name="image">Reference to the deallocated header. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseKalman(OpenCvSharp.CvKalman)">
            <summary>
            Deallocates Kalman filter structure
            </summary>
            <param name="kalman">Kalman filter structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseLatentSvmDetector(OpenCvSharp.CvLatentSvmDetector)">
            <summary>
            release memory allocated for CvLatentSvmDetector structure
            </summary>
            <param name="detector"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseLSH(OpenCvSharp.CvLSH)">
            <summary>
            Free the given LSH structure.
            </summary>
            <param name="lsh"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMat(OpenCvSharp.CvMat)">
            <summary>
            Deallocates matrix.
            </summary>
            <param name="mat">Reference to the matrix.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMatND(OpenCvSharp.CvMatND)">
            <summary>
            Deallocates multi-dimensional array
            </summary>
            <param name="mat">Reference to the array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            Releases memory storage
            </summary>
            <param name="storage">Pointer to the released storage. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleasePOSITObject(OpenCvSharp.CvPOSITObject)">
            <summary>
            Deallocates 3D object structure
            </summary>
            <param name="posit_object">Reference to CvPOSIT structure.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleasePyramid(OpenCvSharp.CvMat[],System.Int32)">
            <summary>
            Releases pyramid
            </summary>
            <param name="pyramid"></param>
            <param name="extra_layers"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMatND(OpenCvSharp.CvSparseMat)">
            <summary>
            Deallocates sparse array
            </summary>
            <param name="mat">Reference to the array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStereoBMState(OpenCvSharp.CvStereoBMState)">
            <summary>
            Releases block matching stereo correspondence structure
            </summary>
            <param name="state">Reference to the released structure</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStereoGCState(OpenCvSharp.CvStereoGCState)">
            <summary>
            Releases the state structure of the graph cut-based stereo correspondence algorithm
            </summary>
            <param name="state">Reference to the released structure</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStructuringElement(OpenCvSharp.IplConvKernel)">
            <summary>
            Releases the structure IplConvKernel that is no longer needed. 
            If *element is NULL, the function has no effect.
            </summary>
            <param name="element">Pointer to the deleted structuring element. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseVideoWriter(OpenCvSharp.CvVideoWriter)">
            <summary>
            Finishes writing to video file and releases the structure. 
            </summary>
            <param name="writer">Reference to video file writer structure. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
            <param name="flags">A combination of interpolation method and the optional flag(s).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
            <param name="flags">A combination of interpolation method and the optional flag(s).</param>
            <param name="fillval">A value used to fill outliers. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RemoveNodeFromTree``1(OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0})">
            <summary>
            Removes node from tree
            </summary>
            <param name="node">The removed node. </param>
            <param name="frame">The top level node. If node->v_prev = null and node->h_prev is null (i.e. if node is the first child of frame), 
            frame->v_next is set to node->h_next (i.e. the first child or frame is changed). </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Repeat(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Fill destination array with tiled source array
            </summary>
            <param name="src">Source array, image or matrix. </param>
            <param name="dst">Destination array, image or matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReprojectImageTo3D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Reprojects disparity image to 3D space
            </summary>
            <param name="disparityImage">Disparity map. </param>
            <param name="_3dImage">3-channel, 16-bit integer or 32-bit floating-point image - the output map of 3D points. </param>
            <param name="Q">The reprojection 4x4 matrix. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ResetImageROI(OpenCvSharp.IplImage)">
            <summary>
            Releases image ROI. After that the whole image is considered selected. 
            </summary>
            <param name="image">Image header. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_rows">New number of rows. new_rows = 0 means that number of rows remains unchanged unless it needs to be changed according to new_cn value. destination array to be changed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="arr">Input array. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_rows">New number of rows. new_rows = 0 means that number of rows remains unchanged unless it needs to be changed according to new_cn value. destination array to be changed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReshapeMatND``1(OpenCvSharp.CvArr,System.Int32,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Changes shape of multi-dimensional array w/o copying data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">Input array. </param>
            <param name="sizeof_header">Size of output header to distinguish between IplImage, CvMat and CvMatND output headers. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_dims">New number of dimensions. new_dims = 0 means that number of dimensions remains the same. </param>
            <param name="new_sizes">Array of new dimension sizes. Only new_dims-1 values are used, because the total number of elements must remain the same. Thus, if new_dims = 1, new_sizes array is not used </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReshapeND``1(OpenCvSharp.CvArr,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Changes shape of multi-dimensional array w/o copying data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">Input array. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_dims">New number of dimensions. new_dims = 0 means that number of dimensions remains the same. </param>
            <param name="new_sizes">Array of new dimension sizes. Only new_dims-1 values are used, because the total number of elements must remain the same. Thus, if new_dims = 1, new_sizes array is not used </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Resize(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Resizes image src so that it fits exactly to dst. 
            If ROI is set, the function consideres the ROI as supported as usual.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Resize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            Resizes image src so that it fits exactly to dst. 
            If ROI is set, the function consideres the ROI as supported as usual.
            </summary>
            <param name="src">Source image. </param>
            <param name="dst">Destination image. </param>
            <param name="interpolation">Interpolation method.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ResizeWindow(System.String,System.Int32,System.Int32)">
            <summary>
            Changes size of the window. 
            </summary>
            <param name="name">Name of the window to be resized. </param>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RestoreMemStoragePos(OpenCvSharp.CvMemStorage,OpenCvSharp.CvMemStoragePos)">
            <summary>
            Restores memory storage position
            </summary>
            <param name="storage">Memory storage</param>
            <param name="pos">New storage top position</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture,System.Int32)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture,OpenCvSharp.CameraChannels)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="capture">video capturing structure. </param>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RNG">
            <summary>
            Initializes random number generator state
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RNG(System.UInt64)">
            <summary>
            Initializes random number generator state
            </summary>
            <param name="seed">64-bit value used to initiate a random sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Converts rotation matrix to rotation vector or vice versa
            </summary>
            <param name="src">The input rotation vector (3x1 or 1x3) or rotation matrix (3x3). </param>
            <param name="dst">The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Converts rotation matrix to rotation vector or vice versa
            </summary>
            <param name="src">The input rotation vector (3x1 or 1x3) or rotation matrix (3x3). </param>
            <param name="dst">The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively. </param>
            <param name="jacobian">Optional output Jacobian matrix, 3x9 or 9x3 - partial derivatives of the output array components w.r.t the input array components. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Round(System.Double)">
            <summary>
            Returns the nearest integer value to the argument.
            </summary>
            <param name="value">The input floating-point value </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixM">The 3x3 input matrix M</param>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixM">The 3x3 input matrix M</param>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
            <param name="matrixQx">Optional 3x3 rotation matrix around x-axis</param>
            <param name="matrixQy">Optional 3x3 rotation matrix around y-axis</param>
            <param name="matrixQz">Optional 3x3 rotation matrix around z-axis</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixM">The 3x3 input matrix M</param>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
            <param name="matrixQx">Optional 3x3 rotation matrix around x-axis</param>
            <param name="matrixQy">Optional 3x3 rotation matrix around y-axis</param>
            <param name="matrixQz">Optional 3x3 rotation matrix around z-axis</param>
            <param name="eulerAngles">Optional 3 points containing the three Euler angles of rotation</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RunHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvPoint)">
            <summary>
            Runs cascade of boosted classifier at given image location
            </summary>
            <param name="cascade">Haar classifier cascade. </param>
            <param name="pt">Top-left corner of the analyzed region. Size of the region is a original window size scaled by the currenly set scale. The current window size may be retrieved using  cvGetHaarClassifierCascadeWindowSize function. </param>
            <returns>positive value if the analyzed rectangle passed all the classifier stages (it is a candidate) and zero or negative value otherwise. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RunHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvPoint,System.Boolean)">
            <summary>
            Runs cascade of boosted classifier at given image location
            </summary>
            <param name="cascade">Haar classifier cascade. </param>
            <param name="pt">Top-left corner of the analyzed region. Size of the region is a original window size scaled by the currenly set scale. The current window size may be retrieved using  cvGetHaarClassifierCascadeWindowSize function. </param>
            <param name="start_stage">Initial zero-based index of the cascade stage to start from. The function assumes that all the previous stages are passed. This feature is used internally by  cvHaarDetectObjects for better processor cache utilization. </param>
            <returns>positive value if the analyzed rectangle passed all the classifier stages (it is a candidate) and zero or negative value otherwise. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RunningAvg(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Calculates weighted sum of input image image and the accumulator acc so that acc becomes a running average of frame sequence:
            acc(x,y)=(1-α)•acc(x,y) + α•image(x,y) if mask(x,y)!=null
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="acc">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="alpha">Weight of input image. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.RunningAvg(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Calculates weighted sum of input image image and the accumulator acc so that acc becomes a running average of frame sequence:
            acc(x,y)=(1-α)•acc(x,y) + α•image(x,y) if mask(x,y)!=null
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point (each channel of multi-channel image is processed independently). </param>
            <param name="acc">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="alpha">Weight of input image. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AbsDiff(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute difference between two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Abs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute difference between array and scalar
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AbsDiffS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            Calculates absolute difference between array and scalar
            </summary>
            <param name="src">The source array. </param>
            <param name="dst">The destination array. </param>
            <param name="value">The scalar. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds frame to accumulator
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point. (each channel of multi-channel image is processed independently). </param>
            <param name="sum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds frame to accumulator
            </summary>
            <param name="image">Input image, 1- or 3-channel, 8-bit or 32-bit floating point. (each channel of multi-channel image is processed independently). </param>
            <param name="sum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
            <param name="block_size">The size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, ... </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
            <param name="block_size">The size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, ... </param>
            <param name="param1">The method-dependent parameter. For the methods CV_ADAPTIVE_THRESH_MEAN_C and CV_ADAPTIVE_THRESH_GAUSSIAN_C it is a constant subtracted from mean or weighted mean (see the discussion), though it may be negative. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element sum of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element sum of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes sum of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Added scalar. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes sum of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Added scalar. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddText(OpenCvSharp.CvArr,System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="img">Image where the text should be drawn</param>
            <param name="text">Text to write on the image</param>
            <param name="location">Point(x,y) where the text should start on the image</param>
            <param name="font">Font to use to draw the text</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddWeighted(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Computes weighted sum of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="alpha">Weight of the first array elements. </param>
            <param name="src2">The second source array. </param>
            <param name="beta">Weight of the second array elements. </param>
            <param name="gamma">Scalar, added to each sum. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Alloc(System.UInt32)">
            <summary>
            Allocates memory buffer
            </summary>
            <param name="size">Buffer size in bytes. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of two arrays
            </summary>
            <param name="src1">The first source array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AndS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AndS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of array and scalar
            </summary>
            <param name="src1">The source array. </param>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="src_seq">Freeman chain(s) </param>
            <param name="storage">Storage location for the resulting polylines. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="src_seq">Freeman chain(s) </param>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            /// <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="src_seq">Freeman chain(s) </param>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="src_seq">Freeman chain(s) </param>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <param name="minimal_perimeter">Approximates only those contours whose perimeters are not less than minimal_perimeter. Other chains are removed from the resulting structure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32,System.Boolean)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="src_seq">Freeman chain(s) </param>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <param name="minimal_perimeter">Approximates only those contours whose perimeters are not less than minimal_perimeter. Other chains are removed from the resulting structure. </param>
            <param name="recursive">If true, the function approximates all chains that access can be obtained to from src_seq by h_next or v_next links. If false, the single chain is approximated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxPoly(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double)">
            <summary>
            Approximates polygonal curve(s) with desired precision.
            </summary>
            <param name="src_seq">Sequence of array of points. </param>
            <param name="header_size">Header size of approximated curve[s]. </param>
            <param name="storage">Container for approximated contours. If it is null, the input sequences' storage is used. </param>
            <param name="method">Approximation method; only ApproxPolyMethod.DP is supported, that corresponds to Douglas-Peucker algorithm. </param>
            <param name="parameter">Method-specific parameter; in case of CV_POLY_APPROX_DP it is a desired approximation accuracy. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxPoly(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double,System.Boolean)">
            <summary>
            Approximates polygonal curve(s) with desired precision.
            </summary>
            <param name="src_seq">Sequence of array of points. </param>
            <param name="header_size">Header size of approximated curve[s]. </param>
            <param name="storage">Container for approximated contours. If it is null, the input sequences' storage is used. </param>
            <param name="method">Approximation method; only ApproxPolyMethod.DP is supported, that corresponds to Douglas-Peucker algorithm. </param>
            <param name="parameter">Method-specific parameter; in case of CV_POLY_APPROX_DP it is a desired approximation accuracy. </param>
            <param name="parameter2">If case if src_seq is sequence it means whether the single sequence should be approximated 
            or all sequences on the same level or below src_seq (see cvFindContours for description of hierarchical contour structures). 
            And if src_seq is array (CvMat*) of points, the parameter specifies whether the curve is closed (parameter2==true) or not (parameter2==false). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr)">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <param name="curve">Sequence or array of the curve points. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr,OpenCvSharp.CvSlice)">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <param name="curve">Sequence or array of the curve points. </param>
            <param name="slice">Starting and ending points of the curve, by default the whole curve length is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr,OpenCvSharp.CvSlice,System.Int32)">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <param name="curve">Sequence or array of the curve points. </param>
            <param name="slice">Starting and ending points of the curve, by default the whole curve length is calculated. </param>
            <param name="is_closed">Indicates whether the curve is closed or not. There are 3 cases:
            * is_closed=0 - the curve is assumed to be unclosed.
            * is_closed&gt;0 - the curve is assumed to be closed.
            * is_closed&lt;0 - if curve is sequence, the flag CV_SEQ_FLAG_CLOSED of ((CvSeq*)curve)-&gt;flags is checked to determine if the curve is closed or not, otherwise (curve is represented by array (CvMat*) of points) it is assumed to be unclosed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList">
            <summary>
            initializes CvAttrList structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList(System.String[])">
            <summary>
            initializes CvAttrList structure
            </summary>
            <param name="attr">array of (attribute_name,attribute_value) pairs</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList(System.String[],OpenCvSharp.Pointer{OpenCvSharp.CvAttrList})">
            <summary>
            initializes CvAttrList structure
            </summary>
            <param name="attr">array of (attribute_name,attribute_value) pairs</param>
            <param name="next">pointer to next chunk of the attributes list</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Avg(OpenCvSharp.CvArr)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="arr">The array. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Avg(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="arr">The array. </param>
            <param name="mask">The optional operation mask. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AvgSdv(OpenCvSharp.CvArr,OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="arr">The array. </param>
            <param name="mean">Pointer to the mean value, may be null if it is not needed. </param>
            <param name="std_dev">Pointer to the standard deviation. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AvgSdv(OpenCvSharp.CvArr,OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@,OpenCvSharp.CvArr)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="arr">The array. </param>
            <param name="mean">Pointer to the mean value, may be null if it is not needed. </param>
            <param name="std_dev">Pointer to the standard deviation. </param>
            <param name="mask">The optional operation mask. </param>
        </member>
        <member name="F:OpenCvSharp.CvModelEstimator2._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.#ctor(System.Int32,OpenCvSharp.CvSize,System.Int32)">
            <summary>
            
            </summary>
            <param name="_modelPoints"></param>
            <param name="_modelSize"></param>
            <param name="_maxBasicSolutions"></param>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.RunKernel(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.Refine(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <param name="maxIters"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.SetSeed(System.Int64)">
            <summary>
            
            </summary>
            <param name="seed"></param>
        </member>
        <member name="T:OpenCvSharp.CvHomographyEstimator">
            <summary>
            CvLevMarq
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvHomographyEstimator._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="_modelPoints"></param>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.RunKernel(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.Refine(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <param name="maxIters"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.Util">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.CopyMemory(System.Void*,System.Void*,System.UInt32)">
            <summary>
            
            </summary>
            <param name="outDest"></param>
            <param name="inSrc"></param>
            <param name="inNumOfBytes"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.ZeroMemory(System.Void*,System.UInt32)">
            <summary>
            
            </summary>
            <param name="outDest"></param>
            <param name="inNumOfBytes"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.Cast``1(System.IntPtr)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.ToObject``1(System.IntPtr)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.CheckType(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="test"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.SizeOf(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.Pointer`1">
            <summary>
            Structure which represents T*
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OpenCvSharp.Pointer`1.address">
            <summary>
            IntPtr
            </summary>
        </member>
        <member name="F:OpenCvSharp.Pointer`1.Zero">
            <summary>
            Null pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.op_Implicit(OpenCvSharp.Pointer{`0})~System.IntPtr">
            <summary>
            implicit cast to IntPtr
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.op_Explicit(OpenCvSharp.Pointer{`0})~`0">
            <summary>
            explicit cast to T
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Pointer`1.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:OpenCvSharp.Pointer`1.Entity">
            <summary>
            entity of the pointer (*T)
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.Platform">
            <summary>
            Provides information for the platform which the user is using 
            </summary>
        </member>
        <member name="F:OpenCvSharp.Utilities.Platform.OS">
            <summary>
            OS type
            </summary>
        </member>
        <member name="F:OpenCvSharp.Utilities.Platform.Runtime">
            <summary>
            Runtime type
            </summary>
        </member>
        <member name="T:OpenCvSharp.SVDFlag">
            <summary>
            Operation flags for cvSVD
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.Zero">
            <summary>
            No flags
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.ModifyA">
            <summary>
            enables modification of matrix src1 during the operation. It speeds up the processing. 
            [CV_SVD_MODIFY_A]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.U_T">
            <summary>
            means that the transposed matrix U is returned. Specifying the flag speeds up the processing. 
            [CV_SVD_U_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.V_T">
            <summary>
            means that the transposed matrix V is returned. Specifying the flag speeds up the processing. 
            [CV_SVD_V_T]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MatchShapesMethod">
            <summary>
            Comparison methods for cvMatchShapes
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I1">
            <summary>
            [CV_CONTOURS_MATCH_I1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I2">
            <summary>
            [CV_CONTOURS_MATCH_I2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I3">
            <summary>
            [CV_CONTOURS_MATCH_I3]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CheckArrFlag">
            <summary>
            The operation flags for cvCheckArr
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.NanOrInfinity">
            <summary>
            The function just checks that every element is neither NaN nor ±Infinity.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.Range">
            <summary>
            The function checks that every value of array is within [minVal,maxVal) range.
            [CV_CHECK_RANGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.Quiet">
            <summary>
            The function does not raises an error if an element is invalid or out of range.
            [CV_CHECK_QUIET]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureDevice">
            <summary>
            Camera device types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Any">
            <summary>
            autodetect
            [CV_CAP_ANY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.MIL">
            <summary>
            MIL proprietary drivers
            [CV_CAP_MIL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.VFW">
            <summary>
            platform native
            [CV_CAP_VFW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.V4L">
            <summary>
            platform native
            [CV_CAP_V4L]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.V4L2">
            <summary>
            platform native
            [CV_CAP_V4L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Firewire">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_FIREWIRE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.IEEE1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_IEEE1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Fireware">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_FIREWARE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.DC1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_DC1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.CMU1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_CMU1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Stereo">
            <summary>
            TYZX proprietary drivers
            [CV_CAP_STEREO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX">
            <summary>
            TYZX proprietary drivers
            [CV_CAP_TYZX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Left">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Right">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_RIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Color">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_COLOR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Z">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_Z]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.QuickTime">
            <summary>
            QuickTime
            [CV_CAP_QT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Unicap">
            <summary>
            Unicap drivers
            [CV_CAP_UNICAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.DShow">
            <summary>
            DirectShow (via videoInput)
            [CV_CAP_DSHOW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.PvAPI">
            <summary>
            PvAPI, Prosilica GigE SDK
            [CV_CAP_PVAPI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.OpenNI">
            <summary>
            OpenNI (for Kinect)
            [CV_CAP_OPENNI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Android">
            <summary>
            Android
            [CV_CAP_ANDROID]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.XIAPI">
            <summary>
            XIMEA Camera API
            [CV_CAP_XIAPI]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFaceData">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.MouthRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.LeftEyeRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.RightEyeRect">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.#ctor(OpenCvSharp.CvRect,OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="mouthRect"></param>
            <param name="leftEyeRect"></param>
            <param name="rightEyeRect"></param>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.Equals(OpenCvSharp.CvFaceData)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Equality(OpenCvSharp.CvFaceData,OpenCvSharp.CvFaceData)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Inequality(OpenCvSharp.CvFaceData,OpenCvSharp.CvFaceData)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Implicit(OpenCvSharp.CvFaceData)~OpenCvSharp.CvRect">
            <summary>
            implicit cast to CvRect (for backward compatibility)
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvMoments">
            <summary>
            Moment state structure 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMoments.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMoments.#ctor(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            Initialize by cvMoments
            </summary>
            <param name="arr">Image (1-channel or 3-channel with COI set) or polygon (CvSeq of points or a vector of points). </param>
            <param name="binary">(For images only) If the flag is non-zero, all the zero pixel values are treated as zeroes, all the others are treated as 1’s. </param>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetCentralMoment(System.Int32,System.Int32)">
            <summary>
            Retrieves central moment from moment state structure
            </summary>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Central moment</returns>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetHuMoments(OpenCvSharp.CvHuMoments@)">
            <summary>
            Calculates seven Hu invariants
            </summary>
            <param name="humoments">Pointer to Hu moments structure</param>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetNormalizedCentralMoment(System.Int32,System.Int32)">
            <summary>
            Retrieves normalized central moment from moment state structure
            </summary>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Central moment</returns>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetSpatialMoment(System.Int32,System.Int32)">
            <summary>
            Retrieves spatial moment from moment state structure
            </summary>
            <param name="x_order">x order of the retrieved moment, x_order &gt;= 0</param>
            <param name="y_order">y order of the retrieved moment, y_order &gt;= 0 and x_order + y_order &lt;= 3</param>
            <returns>Spatial moments</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.PInvokeHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.PInvokeHelper.TryPInvoke">
            <summary>
            Checks whether PInvoke functions can be called
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.PInvokeHelper.DllImportError(System.Exception)">
            <summary>
            DllImportの際にDllNotFoundExceptionかBadImageFormatExceptionが発生した際に呼び出されるメソッド。
            エラーメッセージを表示して解決策をユーザに示す。
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:OpenCvSharp.ImageEncodingID">
            <summary>
            The format type IDs for cv::imwrite and cv::inencode
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.JpegQuality">
            <summary>
            In the case of JPEG it can be a quality, from 0 to 100 (the higher is the better), 95 by default.
            [CV_IMWRITE_JPEG_QUALITY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.PngCompression">
            <summary>
            In the case of PNG it can be the compression level, from 0 to 9 (the higher value means smaller size and longer compression time), 3 by default.
            [CV_IMWRITE_PNG_COMPRESSION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.PxmBinary">
            <summary>
            In the case of PPM, PGM or PBM it can a binary format flag, 0 or 1, 1 by default.
            [CV_IMWRITE_PXM_BINARY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBGCodeBookModel">
            <summary>
            CvBGCodeBookModel
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookModel._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr">struct CvBGCodeBookModel*</param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.#ctor">
            <summary>
            Allocates BGCodeBookModel structure
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookModel.SizeOf">
            <summary>
            sizeof(CvBGCodeBookModel) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Diff(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Diff(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.T">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.CbBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.ModMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.ModMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.CbMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Storage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Freelist">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.OpenCVException">
            <summary>
            The default exception to be thrown by OpenCV 
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCVException.#ctor(OpenCvSharp.CvStatus,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="status">The numeric code for error status</param>
            <param name="func_name">The source file name where error is encountered</param>
            <param name="err_msg">A description of the error</param>
            <param name="file_name">The source file name where error is encountered</param>
            <param name="line">The line number in the souce where error is encountered</param>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.Status">
            <summary>
            The numeric code for error status
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.FuncName">
            <summary>
            The source file name where error is encountered
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.ErrMsg">
            <summary>
            A description of the error
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.FileName">
            <summary>
            The source file name where error is encountered
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.Line">
            <summary>
            The line number in the souce where error is encountered
            </summary>
        </member>
        <member name="T:OpenCvSharp.IPointerAccessor1D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor1D`1.Get(System.Int32)">
            <summary>
            ptr[index]
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor1D`1.Set(System.Int32,`0)">
            <summary>
            ptr[index] = value;
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor1D`1.Ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor1D`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvNextEdgeType">
            <summary>
            Specifies, which of related edges to return
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundOrg">
            <summary>
            Next around the edge origin (eOnext on the picture above if e is the input edge) 
            [CV_NEXT_AROUND_ORG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundDst">
            <summary>
            Next around the edge vertex (eDnext) 
            [CV_NEXT_AROUND_DST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundOrg">
            <summary>
            Previous around the edge origin (reversed eRnext) 
            [CV_PREV_AROUND_ORG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundDst">
            <summary>
            Previous around the edge destination (reversed eLnext) 
            [CV_PREV_AROUND_DST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundLeft">
            <summary>
            Next around the left facet (eLnext) 
            [CV_NEXT_AROUND_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundRight">
            <summary>
            Next around the right facet (eRnext) 
            [CV_NEXT_AROUND_RIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundLeft">
            <summary>
            Previous around the left facet (reversed eOnext) 
            [CV_PREV_AROUND_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundRight">
            <summary>
            Previous around the right facet (reversed eDnext) 
            [CV_PREV_AROUND_RIGHT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSlice">
            <summary>
            A sequence slice
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.SizeOf">
            <summary>
            sizeof(CvSlice)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.WholeSeqEndIndex">
            <summary>
            シーケンス全体をあらわすスライスのスライス長を取得する
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.StartIndex">
            <summary>
            start index (inclusive)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.EndIndex">
            <summary>
            end index (exclusive)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.WholeSeq">
            <summary>
            シーケンス全体をあらわすスライスを取得する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSlice.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start_index"></param>
            <param name="end_index"></param>
        </member>
        <member name="M:OpenCvSharp.CvSlice.SliceLength(OpenCvSharp.CvSeq)">
            <summary>
            Calculates the sequence slice length
            </summary>
            <param name="seq">Sequence</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.op_Equality(OpenCvSharp.CvSlice,OpenCvSharp.CvSlice)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.op_Inequality(OpenCvSharp.CvSlice,OpenCvSharp.CvSlice)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.Equals(OpenCvSharp.CvSlice)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvVideoWriter">
            <summary>
            AVI Video File Writer
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvVideoWriter._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.String,System.Double,OpenCvSharp.CvSize)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.String,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <param name="is_color">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CvSize)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <param name="is_color">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCvSharp.CvSize)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="filename">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frame_size">Size of video frames. </param>
            <param name="is_color">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvVideoWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.WriteFrame(OpenCvSharp.IplImage)">
            <summary>
            Writes/appends one frame to video file. 
            </summary>
            <param name="image">the written frame.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.FileName">
            <summary>
            出力するビデオファイルの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.Fps">
            <summary>
            作成されたビデオストリームのフレームレートを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.FrameSize">
            <summary>
            ビデオフレームのサイズを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.IsColor">
            <summary>
            カラーフレームかどうかの値を取得する
            </summary>
        </member>
        <member name="T:OpenCvSharp.ReduceOperation">
            <summary>
            The reduction operations for cvReduce
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Sum">
            <summary>
            The output is the sum of all the matrix rows/columns.
            [CV_REDUCE_SUM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Avg">
            <summary>
            The output is the mean vector of all the matrix rows/columns.
            [CV_REDUCE_AVG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Max">
            <summary>
            The output is the maximum (column/row-wise) of all the matrix rows/columns.
            [CV_REDUCE_MAX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Min">
            <summary>
            The output is the minimum (column/row-wise) of all the matrix rows/columns.
            [CV_REDUCE_MIN]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CriteriaType">
            <summary>
            Type of termination criteria 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Iteration">
            <summary>
            [CV_TERMCRIT_ITER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Number">
            <summary>
            [CV_TERMCRIT_NUMBER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Epsilon">
            <summary>
            [CV_TERMCRIT_EPS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvAttrList">
            <summary>
            List of attributes
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList._attr">
            <summary>
            const char** attr;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList._next">
            <summary>
            struct CvAttrList* next;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList.SizeOf">
            <summary>
            sizeof(CvAttrList)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.#ctor(System.String[])">
            <summary>
            initializes CvAttrList structure
            </summary>
            <param name="attr">array of (attribute_name,attribute_value) pairs</param>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.#ctor(System.String[],OpenCvSharp.Pointer{OpenCvSharp.CvAttrList})">
            <summary>
            initializes CvAttrList structure
            </summary>
            <param name="attr">array of (attribute_name,attribute_value) pairs</param>
            <param name="next">pointer to next chunk of the attributes list</param>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvAttrList.Attr">
            <summary>
            NULL-terminated array of (attribute_name,attribute_value) pairs
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvAttrList.Next">
            <summary>
            pointer to next chunk of the attributes list
            </summary>
        </member>
        <member name="T:OpenCvSharp.FourCC">
            <summary>
            4-character code of codec used to compress the frames.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConst">
            <summary>
            OpenCV Constants defined by macro
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadStep">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadModelOrChSeq">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadNumChannels">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadNumChannel1U">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadDepth">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadAlphaChannel">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadOrder">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadOrigin">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadAlign">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadCallBack">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadTileSize">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadCOI">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadROISize">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_MaskIsTiled">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_StsNullPtr">
            
        </member>
        <member name="T:OpenCvSharp.ButtonType">
            <summary>
            Button type flags (cvCreateButton)
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.PushButton">
            <summary>
            The button will be a push button.
            [CV_PUSH_BUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.Checkbox">
            <summary>
            The button will be a checkbox button.
            [CV_CHECKBOX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.Radiobox">
            <summary>
            The button will be a radiobox button. The radiobox on the same buttonbar (same line) are exclusive; one on can be select at the time.
            [CV_RADIOBOX]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFontQt">
            <summary>
            Qt Font structure
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFont">
            <summary>
            Font structure
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
            <param name="thickness">Thickness of the text strokes. </param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Initializes font structure
            </summary>
            <param name="font_face">Font name identifier. Only a subset of Hershey fonts are supported now.</param>
            <param name="hscale">Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. </param>
            <param name="vscale">Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. </param>
            <param name="shear">Approximate tangent of the character slope relative to the vertical line. Zero value means a non-italic font, 1.0f means ≈45° slope, etc. thickness Thickness of lines composing letters outlines. The function cvLine is used for drawing letters. </param>
            <param name="thickness">Thickness of the text strokes. </param>
            <param name="line_type">Type of the strokes, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvFont.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvFont.SizeOf">
            <summary>
            sizeof(CvFont) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.GetTextSize(System.String)">
            <summary>
            Retrieves width and height of text string
            </summary>
            <param name="text_string">Input string. </param>
        </member>
        <member name="M:OpenCvSharp.CvFont.GetTextSize(System.String,System.Int32@)">
            <summary>
            Retrieves width and height of text string
            </summary>
            <param name="text_string">Input string. </param>
            <param name="baseline">y-coordinate of the baseline relatively to the bottom-most text point. </param>
        </member>
        <member name="P:OpenCvSharp.CvFont.NameFont">
            <summary>
            ColorFont -> cvScalar(blue_component, green_component, red\_component[, alpha_component])
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Color">
            <summary>
            ColorFont -> cvScalar(blue_component, green_component, red\_component[, alpha_component])
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.FontFace">
            <summary>
            Font name identifier
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Ascii">
            <summary>
            font data and metrics
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Greek">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Cyrillic">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.HScale">
            <summary>
            Horizontal scale. If equal to 1.0f, the characters have the original width depending on the font type. If equal to 0.5f, the characters are of half the original width. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.VScale">
            <summary>
            Vertical scale. If equal to 1.0f, the characters have the original height depending on the font type. If equal to 0.5f, the characters are of half the original height. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Shear">
            <summary>
            slope coefficient: 0 - normal, >0 - italic
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Thickness">
            <summary>
            letters thickness
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Dx">
            <summary>
            horizontal interval between letters
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.LineType">
            <summary>
            Type of the strokes
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
            <param name="style">The operation flags</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle,System.Int32)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="nameFont">Name of the font. The name should match the name of a system font (such as ``Times’‘). If the font is not found, a default one will be used.</param>
            <param name="pointSize">Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</param>
            <param name="color">Color of the font in BGRA – A = 255 is fully transparent. Use the macro CV _ RGB for simplicity.</param>
            <param name="weight">The operation flags</param>
            <param name="style">The operation flags</param>
            <param name="spacing">Spacing between characters. Can be negative or positive.</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.LevMarqState">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLevMarq">
            <summary>
            CvLevMarq
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLevMarq._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLevMarq.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Int32">
            <summary>
            Managed wrapper of array pointer (Int32*)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Int32.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.#ctor(System.Int32*)">
            <summary>
            Initializes from Int32*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.Set(System.Int32,System.Int32)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.ToArray(System.Int32)">
            <summary>
            Converts this pointer into a managed array
            </summary>
            <param name="length">length of the result array</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int32.Ptr">
            <summary>
            Unmanaged pointer (Int32*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int32.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Byte">
            <summary>
            Managed wrapper of array pointer (Byte*)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Byte.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.#ctor(System.Byte*)">
            <summary>
            Initializes from Byte*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.Set(System.Int32,System.Byte)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Byte.Ptr">
            <summary>
            Unmanaged pointer (Single*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Byte.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.Win32API">
            <summary>
            Win32API Wrapper
            </summary>
        </member>
        <member name="M:OpenCvSharp.Win32API.SetDIBitsToDevice(System.IntPtr,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr,OpenCvSharp.Win32API.BITMAPINFO@,System.UInt32)">
            <summary>
            
            </summary>
            <param name="hdc"></param>
            <param name="XDest"></param>
            <param name="YDest"></param>
            <param name="dwWidth"></param>
            <param name="dwHeight"></param>
            <param name="XSrc"></param>
            <param name="YSrc"></param>
            <param name="uStartScan"></param>
            <param name="cScanLines"></param>
            <param name="lpvBits"></param>
            <param name="lpbmi"></param>
            <param name="fuColorUse"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Win32API.SetStretchBltMode(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="hdc"></param>
            <param name="iStretchMode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Win32API.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,OpenCvSharp.Win32API.BITMAPINFO@,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="hdc"></param>
            <param name="XDest"></param>
            <param name="YDest"></param>
            <param name="nDestWidth"></param>
            <param name="nDestHeight"></param>
            <param name="XSrc"></param>
            <param name="YSrc"></param>
            <param name="nSrcWidth"></param>
            <param name="nSrcHeight"></param>
            <param name="lpBits"></param>
            <param name="lpBitsInfo"></param>
            <param name="iUsage"></param>
            <param name="dwRop"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.IPointerAccessor2D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor2D`1.Get(System.Int32,System.Int32)">
            <summary>
            ptr[index]
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor2D`1.Set(System.Int32,System.Int32,`0)">
            <summary>
            ptr[index] = value;
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor2D`1.Ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            one of edges within quad-edge, lower 2 bits is index (0..3)
            and upper bits are quad-edge pointer
            </summary>
            <remarks>
            typedef size_t CvSubdiv2DEdge;
            typedef unsigned int size_t;
            </remarks>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DEdge.Value">
            <summary>
            Data (size_t)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.UInt32">
            <summary>
            Implicit cast to uint
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.UInt64">
            <summary>
            Implicit cast to ulong
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.IntPtr">
            <summary>
            Implicit cast to IntPtr
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.UInt32)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            Implicit cast from uint to CvSubdiv2DEdge
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.UInt64)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            Implicit cast from IntPtr to CvSubdiv2DEdge
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.IntPtr)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            Implicit cast from IntPtr to CvSubdiv2DEdge
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.GetEdge(OpenCvSharp.CvNextEdgeType)">
            <summary>
            Returns one of edges related to given (cvSubdiv2DGetEdge).
            </summary>
            <param name="type">Specifies, which of related edges to return</param>
            <returns>one the edges related to the input edge</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.Dst">
            <summary>
            Returns edge destination (cvSubdiv2DEdgeDst)．
            </summary>
            <returns>The edge destination. If the edge is from dual subdivision and the virtual point coordinates are not calculated yet, the returned pointer may be null.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.Org">
            <summary>
            Returns edge origin (cvSubdiv2DEdgeOrg)．
            </summary>
            <returns>The edge origin. If the edge is from dual subdivision and the virtual point coordinates are not calculated yet, the returned pointer may be null.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.RotateEdge(OpenCvSharp.RotateEdgeFlag)">
            <summary>
            Returns another edge of the same quad-edge (cvSubdiv2DRotateEdge).
            </summary>
            <returns>one the edges of the same quad-edge as the input edge. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.HistogramFormat">
            <summary>
            Histogram representation format
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramFormat.Array">
            <summary>
            Histogram data is represented as an multi-dimensional dense array CvMatND.
            [CV_HIST_ARRAY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramFormat.Sparse">
            <summary>
            Histogram data is represented as a multi-dimensional sparse array CvSparseMat. 
            [CV_HIST_SPARSE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourChain">
            <summary>
            Approximation method (for all the modes, except CV_RETR_RUNS, which uses built-in approximation). 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.Code">
            <summary>
            CV_CHAIN_CODE - output contours in the Freeman chain code. All other methods output polygons (sequences of vertices). 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxNone">
            <summary>
            CV_CHAIN_APPROX_NONE - translate all the points from the chain code into points; 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxSimple">
            <summary>
            CV_CHAIN_APPROX_SIMPLE - compress horizontal, vertical, and diagonal segments, that is, the function leaves only their ending points; 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxTC89L1">
            <summary>
            CV_CHAIN_APPROX_TC89_L1 - apply one of the flavors of Teh-Chin chain approximation algorithm. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxTC89KCOS">
            <summary>
            V_CHAIN_APPROX_TC89_KCOS - apply one of the flavors of Teh-Chin chain approximation algorithm. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.LinkRuns">
            <summary>
            CV_LINK_RUNS - use completely different contour retrieval algorithm via linking of horizontal segments of 1’s. Only CV_RETR_LIST retrieval mode can be used with this method. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConnectedComp">
            <summary>
            Connected component
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="ptr">struct CvConnectedComp*</param>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.FromPtr(System.IntPtr)">
            <summary>
            Creates a CvConnectedComp from a pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvConnectedComp.SizeOf">
            <summary>
            sizeof(CvConnectedComp)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Area">
            <summary>
            area of the connected component
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Value">
            <summary>
            average color of the connected component
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Rect">
            <summary>
            ROI of the component
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Contour">
            <summary>
            optional component boundary (the contour might have child contours corresponding to the holes)
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCircleSegment">
            <summary>
            circle structure retrieved from cvHoughCircle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCircleSegment.Center">
            <summary>
            Center coordinate of the circle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCircleSegment.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.#ctor(OpenCvSharp.CvPoint2D32f,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="center">center</param>
            <param name="radius">radius</param>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.Equals(OpenCvSharp.CvCircleSegment)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.op_Equality(OpenCvSharp.CvCircleSegment,OpenCvSharp.CvCircleSegment)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.op_Inequality(OpenCvSharp.CvCircleSegment,OpenCvSharp.CvCircleSegment)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvDistanceFunction">
            <summary>
            The user-defined distance function for cvCalcEMD2. It takes coordinates of two points and returns the distance between the points. 
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSparseNode">
            <summary>
            An element of CvSparseMat
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvObject">
            <summary>
            A class which has a pointer of OpenCV structure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObject._ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObject.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:OpenCvSharp.CvObject.CvPtr">
            <summary>
            Native pointer of OpenCV structure
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseNode.#ctor(System.IntPtr)">
            <summary>
            Default constructor
            </summary>
            <param name="ptr">CvSparseNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvSparseNode.SizeOf">
            <summary>
            sizeof(CvSparseNode)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseNode.HashVal">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseNode.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraphEdge">
            <summary>
            Edge of graph
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.#ctor(System.Void*)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvGraphEdge.SizeOf">
            <summary>
            sizeof(CvGraphEdge) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.IsGraphEdgeVisited">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Flags">
            <summary>
            Edge flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Weight">
            <summary>
            Edge weight
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Next">
            <summary>
            The next edges in the incidence lists for staring (0) and ending (1) vertices
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Vtx">
            <summary>
            The starting (0) and ending (1) vertices
            </summary>
        </member>
        <member name="T:OpenCvSharp.ErrMode">
            <summary>
            Error mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeLeaf">
            <summary>
            The program is terminated after error handler is called. This is the default value. 
            It is useful for debugging, as the error is signalled immediately after it occurs. 
            However, for production systems other two methods may be preferable as they provide more control. 
            [CV_ErrModeLeaf]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeParent">
            <summary>
            The program is not terminated, but the error handler is called. 
            The stack is unwinded (it is done w/o using C++ exception mechanism). 
            User may check error code after calling Cxcore function with cvGetErrStatus and react. 
            [CV_ErrModeParent]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeSilent">
            <summary>
            Similar to Parent mode, but no error handler is called. 
            [CV_ErrModeSilent]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontWeight">
            <summary>
            The operation flags for cvFontQt
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Light">
            <summary>
            QFont::Light
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Normal">
            <summary>
            QFont::Normal
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.DemiBold">
            <summary>
            QFont::DemiBold
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Bold">
            <summary>
            QFont::Bold
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Black">
            <summary>
            QFont::Black
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvOpenGLCallback">
            <summary>
            
            </summary>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvFaceTracker">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceTracker.NumFaceElements">
            <summary>
            CV_NUM_FACE_ELEMENTS
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceTracker._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.#ctor(OpenCvSharp.IplImage,OpenCvSharp.CvRect[])">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr">struct CvFaceTracker*</param>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.TrackFace(OpenCvSharp.IplImage,OpenCvSharp.CvRect[],OpenCvSharp.CvPoint@,System.Double@)">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <param name="ptRotate"></param>
            <param name="dbAngleRotate"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvLineSegmentPoint">
            <summary>
            Line segment structure retrieved from cvHoughLines2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPoint.P1">
            <summary>
            1st Point
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPoint.P2">
            <summary>
            2nd Point
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.#ctor(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Constructor
            </summary>
            <param name="p1">1st Point</param>
            <param name="p2">2nd Point</param>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Equals(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.op_Equality(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.op_Inequality(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Calculates a intersection of the specified two lines
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineIntersection(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Calculates a intersection of the specified two lines
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.SegmentIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Calculates a intersection of the specified two segments
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.SegmentIntersection(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Calculates a intersection of the specified two segments
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedSegments(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Returns a boolean value indicating whether the specified two segments intersect.
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedSegments(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Returns a boolean value indicating whether the specified two segments intersect.
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedLineAndSegment(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Returns a boolean value indicating whether a line and a segment intersect.
            </summary>
            <param name="line">Line</param>
            <param name="seg">Segment</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineAndSegmentIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            Calculates a intersection of a line and a segment
            </summary>
            <param name="line"></param>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Length(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Offset(System.Int32,System.Int32)">
            <summary>
            Translates the Point by the specified amount. 
            </summary>
            <param name="x">The amount to offset the x-coordinate. </param>
            <param name="y">The amount to offset the y-coordinate. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Offset(OpenCvSharp.CvPoint)">
            <summary>
            Translates the Point by the specified amount. 
            </summary>
            <param name="p">The Point used offset this CvPoint.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint._IntersectedSegments_(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            線分が交差しているかどうか 
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.LineType">
            <summary>
            Type of the line
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.Link8">
            <summary>
            8-connected line.
            [= 8]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.Link4">
            <summary>
            4-connected line.
            [= 4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.AntiAlias">
            <summary>
            Antialiased line. 
            [CV_AA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DiagType">
            <summary>
            Array diagonal
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Main">
            <summary>
            corresponds to the main diagonal
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Above">
            <summary>
            corresponds to the diagonal above the main etc.
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Below">
            <summary>
            corresponds to the diagonal below the main etc. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.DCTFlag">
            <summary>
            Transformation flags for cvDCT
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Forward">
            <summary>
            Do forward 1D or 2D transform.
            (Forward and Inverse are mutually exclusive, of course.)
            [CV_DXT_FORWARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Inverse">
            <summary>
            Do inverse 1D or 2D transform.
            (Forward and Inverse are mutually exclusive, of course.)
            [CV_DXT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Rows">
            <summary>
            Do forward or inverse transform of every individual row of the input matrix. 
            This flag allows user to transform multiple vectors simultaneously and can be used to decrease the overhead 
            (which is sometimes several times larger than the processing itself), to do 3D and higher-dimensional transforms etc. 
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CovarMatrixFlag">
            <summary>
            Operation flags for cvCovarMatrix
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Scrambled">
            <summary>
            scale * [vects[0]-avg,vects[1]-avg,...]^T * [vects[0]-avg,vects[1]-avg,...]   
            that is, the covariation matrix is count×count. Such an unusual covariation matrix is used for fast PCA of a set of very large vectors
            (see, for example, Eigen Faces technique for face recognition). Eigenvalues of this "scrambled" matrix will match to the eigenvalues of
            the true covariation matrix and the "true" eigenvectors can be easily calculated from the eigenvectors of the "scrambled" covariation matrix.
            [CV_COVAR_SCRAMBLED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Normal">
            <summary>
            scale * [vects[0]-avg,vects[1]-avg,...]*[vects[0]-avg,vects[1]-avg,...]^T   
            that is, cov_mat will be a usual covariation matrix with the same linear size as the total number of elements in every input vector. 
            One and only one of CV_COVAR_SCRAMBLED and CV_COVAR_NORMAL must be specified
            [CV_COVAR_NORMAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.UseAvg">
            <summary>
            If the flag is specified, the function does not calculate avg from the input vectors, 
            but, instead, uses the passed avg vector. This is useful if avg  has been already calculated somehow, 
            or if the covariation matrix is calculated by parts - in this case, avg is not a mean vector of the input sub-set of vectors, 
            but rather the mean vector of the whole set.
            [CV_COVAR_USE_AVG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Scale">
            <summary>
            If the flag is specified, the covariation matrix is scaled by the number of input vectors.
            [CV_COVAR_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Rows">
            <summary>
            Means that all the input vectors are stored as rows of a single matrix, vects[0].count is ignored in this case, 
            and avg should be a single-row vector of an appropriate size.
            [CV_COVAR_ROWS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Cols">
            <summary>
            Means that all the input vectors are stored as columns of a single matrix, vects[0].count is ignored in this case, 
            and avg should be a single-column vector of an appropriate size. 
            [CV_COVAR_COLS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ApertureSize">
            <summary>
            Size of the extended Sobel kernel
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size1">
            <summary>
            Size 1
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size3">
            <summary>
            Size 3
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size5">
            <summary>
            Size 5
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size7">
            <summary>
            Size 7
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Scharr">
            <summary>
            Corresponds to 3x3 Scharr filter that may give more accurate results than 3x3 Sobel. 
            [CV_SCHARR]
            </summary>
        </member>
        <member name="T:OpenCvSharp.AdaptiveThresholdType">
            <summary>
            Adaptive thresholding algorithms
            </summary>
        </member>
        <member name="F:OpenCvSharp.AdaptiveThresholdType.MeanC">
            <summary>
            It is a mean of block_size × block_size pixel neighborhood, subtracted by param1.
            [CV_ADAPTIVE_THRESH_MEAN_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.AdaptiveThresholdType.GaussianC">
            <summary>
            it is a weighted sum (Gaussian) of block_size × block_size pixel neighborhood, subtracted by param1.
            [CV_ADAPTIVE_THRESH_GAUSSIAN_C]
            </summary>
        </member>
        <member name="T:OpenCvSharp.Cv64suf">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.DominantsFlag">
            <summary>
            Various operation flags for cvFindDominantPoints
            </summary>
        </member>
        <member name="F:OpenCvSharp.DominantsFlag.IPAN">
            <summary>
            
            [CV_DOMINANT_IPAN]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLatentSvmDetector">
            <summary>
            structure contains the bounding box and confidence level for detected object 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLatentSvmDetector._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.#ctor(System.String)">
            <summary>
            load trained detector from a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvLatentSvmDetector*</param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.FromPtr(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <returns></returns>      
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,System.Single)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <param name="overlap_threshold">threshold for the non-maximum suppression algorithm 
             = 0.5f [here will be the reference to original paper]</param>
            <returns></returns>   
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,System.Single,System.Int32)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image">image to detect objects in</param>
            <param name="storage">memory storage to store the resultant sequence of the object candidate rectangles</param>
            <param name="overlap_threshold">threshold for the non-maximum suppression algorithm 
             = 0.5f [here will be the reference to original paper]</param>
            <param name="numThreads"></param>
            <returns></returns>   
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumComponents">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumPartFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.Filters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.ScoreThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvColor">
            <summary>
            Structure that represents RGB color (alias of CvScalar).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
        </member>
        <member name="M:OpenCvSharp.CvColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
        </member>
        <member name="M:OpenCvSharp.CvColor.Random">
            <summary>
            Creates a random color
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Implicit(OpenCvSharp.CvColor)~OpenCvSharp.CvScalar">
            <summary>
            Creates a CvScalar with the members of the specified CvColor.
            </summary>
            <param name="self">A CvColor that specifies the coordinates for the new CvScalar.</param>
            <returns>CvScalar</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Implicit(OpenCvSharp.CvScalar)~OpenCvSharp.CvColor">
            <summary>
            Creates a CvColor with the members of the specified CvScalar.
            </summary>
            <param name="obj">A CvScalar that specifies the coordinates for the new CvPoint.</param>
            <returns>CvColor</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Equality(OpenCvSharp.CvColor,OpenCvSharp.CvColor)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each CvPoint object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Inequality(OpenCvSharp.CvColor,OpenCvSharp.CvColor)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each CvPoint object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.Equals(OpenCvSharp.CvColor)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CvColor.Black">
            <summary>
            Gets a system-defined color which represents black.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.White">
            <summary>
            Gets a system-defined color which represents white.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Gray">
            <summary>
            Gets a system-defined color which represents gray.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Pink">
            <summary>
            Gets a system-defined color which represents pink.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Red">
            <summary>
            Gets a system-defined color which represents red.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Magenta">
            <summary>
            Gets a system-defined color which represents magenta.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.LightGreen">
            <summary>
            Gets a system-defined color which represents light green.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Green">
            <summary>
            Gets a system-defined color which represents green.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.DarkGreen">
            <summary>
            Gets a system-defined color which represents dark green.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Cyan">
            <summary>
            Gets a system-defined color which represents cyan.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Blue">
            <summary>
            Gets a system-defined color which represents blue.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Navy">
            <summary>
            Gets a system-defined color which represents navy.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Yellow">
            <summary>
            Gets a system-defined color which represents yellow.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Orange">
            <summary>
            Gets a system-defined color which represents orange.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Violet">
            <summary>
            Gets a system-defined color which represents violet.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvColor.Brown">
            <summary>
            Gets a system-defined color which represents brown.
            </summary>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor2D_Single">
            <summary>
            Managed wrapper of array pointer (Single**)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor2D_Single.ptr">
            <summary>
            pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.#ctor(System.Single**)">
            <summary>
            Initializes from Single**
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.Get(System.Int32,System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index1">The first zero-based component of the element index </param>
            <param name="index2">The second zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.Set(System.Int32,System.Int32,System.Single)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index1">The first zero-based component of the element index </param>
            <param name="index2">The second zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor2D_Single.Ptr">
            <summary>
            Unmanaged pointer (Single**)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor2D_Single.Item(System.Int32,System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index1">The first zero-based component of the element index </param>
            <param name="index2">The second zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.MulSpectrumsFlag">
            <summary>
            Operation flags for cvMulSpectrums
            </summary>
        </member>
        <member name="F:OpenCvSharp.MulSpectrumsFlag.Rows">
            <summary>
            Treat each row of the arrays as a separate spectrum.
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MulSpectrumsFlag.MulConj">
            <summary>
            Conjugate the second argument of cvMulSpectrums. 
            [CV_DXT_MUL_CONJ]
            </summary>
        </member>
        <member name="T:OpenCvSharp.LKFlowFlag">
            <summary>
            Miscellaneous flags for cvCalcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.PyrAReady">
            <summary>
            Pyramid for the first frame is pre-calculated before the call.
            [CV_LKFLOW_PYR_A_READY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.PyrBReady">
            <summary>
            Pyramid for the second frame is pre-calculated before the call.
            [CV_LKFLOW_PYR_B_READY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.InitialGuesses">
            <summary>
            Array B contains initial coordinates of features before the function call. 
            [CV_LKFLOW_INITIAL_GUESSES]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.InitialFlow">
            <summary>
            Array B contains initial coordinates of features before the function call. 
            [cv::OPTFLOW_USE_INITIAL_FLOW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.GetMinEigenVals">
            <summary>
            
            [CV_LKFLOW_GET_MIN_EIGENVALS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.GemmOperation">
            <summary>
            The operation flags for cvGEMM
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.Zero">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.A_T">
            <summary>
            Transpose src1
            [CV_GEMM_A_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.B_T">
            <summary>
            Transpose src2
            [CV_GEMM_B_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.C_T">
            <summary>
            Transpose src3
            [CV_GEMM_C_T]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FundamentalMatMethod">
            <summary>
            Method for computing the fundamental matrix 
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Point7">
            <summary>
            for 7-point algorithm. N == 7 
            [CV_FM_7POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Point8">
            <summary>
            for 8-point algorithm. N >= 8 
            [CV_FM_8POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.LMedSOnly">
            <summary>
            for LMedS algorithm. N > 8 
            [CV_FM_LMEDS_ONLY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.RansacOnly">
            <summary>
            for RANSAC algorithm. N > 8 
            [CV_FM_RANSAC_ONLY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.LMedS">
            <summary>
            for LMedS algorithm. N > 8 
            [CV_FM_LMEDS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Ransac">
            <summary>
            for RANSAC algorithm. N > 8 
            [CV_FM_RANSAC]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourRetrieval">
            <summary>
            Approximation methods for cvFindContours
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.External">
            <summary>
            Retrieve only the extreme outer contours 
            [CV_RETR_EXTERNAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.List">
            <summary>
            Retrieve all the contours and puts them in the list 
            [CV_RETR_LIST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.CComp">
            <summary>
            Retrieve all the contours and organizes them into two-level hierarchy: top level are external boundaries of the components, second level are boundaries of the holes 
            [CV_RETR_CCOMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.Tree">
            <summary>
            Retrieve all the contours and reconstructs the full hierarchy of nested contours 
            [CV_RETR_TREE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2D">
            <summary>
            Planar subdivision
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraph">
            <summary>
            Oriented or unoriented weigted graph
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSet">
            <summary>
            Collection of nodes
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeq">
            <summary>
            Growable sequence of elements
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTreeNode`1">
            <summary>
            tree node
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvArr">
            <summary>
            Arbitrary array
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.AbsDiff(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute difference between two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Abs(OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute difference between array and scalar
            </summary>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AbsDiffS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            Calculates absolute difference between array and scalar
            </summary>
            <param name="dst">The destination array. </param>
            <param name="value">The scalar. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Acc(OpenCvSharp.CvArr)">
            <summary>
            Adds frame to accumulator
            </summary>
            <param name="sum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds frame to accumulator
            </summary>
            <param name="sum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
            <param name="block_size">The size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, ... </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            Applies adaptive threshold to array.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="max_value">Maximum value that is used with CV_THRESH_BINARY and CV_THRESH_BINARY_INV. </param>
            <param name="adaptive_method">Adaptive thresholding algorithm to use: CV_ADAPTIVE_THRESH_MEAN_C or CV_ADAPTIVE_THRESH_GAUSSIAN_C.</param>
            <param name="threshold_type">Thresholding type.</param>
            <param name="block_size">The size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, ... </param>
            <param name="param1">The method-dependent parameter. For the methods CV_ADAPTIVE_THRESH_MEAN_C and CV_ADAPTIVE_THRESH_GAUSSIAN_C it is a constant subtracted from mean or weighted mean (see the discussion), though it may be negative. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element sum of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element sum of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes sum of array and scalar
            </summary>
            <param name="value">Added scalar. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes sum of array and scalar
            </summary>
            <param name="value">Added scalar. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddText(System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont)">
            <summary>
            Create the font to be used to draw text on an image
            </summary>
            <param name="text">Text to write on the image</param>
            <param name="location">Point(x,y) where the text should start on the image</param>
            <param name="font">Font to use to draw the text</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddWeighted(System.Double,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            Computes weighted sum of two arrays
            </summary>
            <param name="alpha">Weight of the first array elements. </param>
            <param name="src2">The second source array. </param>
            <param name="beta">Weight of the second array elements. </param>
            <param name="gamma">Scalar, added to each sum. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AndS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AndS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise conjunction of array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength(OpenCvSharp.CvSlice)">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <param name="slice">Starting and ending points of the curve, by default the whole curve length is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength(OpenCvSharp.CvSlice,System.Int32)">
            <summary>
            Calculates contour perimeter or curve length
            </summary>
            <param name="slice">Starting and ending points of the curve, by default the whole curve length is calculated. </param>
            <param name="is_closed">Indicates whether the curve is closed or not. There are 3 cases:
            * is_closed=0 - the curve is assumed to be unclosed.
            * is_closed&gt;0 - the curve is assumed to be closed.
            * is_closed&lt;0 - if curve is sequence, the flag CV_SEQ_FLAG_CLOSED of ((CvSeq*)curve)-&gt;flags is checked to determine if the curve is closed or not, otherwise (curve is represented by array (CvMat*) of points) it is assumed to be unclosed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Avg">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Avg(OpenCvSharp.CvArr)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="mask">The optional operation mask. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.AvgSdv(OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="mean">Pointer to the mean value, may be null if it is not needed. </param>
            <param name="std_dev">Pointer to the standard deviation. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AvgSdv(OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@,OpenCvSharp.CvArr)">
            <summary>
            Calculates average (mean) of array elements
            </summary>
            <param name="mean">Pointer to the mean value, may be null if it is not needed. </param>
            <param name="std_dev">Pointer to the standard deviation. </param>
            <param name="mask">The optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.BoundingRect">
            <summary>
            Calculates up-right bounding rectangle of point set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.BoundingRect(System.Boolean)">
            <summary>
            Calculates up-right bounding rectangle of point set.
            </summary>
            <param name="update">The update flag. Here is list of possible combination of the flag values and type of contour:
            * points is CvContour*, update=0: the bounding rectangle is not calculated, but it is read from rect field of the contour header.
            * points is CvContour*, update=1: the bounding rectangle is calculated and written to rect field of the contour header. For example, this mode is used by cvFindContours.
            * points is CvSeq* or CvMat*: update is ignored, the bounding rectangle is calculated and returned. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Canny(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Finds the edges on the input image image and marks them in the output image edges using the Canny algorithm. 
            The smallest of threshold1 and threshold2 is used for edge linking, the largest - to find initial segments of strong edges.
            </summary>
            <param name="edges">Image to store the edges found by the function. </param>
            <param name="threshold1">The first threshold. </param>
            <param name="threshold2">The second threshold. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Canny(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            Finds the edges on the input image image and marks them in the output image edges using the Canny algorithm. 
            The smallest of threshold1 and threshold2 is used for edge linking, the largest - to find initial segments of strong edges.
            </summary>
            <param name="edges">Image to store the edges found by the function. </param>
            <param name="threshold1">The first threshold. </param>
            <param name="threshold2">The second threshold. </param>
            <param name="aperture_size">Aperture parameter for Sobel operator. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr(OpenCvSharp.CheckArrFlag)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="flags">The operation flags</param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr(OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="flags">The operation flags</param>
            <param name="min_val">The inclusive lower boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <param name="max_val">The exclusive upper boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray(OpenCvSharp.CheckArrFlag)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="flags">The operation flags</param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray(OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            Checks every element of input array for invalid values
            </summary>
            <param name="flags">The operation flags</param>
            <param name="min_val">The inclusive lower boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <param name="max_val">The exclusive upper boundary of valid values range. It is used only if CV_CHECK_RANGE is set. </param>
            <returns>returns nonzero if the check succeeded, i.e. all elements are valid and within the range, and zero otherwise.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckContourConvexity">
            <summary>
            Tests contour convexity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center_x">X-coordinate of the center of the circle. </param>
            <param name="center_y">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. </param>
            <param name="line_type">Type of the circle boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ClearND(System.Int32[])">
            <summary>
            Clears the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Cmp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            Performs per-element comparison of two arrays
            </summary>
            <param name="src2">The second source array. Both source array must have a single channel. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
            <param name="cmp_op">The flag specifying the relation between the elements to be checked</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CmpS(System.Double,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            Performs per-element comparison of array and scalar
            </summary>
            <param name="value">The scalar value to compare each array element with. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
            <param name="cmp_op">The flag specifying the relation between the elements to be checked</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourArea">
            <summary>
            Calculates area of the whole contour or contour section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourArea(OpenCvSharp.CvSlice)">
            <summary>
            Calculates area of the whole contour or contour section.
            </summary>
            <param name="slice">Starting and ending points of the contour section of interest, by default area of the whole contour is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourPerimeter">
            <summary>
            Alias for cvArcLength(curve,Whole_Seq,1)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
            <param name="scale">Scale factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Convert(OpenCvSharp.CvArr)">
            <summary>
            Converts one array to another with optional linear transformation
            </summary>
            <param name="dst">Destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Converts input array elements to 8-bit unsigned integer another with optional linear transformation
            </summary>
            <param name="dst">Destination array (should have 8u depth). </param>
            <param name="scale">ScaleAbs factor. </param>
            <param name="shift">Value added to the scaled source array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="hull">Vector of 0-based point indices of the hull points in the original array.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Finds convex hull of point set
            </summary>
            <param name="hull">The output convex hull. It is either a vector of points that form the hull.</param>
            <param name="orientation">Desired orientation of convex hull: CV_CLOCKWISE or CV_COUNTER_CLOCKWISE. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(OpenCvSharp.CvArr)">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain pointers or indices to the contour points, not the hull points themselves, i.e. return_points parameter in cvConvexHull2 should be 0. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain pointers or indices to the contour points, not the hull points themselves, i.e. return_points parameter in cvConvexHull2 should be 0. </param>
            <param name="storage">Container for output sequence of convexity defects. If it is null, contour or hull (in that order) storage is used. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(System.Int32[])">
            <summary>
            Finds convexity defects of contour
            </summary>
            <param name="convexhull">Convex hull obtained using cvConvexHull2 that should contain indices to the contour points </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Copy(OpenCvSharp.CvArr)">
            <summary>
            Copies one array to another
            </summary>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Copies one array to another
            </summary>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType)">
            <summary>
            Copies image and makes border around it.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="offset">Coordinates of the top-left corner (or bottom-left in case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. Size of the rectanlge matches the source image size/ROI size. </param>
            <param name="bordertype">Type of the border to create around the copied source image rectangle.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType,OpenCvSharp.CvScalar)">
            <summary>
            Copies image and makes border around it.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="offset">Coordinates of the top-left corner (or bottom-left in case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. Size of the rectanlge matches the source image size/ROI size. </param>
            <param name="bordertype">Type of the border to create around the copied source image rectangle.</param>
            <param name="value">Value of the border pixels if bordertype=IPL_BORDER_CONSTANT. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerEigenValsAndVecs(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Calculates eigenvalues and eigenvectors of image blocks for corner detection
            </summary>
            <param name="eigenvv">Image to store the results. It must be 6 times wider than the input image. </param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerEigenValsAndVecs(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates eigenvalues and eigenvectors of image blocks for corner detection
            </summary>
            <param name="eigenvv">Image to store the results. It must be 6 times wider than the input image. </param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize,System.Double)">
            <summary>
            Runs the Harris edge detector on image. 
            Similarly to cvCornerMinEigenVal and cvCornerEigenValsAndVecs, 
            for each pixel it calculates 2x2 gradient covariation matrix M over block_size×block_size neighborhood.
            </summary>
            <param name="harris_responce">Image to store the Harris detector responces. Should have the same size as image.</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
            <param name="k">Harris detector free parameter.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerMinEigenVal(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Calculates minimal eigenvalue of gradient matrices for corner detection
            </summary>
            <param name="eigenval">Image to store the minimal eigen values. Should have the same size as image</param>
            <param name="block_size">Neighborhood size.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerMinEigenVal(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates minimal eigenvalue of gradient matrices for corner detection
            </summary>
            <param name="eigenval">Image to store the minimal eigen values. Should have the same size as image</param>
            <param name="block_size">Neighborhood size.</param>
            <param name="aperture_size">Aperture parameter for Sobel operator (see cvSobel). format. In the case of floating-point input format this parameter is the number of the fixed float filter used for differencing. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CountNonZero">
            <summary>
            Counts non-zero array elements
            </summary>
            <returns>the number of non-zero elements in arr</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CreateData">
            <summary>
            Allocates array data.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.CreatePyramid(System.Int32,System.Double,OpenCvSharp.CvSize[],OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvFilter)">
            <summary>
            Builds pyramid for an image
            </summary>
            <param name="extra_layers"></param>
            <param name="rate"></param>
            <param name="layer_sizes"></param>
            <param name="bufarr"></param>
            <param name="calc"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CrossProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates cross product of two 3D vectors
            </summary>
            <param name="src2">The second source vector. </param>
            <param name="dst">The destination vector. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtColor(OpenCvSharp.CvArr,OpenCvSharp.ColorConversion)">
            <summary>
            Converts image from one color space to another.
            </summary>
            <param name="dst">The destination image of the same data type as the source one. The number of channels may be different. </param>
            <param name="code">Color conversion operation that can be specifed using CV_&lt;src_color_space&gt;2&lt;dst_color_space&gt; constants (see below). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DCT(OpenCvSharp.CvArr,OpenCvSharp.DCTFlag)">
            <summary>
            Performs forward or inverse Discrete Cosine transform of 1D or 2D floating-point array
            </summary>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DecRefData">
            <summary>
            Decrements array data reference counter．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Det">
            <summary>
            Returns determinant of matrix
            </summary>
            <returns>determinant of the square matrix mat</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.DFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
            <param name="nonzero_rows">Number of nonzero rows to in the source array (in case of forward 2d transform), or a number of rows of interest in the destination array (in case of inverse 2d transform). If the value is negative, zero, or greater than the total number of rows, it is ignored. The parameter can be used to speed up 2d convolution/correlation when computing them via DFT.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array
            </summary>
            <param name="dst">Destination array of the same size and same type as the source. </param>
            <param name="flags">Transformation flags</param>
            <param name="nonzero_rows">Number of nonzero rows to in the source array (in case of forward 2d transform), or a number of rows of interest in the destination array (in case of inverse 2d transform). If the value is negative, zero, or greater than the total number of rows, it is ignored. The parameter can be used to speed up 2d convolution/correlation when computing them via DFT.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            Dilates image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
            <param name="iterations">Number of times erosion is applied. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[])">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
            <param name="mask">User-defined mask in case of user-defined distance, it consists of 2 numbers (horizontal/vertical shift cost, diagonal shift cost) in case of 3x3 mask and 3 numbers (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in case of 5x5 mask. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[],OpenCvSharp.CvArr)">
            <summary>
            Calculates distance to closest zero pixel for all non-zero pixels of source image.
            </summary>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel). </param>
            <param name="distance_type">Type of distance. </param>
            <param name="mask_size">Size of distance transform mask; can be 3, 5 or 0. In case of CV_DIST_L1 or CV_DIST_C the parameter is forced to 3, because 3×3 mask gives the same result as 5x5 yet it is faster. When mask_size==0, a different non-approximate algorithm is used to calculate distances. </param>
            <param name="mask">User-defined mask in case of user-defined distance, it consists of 2 numbers (horizontal/vertical shift cost, diagonal shift cost) in case of 3x3 mask and 3 numbers (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in case of 5x5 mask. </param>
            <param name="labels">The optional output 2d array of labels of integer type and the same size as src and dst, can now be used only with mask_size==3 or 5. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element division of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Performs per-element division of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="scale">Optional scale factor </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[],System.Boolean)">
            <summary>
            Draws the individual chessboard corners detected (as red circles) in case if the board was not found (pattern_was_found=0) or the colored corners connected with lines when the board was found (pattern_was_found≠0). 
            </summary>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The array of corners detected. </param>
            <param name="pattern_was_found">Indicates whether the complete board was found (≠0) or not (=0). One may just pass the return value cvFindChessboardCorners here. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
            <param name="line_type">Type of the contour segments.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CvPoint)">
            <summary>
            Draws contour outlines or interiors in the image
            </summary>
            <param name="contour">Reference to the first contour. </param>
            <param name="external_color">Color of the external contours. </param>
            <param name="hole_color">Color of internal contours (holes). </param>
            <param name="max_level">Maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours after it on the same level are drawn. If 2, all contours after and all contours one level below the contours are drawn, etc. If the value is negative, the function does not draw the contours following after contour but draws child contours of contour up to abs(max_level)-1 level. </param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (e.g. =CV_FILLED), the contour interiors are drawn. </param>
            <param name="line_type">Type of the contour segments.</param>
            <param name="offset">Shift all the point coordinates by the specified value. It is useful in case if the contours retrieved in some image ROI and then the ROI offset needs to be taken into account during the rendering. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Computes eigenvalues and eigenvectors of symmetric matrix
            </summary>
            <param name="evects">The output matrix of eigenvectors, stored as a subsequent rows. </param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order (order of eigenvalues and eigenvectors is synchronized, of course). </param>
            <param name="eps">Accuracy of diagonalization (typically, DBL_EPSILON=≈10-15 is enough). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="start_angle">Starting angle of the elliptic arc. </param>
            <param name="end_angle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. </param>
            <param name="line_type">Type of the ellipse boundary.</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
            <param name="line_type">Type of the ellipse boundary</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. </param>
            <param name="line_type">Type of the ellipse boundary</param>
            <param name="shift">Number of fractional bits in the box vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EqualizeHist(OpenCvSharp.CvArr)">
            <summary>
            Equalizes histogram of grayscale image.
            </summary>
            <param name="dst">The output image of the same size and the same data type as src. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            Erodes image by using arbitrary structuring element.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="element">Structuring element used for erosion. If it is null, a 3x3 rectangular structuring element is used. </param>
            <param name="iterations">Number of times erosion is applied. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Exp(OpenCvSharp.CvArr)">
            <summary>
            Calculates exponent of every array element
            </summary>
            <param name="dst">The destination array, it should have double type or the same type as the source. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractMSER(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvMSERParams)">
            <summary>
            Extracts the contours of Maximally Stable Extremal Regions
            </summary>
            <param name="mask"></param>
            <param name="storage"></param>
            <param name="params"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.Single}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams)">
            <summary>
            Extracts Speeded Up Robust Features from image
            </summary>
            <param name="mask">The optional input 8-bit mask. The features are only found in the areas that contain more than 50% of non-zero mask pixels. </param>
            <param name="keypoints">The output parameter; double pointer to the sequence of keypoints. This will be the sequence of CvSURFPoint structures.</param>
            <param name="descriptors">The optional output parameter; double pointer to the sequence of descriptors; Depending on the params.extended value, each element of the sequence will be either 64-element or 128-element floating-point (CV_32F) vector. If the parameter is null, the descriptors are not computed. </param>
            <param name="storage">Memory storage where keypoints and descriptors will be stored. </param>
            <param name="param">Various algorithm parameters put to the structure CvSURFParams</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">Type of the polygon boundaries.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills convex polygon
            </summary>
            <param name="pts">Array of pointers to a single polygon. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">Type of the polygon boundaries.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">ype of the polygon boundaries.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills polygons interior
            </summary>
            <param name="pts">Array of pointers to polygons. </param>
            <param name="color">Polygon color. </param>
            <param name="line_type">ype of the polygon boundaries.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Applies arbitrary linear filter to the image. In-place operation is supported. 
            When the aperture is partially outside the image, the function interpolates outlier pixel values from the nearest pixels that is inside the image. 
            </summary>
            <param name="dst">The destination image. </param>
            <param name="kernel">Convolution kernel, single-channel floating point matrix. If you want to apply different kernels to different channels, split the image using cvSplit into separate color planes and process them individually. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvPoint)">
            <summary>
            Applies arbitrary linear filter to the image. In-place operation is supported. 
            When the aperture is partially outside the image, the function interpolates outlier pixel values from the nearest pixels that is inside the image. 
            </summary>
            <param name="dst">The destination image. </param>
            <param name="kernel">Convolution kernel, single-channel floating point matrix. If you want to apply different kernels to different channels, split the image using cvSplit into separate color planes and process them individually. </param>
            <param name="anchor">The anchor of the kernel that indicates the relative position of a filtered point within the kernel. The anchor shoud lie within the kernel. The special default value (-1,-1) means that it is at the kernel center. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <param name="corner_count">The output corner counter. If it is not null, the function stores there the number of corners found. </param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,OpenCvSharp.ChessboardFlag)">
            <summary>
            Finds positions of internal corners of the chessboard
            </summary>
            <param name="pattern_size">The number of inner corners per chessboard row and column. </param>
            <param name="corners">The output array of corners detected. </param>
            <param name="corner_count">The output corner counter. If it is not null, the function stores there the number of corners found. </param>
            <param name="flags">Various operation flags</param>
            <returns>returns true if all the corners have been found and they have been placed in a certain order (row by row, left to right in every row), otherwise, if the function fails to find all the corners or reorder them, it returns false. </returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <param name="method">Approximation method. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Retrieves contours from the binary image and returns the number of retrieved contours.
            </summary>
            <param name="storage">Container of the retrieved contours. </param>
            <param name="first_contour">Output parameter, will contain the pointer to the first outer contour. </param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode. </param>
            <param name="method">Approximation method. </param>
            <param name="offset">Offset, by which every contour point is shifted. This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context. </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindCornerSubPix(OpenCvSharp.CvPoint2D32f[],System.Int32,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Iterates to find the sub-pixel accurate location of corners, or radial saddle points.
            </summary>
            <param name="corners">Initial coordinates of the input corners and refined coordinates on output. </param>
            <param name="count">Number of corners. </param>
            <param name="win">Half sizes of the search window.</param>
            <param name="zero_zone">Half size of the dead region in the middle of the search zone over which the summation in formulae below is not done. It is used sometimes to avoid possible singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such size. </param>
            <param name="criteria">Criteria for termination of the iterative process of corner refinement. That is, the process of corner position refinement stops either after certain number of iteration or when a required accuracy is achieved. The criteria may specify either of or both the maximum number of iteration and the required accuracy. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FitEllipse2">
            <summary>
            Fits ellipse to set of 2D points
            </summary>
            <returns>ellipse that fits best (in least-squares sense) to a set of 2D points.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FitLine(OpenCvSharp.DistanceType,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            Fits line to 2D or 3D point set
            </summary>
            <param name="dist_type">The distance used for fitting (see the discussion). </param>
            <param name="param">Numerical parameter (C) for some types of distances, if 0 then some optimal value is chosen. </param>
            <param name="reps">Sufficient accuracy for radius (distance between the coordinate origin and the line) and angle, respectively, 0.01 would be a good defaults for both. </param>
            <param name="aeps">Sufficient accuracy for radius (distance between the coordinate origin and the line) and angle, respectively, 0.01 would be a good defaults for both. </param>
            <param name="line">The output line parameters. In case of 2d fitting it is array of 4 floats (vx, vy, x0, y0) where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is some point on the line. In case of 3D fitting it is array of 6 floats (vx, vy, vz, x0, y0, z0) where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is some point on the line. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip(OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip(OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises
            </summary>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
            <param name="flip_mode">Specifies how to flip the array.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror(OpenCvSharp.CvArr)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror(OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            Flip a 2D array around vertical, horizontal or both axises 
            </summary>
            <param name="dst">Destination array. If dst = null the flipping is done in-place. </param>
            <param name="flip_mode">Specifies how to flip the array.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,System.Int32)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
            <param name="flags">The operation flags. Lower bits contain connectivity value, 4 (by default) or 8, used within the function. Connectivity determines which neighbors of a pixel are considered. Upper bits can be 0 or combination of the flags</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,System.Int32,OpenCvSharp.CvArr)">
            <summary>
            Fills a connected component with given color.
            </summary>
            <param name="seed_point">The starting point. </param>
            <param name="new_val">New value of repainted domain pixels. </param>
            <param name="lo_diff">Maximal lower brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="up_diff">Maximal upper brightness/color difference between the currently observed pixel and one of its neighbor belong to the component or seed pixel to add the pixel to component. In case of 8-bit color images it is packed value. </param>
            <param name="comp">Pointer to structure the function fills with the information about the repainted domain. </param>
            <param name="flags">The operation flags. Lower bits contain connectivity value, 4 (by default) or 8, used within the function. Connectivity determines which neighbors of a pixel are considered. Upper bits can be 0 or combination of the flags</param>
            <param name="mask">Operation mask</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get1D(System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get2D(System.Int32,System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetND(System.Int32[])">
            <summary>
            Return the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetCol(System.Int32)">
            <summary>
            Returns array column
            </summary>
            <param name="col">Zero-based index of the selected column. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetCols(System.Int32,System.Int32)">
            <summary>
            Returns array column span
            </summary>
            <param name="start_col">Zero-based index of the starting column (inclusive) of the span. </param>
            <param name="end_col">Zero-based index of the ending column (exclusive) of the span. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDiag(OpenCvSharp.CvMat@)">
            <summary>
            Returns one of array diagonals
            </summary>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDiag(OpenCvSharp.CvMat@,OpenCvSharp.DiagType)">
            <summary>
            Returns one of array diagonals
            </summary>
            <param name="submat">Reference to the resulting sub-array header. </param>
            <param name="diag">Array diagonal. Zero corresponds to the main diagonal, -1 corresponds to the diagonal above the main etc., 1 corresponds to the diagonal below the main etc. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDims">
            <summary>
            Return number of array dimensions and their sizes
            </summary>
            <returns>number of array dimensions.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDims(System.Int32[]@)">
            <summary>
            Return number of array dimensions and their sizes
            </summary>
            <param name="sizes">Optional output vector of the array dimension sizes. For 2d arrays the number of rows (height) goes first, number of columns (width) next. </param>
            <returns>number of array dimensions.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDimSize(System.Int32)">
            <summary>
            Return the size of particular dimension
            </summary>
            <param name="index">Zero-based dimension index (for matrices 0 means number of rows, 1 means number of columns; for images 0 means height, 1 means width). </param>
            <returns>the particular dimension size (number of elements per that dimension).</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetElemType">
            <summary>
            Returns type of array elements
            </summary>
            <returns>type of the array elements</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetQuadrangleSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Retrieves pixel quadrangle from image with sub-pixel accuracy.
            </summary>
            <param name="dst">Extracted quadrangle. </param>
            <param name="map_matrix">The transformation 2 × 3 matrix [A|b]. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
            <param name="step">Output full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@,System.Int32@,OpenCvSharp.CvSize@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set. </param>
            <param name="step">Output full row length in bytes. </param>
            <param name="roi_size">Output ROI size. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal1D(System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal2D(System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRealND(System.Int32[])">
            <summary>
            Return the particular element of single-channel array
            </summary>
            <param name="idx">Array of the element indices </param>
            <returns>the particular element of single-channel array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRectSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Retrieves pixel rectangle from image with sub-pixel accuracy.
            </summary>
            <param name="dst">Extracted rectangle. </param>
            <param name="center">Floating point coordinates of the extracted rectangle center within the source image. The center must be inside the image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRow(System.Int32)">
            <summary>
            Returns array row
            </summary>
            <param name="row">Zero-based index of the selected row. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRows(System.Int32,System.Int32)">
            <summary>
            Returns array row span
            </summary>
            <param name="start_row">Zero-based index of the starting row (inclusive) of the span. </param>
            <param name="end_row">Zero-based index of the ending row (exclusive) of the span. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns array row span
            </summary>
            <param name="start_row">Zero-based index of the starting row (inclusive) of the span. </param>
            <param name="end_row">Zero-based index of the ending row (exclusive) of the span. </param>
            <param name="delta_row">Index step in the row span. That is, the function extracts every delta_row-th row from start_row and up to (but not including) end_row. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSize">
            <summary>
            Returns size of matrix or image ROI
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetStarKeypoints(OpenCvSharp.CvMemStorage)">
            <summary>
            Retrieves keypoints using the StarDetector algorithm.
            </summary>
            <param name="storage">Memory storage where the keypoints will be stored</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetStarKeypoints(OpenCvSharp.CvMemStorage,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            Retrieves keypoints using the StarDetector algorithm.
            </summary>
            <param name="storage">Memory storage where the keypoints will be stored</param>
            <param name="params">Various algorithm parameters given to the structure CvStarDetectorParams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSubRect(OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            Returns matrix header corresponding to the rectangular sub-array of input image or matrix
            </summary>
            <param name="submat">Reference to the resultant sub-array header. </param>
            <param name="rect">Zero-based coordinates of the rectangle of interest. </param>
            <returns>Reference to the header, corresponding to a specified rectangle of the input array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSubArr(OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            Returns matrix header corresponding to the rectangular sub-array of input image or matrix
            </summary>
            <param name="submat">Reference to the resultant sub-array header. </param>
            <param name="rect">Zero-based coordinates of the rectangle of interest. </param>
            <returns>Reference to the header, corresponding to a specified rectangle of the input array.</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="cascade">Haar classifier cascade in internal representation. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <param name="min_size">Minimum window size. By default, it is set to the size of samples the classifier has been trained on (~20×20 for face detection). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <param name="max_radius">Maximal radius of the circles to search for. By default the maximal radius is set to max(image_width, image_height). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in grayscale image using Hough transform.
            </summary>
            <param name="circle_storage">The storage for the circles detected. It can be a memory storage or single row/single column matrix (CvMat*) of type CV_32FC3, to which the circles' parameters are written. </param>
            <param name="method">Currently, the only implemented method is CV_HOUGH_GRADIENT, which is basically 21HT</param>
            <param name="dp">Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have twice smaller width and height, etc. </param>
            <param name="min_dist">Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. </param>
            <param name="param1">The first method-specific parameter. In case of CV_HOUGH_GRADIENT it is the higher threshold of the two passed to Canny edge detector (the lower one will be twice smaller). </param>
            <param name="param2">The second method-specific parameter. In case of CV_HOUGH_GRADIENT it is accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. </param>
            <param name="min_radius">Minimal radius of the circles to search for. </param>
            <param name="max_radius">Maximal radius of the circles to search for. By default the maximal radius is set to max(image_width, image_height). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="line_storage">The storage for the lines detected. It can be a memory storage or single row/single column matrix (CvMat*) of a particular type to which the lines' parameters are written. </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.IncRefData">
            <summary>
            Increments array data reference counter
            </summary>
            <returns>The function cvIncRefData increments CvMat or CvMatND data reference counter and returns the new counter value if the reference counter pointer is not NULL, otherwise it returns zero. </returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inpaint(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.InpaintMethod)">
            <summary>
            Inpaints the selected region in the image.
            </summary>
            <param name="mask">The inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that needs to be inpainted. </param>
            <param name="dst">The output image of the same format and the same size as input. </param>
            <param name="inpaintRange">The radius of circlular neighborhood of each point inpainted that is considered by the algorithm. </param>
            <param name="flags">The inpainting method.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.InRange(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Checks that array elements lie between elements of two other arrays
            </summary>
            <param name="lower">The inclusive lower boundary array. </param>
            <param name="upper">The exclusive upper boundary array. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.InRangeS(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Checks that array elements lie between two scalars
            </summary>
            <param name="lower">The inclusive lower boundary. </param>
            <param name="upper">The exclusive upper boundary. </param>
            <param name="dst">The destination array, must have 8u or 8s type. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
            <param name="sqsum">The integral image for squared pixel values, W+1xH+1, double precision floating-point (64f). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates integral images.
            </summary>
            <param name="sum">The integral image, W+1xH+1, 32-bit integer or double precision floating-point (64f). </param>
            <param name="sqsum">The integral image for squared pixel values, W+1xH+1, double precision floating-point (64f). </param>
            <param name="tilted_sum">The integral for the image rotated by 45 degrees, W+1xH+1, the same data type as sum. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Invert(OpenCvSharp.CvArr)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="dst">The destination matrix. </param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Invert(OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="dst">The destination matrix. </param>
            <param name="method">Inversion method</param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inv(OpenCvSharp.CvArr)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="dst">The destination matrix. </param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inv(OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            Finds inverse or pseudo-inverse of matrix
            </summary>
            <param name="dst">The destination matrix. </param>
            <param name="method">Inversion method</param>
            <returns>In case of LU method the function returns src1 determinant (src1 must be square). 
            If it is 0, the matrix is not inverted and src2 is filled with zeros.
            In case of SVD methods the function returns the inverted condition number of src1</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.KMeans2(System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria)">
            <summary>
            Splits set of vectors by given number of clusters
            </summary>
            <param name="cluster_count">Number of clusters to split the set by. </param>
            <param name="labels">Output integer vector storing cluster indices for every sample. </param>
            <param name="termcrit">Specifies maximum number of iterations and/or accuracy (distance the centers move by between the subsequent iterations). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Laplace(OpenCvSharp.CvArr)">
            <summary>
            Calculates Laplacian of the source image by summing second x- and y- derivatives calculated using Sobel operator.
            </summary>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Laplace(OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates Laplacian of the source image by summing second x- and y- derivatives calculated using Sobel operator.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="aperture_size">Aperture size (it has the same meaning as in cvSobel). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1_x">First point's x-coordinate of the line segment. </param>
            <param name="pt1_y">First point's y-coordinate of the line segment. </param>
            <param name="pt2_x">Second point's x-coordinate of the line segment. </param>
            <param name="pt2_y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. </param>
            <param name="line_type">Type of the line.</param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Log(OpenCvSharp.CvArr)">
            <summary>
            Calculates natural logarithm of every array element absolute value
            </summary>
            <param name="dst">The destination array, it should have double type or the same type as the source. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Remaps image to log-polar space.
            The function emulates the human "foveal" vision and can be used for fast scale and rotation-invariant template matching, for object tracking etc.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="center">The transformation center, where the output precision is maximal. </param>
            <param name="M">Magnitude scale parameter. See below. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Remaps image to log-polar space.
            The function emulates the human "foveal" vision and can be used for fast scale and rotation-invariant template matching, for object tracking etc.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="center">The transformation center, where the output precision is maximal. </param>
            <param name="M">Magnitude scale parameter. See below. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. In case of multi-channel source and destination arrays, the table should either have a single-channel (in this case the same table is used for all channels), or the same number of channels as the source/destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Byte[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Int16[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Single[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Double[])">
            <summary>
            Performs look-up table transform of array
            </summary>
            <param name="dst">Destination array of arbitrary depth and of the same number of channels as the source array. </param>
            <param name="lut">Look-up table of 256 elements; should have the same depth as the destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MatchTemplate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            Compares template against overlapped image regions.
            </summary>
            <param name="templ">Searched template; must be not greater than the source image and the same data type as the image. </param>
            <param name="result">A map of comparison results; single-channel 32-bit floating-point. If image is W×H and templ is w×h then result must be W-w+1×H-h+1. </param>
            <param name="method">Specifies the way the template must be compared with image regions. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Max(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element maximum of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MaxS(System.Double,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element maximum of array and scalar
            </summary>
            <param name="value">The scalar value. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Min(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element minimum of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinAreaRect2">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <returns>The function cvMinAreaRect2 finds a circumscribed rectangle of the minimal area for 2D point set by building convex hull for the set and applying rotating calipers technique to the hull.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvArr.MinAreaRect2(OpenCvSharp.CvMemStorage)">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <param name="storage">The point tested against the contour.</param>
            <returns>The function cvMinAreaRect2 finds a circumscribed rectangle of the minimal area for 2D point set by building convex hull for the set and applying rotating calipers technique to the hull.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvArr.MinEnclosingCircle(OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            Finds circumscribed rectangle of minimal area for given 2D point set
            </summary>
            <param name="center">Output parameter. The center of the enclosing circle. </param>
            <param name="radius">Output parameter. The radius of the enclosing circle. </param>
            <returns>The function cvMinEnclosingCircle finds the minimal circumscribed circle for 2D point set using iterative algorithm. 
            It returns true if the resultant circle contains all the input points and false otherwise (i.e. algorithm failed). </returns> 
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            Finds global minimum and maximum in array or subarray
            </summary>
            <param name="min_val">Pointer to returned minimum value. </param>
            <param name="max_val">Pointer to returned maximum value. </param>
            <param name="min_loc">Pointer to returned minimum location. </param>
            <param name="max_loc">Pointer to returned maximum location. </param>
            <param name="mask">The optional mask that is used to select a subarray. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinS(System.Double,OpenCvSharp.CvArr)">
            <summary>
            Finds per-element minimum of array and scalar
            </summary>
            <param name="value">The scalar value. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Moments(System.Boolean)">
            <summary>
            Moments
            </summary>
            <param name="isBinary">(For images only) If the flag is non-zero, all the zero pixel values are treated as zeroes, all the others are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element product of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Calculates per-element product of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="scale">Optional scale factor </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr,OpenCvSharp.NormType)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <param name="norm_type">Type of norm</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            Calculates absolute array norm, absolute difference norm or relative difference norm
            </summary>
            <param name="arr2">The second source image. If it is null, the absolute norm of arr1 is calculated, otherwise absolute or relative norm of arr1-arr2 is calculated. </param>
            <param name="norm_type">Type of norm</param>
            <param name="mask">The optional operation mask. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="dst">The output array; in-place operation is supported. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
            <param name="norm_type">The normalization type.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            Normalizes array to a certain norm or value range
            </summary>
            <param name="dst">The output array; in-place operation is supported. </param>
            <param name="a">The minimum/maximum value of the output array or the norm of output array. </param>
            <param name="b">The maximum/minimum value of the output array. </param>
            <param name="norm_type">The normalization type.</param>
            <param name="mask">The operation mask. Makes the function consider and normalize only certain array elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Not(OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise inversion of array elements
            </summary>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.OrS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.OrS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates per-element bit-wise disjunction of array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PerspectiveTransform(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Performs perspective matrix transform of vector array
            </summary>
            <param name="dst">The destination three-channel floating-point array. </param>
            <param name="mat">3×3 or 4×4 transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PointPolygonTest(OpenCvSharp.CvPoint2D32f,System.Boolean)">
            <summary>
            Point in contour test
            </summary>
            <param name="pt">The point tested against the contour.</param>
            <param name="measure_dist">If it is true, the function estimates distance from the point to the nearest contour edge.</param>
            <returns>The function cvPointPolygonTest determines whether the point is inside contour, outside, or lies on an edge (or coinsides with a vertex). It returns positive, negative or zero value, correspondingly. When measure_dist=0, the return value is +1, -1 and 0, respectively. When measure_dist≠0, it is a signed distance between the point and the nearest contour edge.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick polygons
            </summary>
            <param name="pts">Array of pointers to polylines. </param>
            <param name="is_closed">Indicates whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. </param>
            <param name="color">Polyline color. </param>
            <param name="thickness">Thickness of the polyline edges. </param>
            <param name="line_type">Type of the line segments.</param>
            <param name="shift">Number of fractional bits in the vertex coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Pow(OpenCvSharp.CvArr,System.Double)">
            <summary>
            Raises every array element to power
            </summary>
            <param name="dst">The destination array, should be the same type as the source. </param>
            <param name="power">The exponent of power. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PreCornerDetect(OpenCvSharp.CvArr)">
            <summary>
            Calculates feature map for corner detection
            </summary>
            <param name="corners">Image to store the corner candidates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates feature map for corner detection
            </summary>
            <param name="corners">Image to store the corner candidates. </param>
            <param name="aperture_size">Aperture parameter for Sobel operator.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr1D(System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr1D(System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr2D(System.Int32,System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr2D(System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr3D(System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[])">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@,System.Boolean)">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <param name="create_node">Optional input parameter for sparse matrices. Non-zero value of the parameter means that the requested element is created if it does not exist already. </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            Return pointer to the particular array element
            </summary>
            <param name="idx">Array of the element indices </param>
            <param name="type">Type of matrix elements </param>
            <param name="create_node">Optional input parameter for sparse matrices. Non-zero value of the parameter means that the requested element is created if it does not exist already. </param>
            <param name="precalc_hashval">Optional input parameter for sparse matrices. If the pointer is not NULL, the function does not recalculate the node hash value, but takes it from the specified location. It is useful for speeding up pair-wise operations (TODO: provide an example) </param>
            <returns>pointer to the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PutText(System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont,OpenCvSharp.CvScalar)">
            <summary>
            Draws text string
            </summary>
            <param name="text">String to print. </param>
            <param name="org">Coordinates of the bottom-left corner of the first letter. </param>
            <param name="font">Pointer to the font structure. </param>
            <param name="color">Text color. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrDown(OpenCvSharp.CvArr)">
            <summary>
            Downsamples image.
            </summary>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            Downsamples image.
            </summary>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
            <param name="filter">Type of the filter used for convolution; only CV_GAUSSIAN_5x5 is currently supported. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double,System.Int32)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
            <param name="max_level">Maximum level of the pyramid for the segmentation. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double,System.Int32,OpenCvSharp.CvTermCriteria)">
            <summary>
            Does meanshift image segmentation.
            </summary>
            <param name="dst">The destination image of the same format and the same size as the source. </param>
            <param name="sp">The spatial window radius. </param>
            <param name="sr">The color window radius. </param>
            <param name="max_level">Maximum level of the pyramid for the segmentation. </param>
            <param name="termcrit">Termination criteria: when to stop meanshift iterations. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrUp(OpenCvSharp.CvArr)">
            <summary>
            Upsamples image.
            </summary>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            Upsamples image.
            </summary>
            <param name="dst">The destination image, should have 2x smaller width and height than the source. </param>
            <param name="filter">Type of the filter used for convolution; only CV_GAUSSIAN_5x5 is currently supported. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle">
            <summary>
            Randomly shuffles the array elements
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle(OpenCvSharp.CvRNG)">
            <summary>
            Randomly shuffles the array elements
            </summary>
            <param name="rng">The Random Number Generator  used to shuffle the elements. When the pointer is null, a temporary RNG will be created and used. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle(OpenCvSharp.CvRNG,System.Double)">
            <summary>
            Randomly shuffles the array elements
            </summary>
            <param name="rng">The Random Number Generator  used to shuffle the elements. When the pointer is null, a temporary RNG will be created and used. </param>
            <param name="iter_factor">The relative parameter that characterizes intensity of the shuffling performed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Range(System.Double,System.Double)">
            <summary>
            Fills matrix with given range of numbers as following:
            arr(i,j) = (end-start) * (i*cols(arr)+j) / (cols(arr)*rows(arr))
            </summary>
            <param name="start">The lower inclusive boundary of the range. </param>
            <param name="end">The upper exclusive boundary of the range. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1_x">X-coordinate of the one of the rectangle vertices. </param>
            <param name="pt1_y">Y-coordinate of the one of the rectangle vertices. </param>
            <param name="pt2_x">X-coordinate of the opposite rectangle vertex. </param>
            <param name="pt2_y">Y-coordinate of the opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values, e.g. CV_FILLED, make the function to draw a filled rectangle. </param>
            <param name="line_type">Type of the line, see cvLine description. </param>
            <param name="shift">Number of fractional bits in the point coordinates. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
            <param name="dim">The dimension index along which the matrix is reduce. 0 means that the matrix is reduced to a single row, 1 means that the matrix is reduced to a single column. -1 means that the dimension is chosen automatically by analysing the dst size. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation)">
            <summary>
            Reduces matrix to a vector
            </summary>
            <param name="dst">The output single-row/single-column vector that accumulates somehow all the matrix rows/columns. </param>
            <param name="dim">The dimension index along which the matrix is reduce. 0 means that the matrix is reduced to a single row, 1 means that the matrix is reduced to a single column. -1 means that the dimension is chosen automatically by analysing the dst size. </param>
            <param name="type">The reduction operation.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReleaseData">
            <summary>
            Releases array data.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
            <param name="flags">A combination of interpolation method and the optional flag(s).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            Applies generic geometrical transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="mapx">The map of x-coordinates (32fC1 image). </param>
            <param name="mapy">The map of y-coordinates (32fC1 image). </param>
            <param name="flags">A combination of interpolation method and the optional flag(s).</param>
            <param name="fillval">A value used to fill outliers. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Repeat(OpenCvSharp.CvArr)">
            <summary>
            Fill destination array with tiled source array
            </summary>
            <param name="dst">Destination array, image or matrix. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_rows">New number of rows. new_rows = 0 means that number of rows remains unchanged unless it needs to be changed according to new_cn value. destination array to be changed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data
            </summary>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_rows">New number of rows. new_rows = 0 means that number of rows remains unchanged unless it needs to be changed according to new_cn value. destination array to be changed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReshapeMatND``1(System.Int32,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Changes shape of multi-dimensional array w/o copying data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sizeof_header">Size of output header to distinguish between IplImage, CvMat and CvMatND output headers. </param>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_dims">New number of dimensions. new_dims = 0 means that number of dimensions remains the same. </param>
            <param name="new_sizes">Array of new dimension sizes. Only new_dims-1 values are used, because the total number of elements must remain the same. Thus, if new_dims = 1, new_sizes array is not used </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReshapeND``1(``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Changes shape of multi-dimensional array w/o copying data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="header">Output header to be filled. </param>
            <param name="new_cn">New number of channels. new_cn = 0 means that number of channels remains unchanged. </param>
            <param name="new_dims">New number of dimensions. new_dims = 0 means that number of dimensions remains the same. </param>
            <param name="new_sizes">Array of new dimension sizes. Only new_dims-1 values are used, because the total number of elements must remain the same. Thus, if new_dims = 1, new_sizes array is not used </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Resize(OpenCvSharp.CvArr)">
            <summary>
            Resizes image src so that it fits exactly to dst. 
            If ROI is set, the function consideres the ROI as supported as usual.
            </summary>
            <param name="dst">Destination image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Resize(OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            Resizes image src so that it fits exactly to dst. 
            If ROI is set, the function consideres the ROI as supported as usual.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="interpolation">Interpolation method.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SampleLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            Implements a particular case of application of line iterators. 
            The function reads all the image points lying on the line between pt1 and pt2, including the ending points, and stores them into the buffer.
            </summary>
            <param name="pt1">Starting the line point. </param>
            <param name="pt2">Ending the line point. </param>
            <param name="buffer">Buffer to store the line points.</param>
            <param name="connectivity">The line connectivity, 4 or 8. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ScaleAdd(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates sum of scaled array and another array
            </summary>
            <param name="scale">Scale factor for the first array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MulAddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Calculates sum of scaled array and another array
            </summary>
            <param name="scale">Scale factor for the first array. </param>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set(OpenCvSharp.CvScalar)">
            <summary>
            Sets every element of array to given value
            </summary>
            <param name="value">Fill value. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Sets every element of array to given value
            </summary>
            <param name="value">Fill value. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set1D(System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set2D(System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set3D(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetND(OpenCvSharp.CvScalar,System.Int32[])">
            <summary>
            Change the particular array element
            </summary>
            <param name="value">The assigned value </param>
            <param name="idx">Array of the element indices</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetData``1(``0[],System.Int32)">
            <summary>
            Assigns user data to the array header.
            Header should be initialized before using cvCreate*Header, cvInit*Header or cvMat (in case of matrix) function. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">User data. </param>
            <param name="step">Full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetData(System.IntPtr,System.Int32)">
            <summary>
            Assigns user data to the array header.
            Header should be initialized before using cvCreate*Header, cvInit*Header or cvMat (in case of matrix) function. 
            </summary>
            <param name="data">User data. </param>
            <param name="step">Full row length in bytes. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetIdentity">
            <summary>
            Initializes scaled identity matrix
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetIdentity(OpenCvSharp.CvScalar)">
            <summary>
            Initializes scaled identity matrix
            </summary>
            <param name="value">The value to assign to the diagonal elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal1D(System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal2D(System.Int32,System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal3D(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetRealND(System.Double,System.Int32[])">
            <summary>
            Change the particular array element
            </summary>
            <param name="value">The assigned value </param>
            <param name="idx">Array of the element indices </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetZero">
            <summary>
            Clears the array
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Zero">
            <summary>
            Clears the array
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
            <param name="param3">In case of Gaussian kernel this parameter may specify Gaussian sigma (standard deviation). If it is zero, it is calculated from the kernel size.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="smoothtype">Type of the smoothing.</param>
            <param name="param1">The first parameter of smoothing operation. </param>
            <param name="param2">The second parameter of smoothing operation. In case of simple scaled/non-scaled and Gaussian blur if param2 is zero, it is set to param1. </param>
            <param name="param3">In case of Gaussian kernel this parameter may specify Gaussian sigma (standard deviation). If it is zero, it is calculated from the kernel size.</param>
            <param name="param4">In case of non-square Gaussian kernel the parameter may be used to specify a different (from param3) sigma in the vertical direction. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sobel(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            Calculates first, second, third or mixed image derivatives using extended Sobel operator
            </summary>
            <param name="dst">Destination image. </param>
            <param name="xorder">Order of the derivative x.</param>
            <param name="yorder">Order of the derivative y.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sobel(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            Calculates first, second, third or mixed image derivatives using extended Sobel operator
            </summary>
            <param name="dst">Destination image. </param>
            <param name="xorder">Order of the derivative x.</param>
            <param name="yorder">Order of the derivative y.</param>
            <param name="aperture_size">Size of the extended Sobel kernel.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SortFlag)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
            <param name="flags">Sorting parameter</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Split(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Divides multi-channel array into several single-channel arrays or extracts a single channel from the array
            </summary>
            <param name="dst0">Destination channel 0</param>
            <param name="dst1">Destination channel 1</param>
            <param name="dst2">Destination channel 2</param>
            <param name="dst3">Destination channel 3</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtPixToPlane(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Divides multi-channel array into several single-channel arrays or extracts a single channel from the array
            </summary>
            <param name="dst0">Destination channel 0</param>
            <param name="dst1">Destination channel 1</param>
            <param name="dst2">Destination channel 2</param>
            <param name="dst3">Destination channel 3</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SquareAcc(OpenCvSharp.CvArr)">
            <summary>
            Adds the square of source image to accumulator
            </summary>
            <param name="sqsum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Adds the square of source image to accumulator
            </summary>
            <param name="sqsum">Accumulator of the same number of channels as input image, 32-bit or 64-bit floating-point. </param>
            <param name="mask">Optional operation mask. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="storage">Container of the retrieved contours.</param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element difference between two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes per-element difference between two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between array and scalar
            </summary>
            <param name="value">Subtracted scalar. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between array and scalar
            </summary>
            <param name="value">Subtracted scalar. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubRS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between scalar and array
            </summary>
            <param name="value">Scalar to subtract from. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubRS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes difference between scalar and array
            </summary>
            <param name="value">Scalar to subtract from. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sum">
            <summary>
            Summarizes array elements
            </summary>
            <returns>sum S of array elements, independently for each channel</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
            <param name="V">Optional right orthogonal matrix (N×N) </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            Performs singular value decomposition of real floating-point matrix
            </summary>
            <param name="W">Resulting singular value matrix (M×N or N×N) or vector (N×1). </param>
            <param name="U">Optional left orthogonal matrix (M×M or M×N). If CV_SVD_U_T is specified, the number of rows and columns in the sentence above should be swapped. </param>
            <param name="V">Optional right orthogonal matrix (N×N) </param>
            <param name="flags">Operation flags</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Threshold(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            Applies fixed-level threshold to array elements.
            </summary>
            <param name="dst">Destination array; must be either the same type as src or 8-bit. </param>
            <param name="threshold">Threshold value. </param>
            <param name="max_value">Maximum value to use with CV_THRESH_BINARY and CV_THRESH_BINARY_INV thresholding types. </param>
            <param name="threshold_type">Thresholding type.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Trace">
            <summary>
            Returns trace of matrix
            </summary>
            <returns>sum of diagonal elements of the matrix src1</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Transpose(OpenCvSharp.CvArr)">
            <summary>
            Transposes matrix
            </summary>
            <param name="dst">The destination matrix. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.T(OpenCvSharp.CvArr)">
            <summary>
            Transposes matrix
            </summary>
            <param name="dst">The destination matrix. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Transforms image to compensate lens distortion.
            </summary>
            <param name="dst">The output (corrected) image. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Transforms image to compensate lens distortion.
            </summary>
            <param name="dst">The output (corrected) image. </param>
            <param name="intrinsic_matrix">The camera matrix (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortion_coeffs">The vector of distortion coefficients, 4x1 or 1x4 [k1, k2, p1, p2]. </param>
            <param name="new_camera_matrix"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ValidateDisparity(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ValidateDisparity(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="disp12MaxDiff"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            Applies perspective transformation to the image.
            </summary>
            <param name="dst">Destination image. </param>
            <param name="map_matrix">3x3 transformation matrix. </param>
            <param name="flags">A combination of interpolation method and the optional flags.</param>
            <param name="fillval">A value used to fill outliers. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Watershed(OpenCvSharp.CvArr)">
            <summary>
            Does watershed segmentation.
            </summary>
            <param name="markers">The input/output 32-bit single-channel image (map) of markers. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>am>
        </member>
        <member name="M:OpenCvSharp.CvArr.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two arrays
            </summary>
            <param name="src2">The second source array. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.XorS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.XorS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on array and scalar
            </summary>
            <param name="value">Scalar to use in the operation. </param>
            <param name="dst">The destination array. </param>
            <param name="mask">Operation mask, 8-bit single channel array; specifies elements of destination array to be changed. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.#ctor(System.Boolean)">
            <summary>
            Constructor 
            </summary>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesStandard(System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesStandard(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesProbabilistic(System.Double,System.Double,System.Int32)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesProbabilistic(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in binary image using Hough transform.
            </summary>
            <param name="rho">Distance resolution in pixel-related units. </param>
            <param name="theta">Angle resolution measured in radians. </param>
            <param name="threshold">Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold. </param>
            <param name="param1">The first method-dependent parameter.</param>
            <param name="param2">The second method-dependent parameter.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Merge(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Composes multi-channel array from several single-channel arrays or inserts a single channel into the array. (cvMerge)
            </summary>
            <param name="src0">Input channel 0</param>
            <param name="src1">Input channel 1</param>
            <param name="src2">Input channel 2</param>
            <param name="src3">Input channel 3</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtPlaneToPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Composes multi-channel array from several single-channel arrays or inserts a single channel into the array. (cvCvtPlaneToPix)
            </summary>
            <param name="src0">Input channel 0</param>
            <param name="src1">Input channel 1</param>
            <param name="src2">Input channel 2</param>
            <param name="src3">Input channel 3</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandArr(OpenCvSharp.CvRNG,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills array with random numbers and updates the RNG state
            </summary>
            <param name="rng">RNG state initialized by cvRNG. </param>
            <param name="dist_type">Distribution type.</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String)">
            <summary>
            Saves the image to the specified file. The image format is chosen depending on the filename extension, see cvLoadImage. 
            Only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function. 
            </summary>
            <param name="filename">Name of the file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String,System.Int32[])">
            <summary>
            Saves the image to the specified file. The image format is chosen depending on the filename extension, see cvLoadImage. 
            Only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function. 
            </summary>
            <param name="filename">Name of the file. </param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Saves the image to the specified file. The image format is chosen depending on the filename extension, see cvLoadImage. 
            Only 8-bit single-channel or 3-channel (with 'BGR' channel order) images can be saved using this function. 
            </summary>
            <param name="filename">Name of the file. </param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvArr.Dims">
            <summary>
            Get number of dimensions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemType">
            <summary>
            Get type of the array
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemChannels">
            <summary>
            Get number of channels
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemDepth">
            <summary>
            Get bit Depth
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32)">
            <summary>
            Return the particular array element (cvGet1D/Set1D)
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32,System.Int32)">
            <summary>
            Return the particular array element (cvGet2D/Set2D)
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the particular array element (cvGet3D/Set3D)
            </summary>
            <param name="idx0">The first zero-based component of the element index </param>
            <param name="idx1">The second zero-based component of the element index </param>
            <param name="idx2">The third zero-based component of the element index </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvTreeNode*</param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.Initialize(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvTreeNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvTreeNode`1.SizeOf">
            <summary>
            sizeof(CvTreeNode)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.InsertNodeIntoTree(OpenCvSharp.CvTreeNode{`0},OpenCvSharp.CvTreeNode{`0})">
            <summary>
            Adds new node to the tree
            </summary>
            <param name="parent">The parent node that is already in the tree. </param>
            <param name="frame">The top level node. If parent and frame are the same, v_prev  field of node is set to null rather than parent. </param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.RemoveNodeFromTree(OpenCvSharp.CvTreeNode{`0})">
            <summary>
            Removes node from tree
            </summary>
            <param name="frame">The top level node. If node->v_prev = null and node->h_prev is null (i.e. if node is the first child of frame), 
            frame->v_next is set to node->h_next (i.e. the first child or frame is changed). </param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.TreeToNodeSeq(System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Gathers all node pointers to the single sequence
            </summary>
            <param name="header_size">Header size of the created sequence (sizeof(CvSeq) is the most used value). </param>
            <param name="storage">Container for the sequence. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.Flags">
            <summary>
            miscellaneous flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HeaderSize">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HPrev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HNext">
            <summary>
            next sequence 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.VPrev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.VNext">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeq._storage">
            <summary>
            to keep alive storage
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence. header_size=sizeof(CvSeq)
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="elem_size">Size of the sequence elements in bytes. The size must be consistent with the sequence type. For example, for a sequence of points to be created, the element type CV_SEQ_ELTYPE_POINT should be specified and the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header; must be greater or equal to sizeof(CvSeq). If a specific type or its extension is indicated, this type must fit the base type header. </param>
            <param name="elem_size">Size of the sequence elements in bytes. The size must be consistent with the sequence type. For example, for a sequence of points to be created, the element type CV_SEQ_ELTYPE_POINT should be specified and the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSeq*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Initialize(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSeq*</param>
        </member>
        <member name="F:OpenCvSharp.CvSeq.SizeOf">
            <summary>
            sizeof(CvSeq)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.CalcPGH(OpenCvSharp.CvHistogram)">
            <summary>
            Calculates pair-wise geometrical histogram for contour
            </summary>
            <param name="hist">Calculated histogram; must be two-dimensional. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ClearSeq">
            <summary>
            Clears sequence
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Clone">
            <summary>
            Creates a copy of sequence (cvCloneSeq).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Clone(OpenCvSharp.CvMemStorage)">
            <summary>
            Creates a copy of sequence (cvCloneSeq).
            </summary>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.System#ICloneable#Clone">
            <summary>
            ICloneable.Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ContoursMoments">
            <summary>
            Alias for Moments with CvSeq contours
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.CreateContourTree(OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Creates hierarchical representation of contour
            </summary>
            <param name="storage">Container for output tree. </param>
            <param name="threshold">Approximation accuracy. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ElemIdx``1(``0)">
            <summary>
            Returns index of concrete sequence element (cvSeqElemIdx).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="element">the element within the sequence. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ElemIdx``1(``0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            Returns index of concrete sequence element (cvSeqElemIdx).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="element">the element within the sequence. </param>
            <param name="block">the address of the sequence block that contains the element is stored in this location. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.GetSeqElem``1(System.Int32)">
            <summary>
            Returns pointer to sequence element by its index
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="index">Index of element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Insert``1(System.Int32,``0)">
            <summary>
            Inserts element in sequence middle (cvSeqInsert).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="before_index">Index before which the element is inserted. Inserting before 0 (the minimal allowed value of the parameter) is equal to cvSeqPushFront and inserting before seq->total (the maximal allowed value of the parameter) is equal to cvSeqPush. </param>
            <param name="element">Inserted element. </param>
            <returns>Inserted element. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.InsertSlice(System.Int32,OpenCvSharp.CvArr)">
            <summary>
            Inserts array in the middle of sequence (cvSeqInsertSlice).
            </summary>
            <param name="before_index">The part of the sequence to remove. </param>
            <param name="from_arr">The array to take elements from. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Invert">
            <summary>
            Reverses the order of sequence elements (cvSeqInvert).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Remove(System.Int32)">
            <summary>
            Removes element from sequence middle (cvSeqRemove).
            </summary>
            <param name="index">Index of removed element. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.RemoveSlice(OpenCvSharp.CvSlice)">
            <summary>
            Removes sequence slice (cvSeqRemoveSlice).
            </summary>
            <param name="slice">The part of the sequence to remove. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Partition(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc)">
            <summary>
            Splits sequence into equivalence classes
            </summary>
            <param name="storage">The storage to store the sequence of equivalence classes. If it is null, the function uses seq->storage for output labels. </param>
            <param name="labels">Output parameter. Double pointer to the sequence of 0-based labels of input sequence elements. </param>
            <param name="is_equal">The relation function that should return non-zero if the two particular sequence elements are from the same class, and zero otherwise. The partitioning algorithm uses transitive closure of the relation function as equivalence criteria. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Pop``1">
            <summary>
            Removes element from sequence end (cvSeqPop).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <returns>removed element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PopFront``1">
            <summary>
            Removes element from sequence beginning (cvSeqPopFront).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <returns>removed element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PopMulti``1(System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            Removes several elements from the either end of sequence (cvSeqPopMulti).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="count">Number of elements to pop. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Push">
            <summary>
            allocates a space for one more element (cvSeqPush)．
            </summary>
            <returns>pointer to the allocated element. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Push``1(``0)">
            <summary>
            Adds element to sequence end (cvSeqPush)．
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="element">Added element. </param>
            <returns>pointer to the allocated element. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PushFront``1(``0)">
            <summary>
            Adds element to sequence beginning (cvSeqPushFront).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="element">Added element. </param>
            <returns>pointer to the added element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PushMulti``1(``0[],OpenCvSharp.InsertPosition)">
            <summary>
            Pushes several elements to the either end of sequence (cvSeqPushMulti).
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="elements">Added elements. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Search(System.IntPtr,OpenCvSharp.CvCmpFunc,System.Boolean,System.Int32@)">
            <summary>
            Searches element in sequence (cvSeqSearch).
            </summary>
            <param name="elem">The element to look for </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation</param>
            <param name="is_sorted">Whether the sequence is sorted or not. </param>
            <param name="elem_idx">Output parameter; index of the found element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.SetBlockSize(System.Int32)">
            <summary>
            Sets up sequence block size
            </summary>
            <param name="delta_elems">Desirable sequence block size in elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <param name="copy_data">The flag that indicates whether to copy the elements of the extracted slice (copy_data=true) or not (copy_data=false) </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Sort(OpenCvSharp.CvCmpFunc)">
            <summary>
            Sorts sequence element using the specified comparison function (cvSeqSort).
            </summary>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation (see the above declaration and the example below) - similar function is used by qsort from C runtime except that in the latter userdata is not used </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartAppend">
            <summary>
            Initializes process of writing data to sequence (cvStartAppendToSeq).
            </summary>
            <returns>Writer state; initialized by the function. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartRead(OpenCvSharp.CvSeqReader)">
            <summary>
            Initializes process of sequential reading from sequence (cvStartReadSeq).
            </summary>
            <param name="reader">Reader state; initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartRead(OpenCvSharp.CvSeqReader,System.Boolean)">
            <summary>
            Initializes process of sequential reading from sequence (cvStartReadSeq).
            </summary>
            <param name="reader">Reader state; initialized by the function. </param>
            <param name="reverse">Determines the direction of the sequence traversal. If reverse is false, the reader is positioned at the first sequence element, otherwise it is positioned at the last element. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ToArray``1">
            <summary>
            Copies sequence to one continuous block of memory (cvCvtSeqToArray).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ToArray``1(OpenCvSharp.CvSlice)">
            <summary>
            Copies sequence to one continuous block of memory (cvCvtSeqToArray).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="slice">The sequence part to copy to the array. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSeq.HPrev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.HNext">
            <summary>
            next sequence 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.VPrev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.VNext">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Total">
            <summary>
            total number of elements
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.ElemSize">
            <summary>
            size of sequence element in bytes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.BlockMax">
            <summary>
            maximal bound of the last block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Ptr">
            <summary>
            current write pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.DeltaElems">
            <summary>
            how many elements allocated when the sequence grows (sequence granularity)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Storage">
            <summary>
            where the seq is stored
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.FreeBlocks">
            <summary>
            free blocks list
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.First">
            <summary>
            pointer to the first sequence block
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty set
            </summary>
            <param name="set_flags">Type of the created set. </param>
            <param name="header_size">Set header size; may not be less than sizeof(CvSet). </param>
            <param name="elem_size">Set element size; may not be less than CvSetElem. </param>
            <param name="storage">Container for the set. </param>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSet*</param>
        </member>
        <member name="M:OpenCvSharp.CvSet.Initialize(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSet*</param>
        </member>
        <member name="F:OpenCvSharp.CvSet.SizeOf">
            <summary>
            sizeof(CvSet)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.ClearSet">
            <summary>
            Clears set
            </summary>
            <returns>The function cvClearSet removes all elements from set. It has O(1) time complexity.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.GetSetElem(System.Int32)">
            <summary>
            Finds set element by its index
            </summary>
            <param name="index">Index of the set element within a sequence. </param>
            <returns>the pointer to it or null if the index is invalid or the corresponding node is free.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd">
            <summary>
            Occupies a node in the set
            </summary>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd(OpenCvSharp.CvSetElem)">
            <summary>
            Occupies a node in the set
            </summary>
            <param name="elem">Optional input argument, inserted element. If not null, the function copies the data to the allocated node (The MSB of the first integer field is cleared after copying). </param>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd(OpenCvSharp.CvSetElem,OpenCvSharp.CvSetElem@)">
            <summary>
            Occupies a node in the set
            </summary>
            <param name="elem">Optional input argument, inserted element. If not null, the function copies the data to the allocated node (The MSB of the first integer field is cleared after copying). </param>
            <param name="inserted_elem">Optional output argument; the pointer to the allocated cell. </param>
            <returns>the index to the node</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetNew">
            <summary>
            Adds element to set (fast variant)
            </summary>
            <returns>pointer to a new node</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetRemove(System.Int32)">
            <summary>
            Removes element from set
            </summary>
            <param name="index">Index of the removed element. </param>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetRemoveByPtr(System.IntPtr)">
            <summary>
            Removes set element given its pointer
            </summary>
            <param name="elem">Removed element. </param>
        </member>
        <member name="P:OpenCvSharp.CvSet.FreeElems">
            <summary>
            list of free nodes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSet.ActiveCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty graph
            </summary>
            <param name="graph_flags">Type of the created graph. Usually, it is either CV_SEQ_KIND_GRAPH for generic unoriented graphs and CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED for generic oriented graphs. </param>
            <param name="vtx_size">Graph vertex size; the custom vertex structure must start with CvGraphVtx  (use CV_GRAPH_VERTEX_FIELDS()) </param>
            <param name="edge_size">Graph edge size; the custom edge structure must start with CvGraphEdge  (use CV_GRAPH_EDGE_FIELDS()) </param>
            <param name="storage">The graph container. </param>
            <remarks>The function cvCreateGraph creates an empty graph and returns it.</remarks>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Creates empty graph
            </summary>
            <param name="graph_flags">Type of the created graph. Usually, it is either CV_SEQ_KIND_GRAPH for generic unoriented graphs and CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED for generic oriented graphs. </param>
            <param name="header_size">Graph header size; may not be less than sizeof(CvGraph).</param>
            <param name="vtx_size">Graph vertex size; the custom vertex structure must start with CvGraphVtx  (use CV_GRAPH_VERTEX_FIELDS()) </param>
            <param name="edge_size">Graph edge size; the custom edge structure must start with CvGraphEdge  (use CV_GRAPH_EDGE_FIELDS()) </param>
            <param name="storage">The graph container. </param>
            <remarks>The function cvCreateGraph creates an empty graph and returns it.</remarks>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvGraph*</param>
        </member>
        <member name="M:OpenCvSharp.CvGraph.Initialize(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvGraph*</param>
        </member>
        <member name="F:OpenCvSharp.CvGraph.SizeOf">
            <summary>
            sizeof(CvGraph) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.ClearGraph">
            <summary>
            Returns index of graph vertex
            </summary>
            <remarks>The function cvClearGraph removes all vertices and edges from the graph. The function has O(1) time complexity.</remarks>
        </member>
        <member name="M:OpenCvSharp.CvGraph.CloneGraph(OpenCvSharp.CvMemStorage)">
            <summary>
            Clone graph
            </summary>
            <param name="storage">Container for the copy. </param>
            <returns>The function cvCloneGraph creates full copy of the graph. If the graph vertices or edges have pointers to some external data, it still be shared between the copies. The vertex and edge indices in the new graph may be different from the original, because the function defragments the vertex and edge sets.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.FindGraphEdge(System.Int32,System.Int32)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphFindEdge(System.Int32,System.Int32)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.FindGraphEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphFindEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Finds edge in graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvFindGraphEdge finds the graph edge connecting two specified vertices and returns pointer to it or NULL if the edge does not exists.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <param name="inserted_edge">Optional output parameter to contain the address of the inserted edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            Adds edge to graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <param name="edge">Optional input parameter, initialization data for the edge. </param>
            <param name="inserted_edge">Optional output parameter to contain the address of the inserted edge. </param>
            <returns>The function cvGraphAddEdge connects two specified vertices. The function returns 1 if the edge has been added successfully, 0 if the edge connecting the two vertices exists already and -1 if either of the vertices was not found, the starting and the ending vertex are the same or there is some other critical situation. In the latter case (i.e. when the result is negative) the function also reports an error by default.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx">
            <summary>
            Adds vertex to graph
            </summary>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx(OpenCvSharp.CvGraphVtx)">
            <summary>
            Adds vertex to graph
            </summary>
            <param name="vtx">Optional input argument used to initialize the added vertex (only user-defined fields beyond sizeof(CvGraphVtx) are copied). </param>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx@)">
            <summary>
            Adds vertex to graph
            </summary>
            <param name="vtx">Optional input argument used to initialize the added vertex (only user-defined fields beyond sizeof(CvGraphVtx) are copied). </param>
            <param name="inserted_vtx">The address of the new vertex is written there. </param>
            <returns>The function cvGraphAddVtx adds a vertex to the graph and returns the vertex index.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphEdgeIdx(OpenCvSharp.CvGraphEdge)">
            <summary>
            Returns index of graph edge
            </summary>
            <param name="edge">Graph edge. </param>
            <returns>The function cvGraphEdgeIdx returns index of the graph edge.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphGetEdgeCount">
            <summary>
            Returns count of edges
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphGetVtxCount">
            <summary>
            Returns count of vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes edge from graph
            </summary>
            <param name="start_idx">Index of the starting vertex of the edge. </param>
            <param name="end_idx">Index of the ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <remarks>The function cvGraphRemoveEdge removes the edge connecting two specified vertices. If the vertices are not connected [in that order], the function does nothing. </remarks>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            Removes edge from graph
            </summary>
            <param name="start_vtx">Starting vertex of the edge. </param>
            <param name="end_vtx">Ending vertex of the edge. For unoriented graph the order of the vertex parameters does not matter. </param>
            <remarks>The function cvGraphRemoveEdgeByPtr removes the edge connecting two specified vertices. If the vertices are not connected [in that order], the function does nothing.</remarks>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveVtx(System.Int32)">
            <summary>
            Removes vertex from graph
            </summary>
            <param name="index">Index of the removed vertex. </param>
            <returns>The function cvGraphRemoveAddVtx removes a vertex from the graph together with all the edges incident to it. The function reports an error, if the input vertex does not belong to the graph. The return value is number of edges deleted, or -1 if the vertex does not belong to the graph.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveVtxByPtr(OpenCvSharp.CvGraphVtx)">
            <summary>
            Removes vertex from graph
            </summary>
            <param name="vtx">Vertex to remove </param>
            <returns>The function cvGraphRemoveVtxByPtr removes a vertex from the graph together with all the edges incident to it. The function reports an error, if the vertex does not belong to the graph. The return value is number of edges deleted, or -1 if the vertex does not belong to the graph.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxDegree(System.Int32)">
            <summary>
            Counts edges indicent to the vertex
            </summary>
            <param name="vtx_idx">Index of the graph vertex.  </param>
            <returns>The function cvGraphVtxDegree returns the number of edges incident to the specified vertex, both incoming and outcoming. </returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxDegreeByPtr(OpenCvSharp.CvGraphVtx)">
            <summary>
            Counts edges indicent to the vertex
            </summary>
            <param name="vtx">Index of the graph vertex.  </param>
            <returns>The function cvGraphVtxDegree returns the number of edges incident to the specified vertex, both incoming and outcoming.</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxIdx(OpenCvSharp.CvGraphVtx)">
            <summary>
            Returns index of graph vertex
            </summary>
            <param name="vtx">Graph vertex. </param>
            <returns>The function cvGraphVtxIdx returns index of the graph vertex.</returns>
        </member>
        <member name="P:OpenCvSharp.CvGraph.Edges">
            <summary>
            Set of edges
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor(OpenCvSharp.CvRect,OpenCvSharp.CvMemStorage)">
            <summary>
            Initializes using cvCreateSubdivDelaunay2D
            </summary>
            <param name="rect"></param>
            <param name="storage"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSubdiv2D*</param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Initialize(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSubdiv2D*</param>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2D.SizeOf">
            <summary>
            sizeof(CvSubdiv2D)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.CalcVoronoi2D">
            <summary>
            Calculates coordinates of Voronoi diagram cells (CalcSubdivVoronoi2D).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.ClearVoronoi2D">
            <summary>
            Removes all virtual points (cvClearSubdivVoronoi2D).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.FindNearestPoint2D(OpenCvSharp.CvPoint2D32f)">
            <summary>
            Finds the closest subdivision vertex to given point
            </summary>
            <param name="pt">Input point. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Insert(OpenCvSharp.CvPoint2D32f)">
            <summary>
            Inserts a single point to Delaunay triangulation (cvSubdivDelaunay2D).
            </summary>
            <param name="pt">Inserted point. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.InitSubdivDelaunay2D(OpenCvSharp.CvRect)">
            <summary>
            CvSubdiv2Dの初期化
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Locate(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@)">
            <summary>
            Inserts a single point to Delaunay triangulation (cvSubdiv2DLocate).
            </summary>
            <param name="pt">The point to locate. </param>
            <param name="edge">The output edge the point falls onto or right to. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Locate(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@,OpenCvSharp.CvSubdiv2DPoint@)">
            <summary>
            Inserts a single point to Delaunay triangulation (cvSubdiv2DLocate).
            </summary>
            <param name="pt">The point to locate. </param>
            <param name="edge">The output edge the point falls onto or right to. </param>
            <param name="vertex">Optional output vertex double pointer the input point coinsides with. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.QuadEdges">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.IsGeometryValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.RecentEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.IplConvKernel">
            <summary>
            The structure which can be used as a structuring element in the morphological operations.
            </summary>
        </member>
        <member name="F:OpenCvSharp.IplConvKernel._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape)">
            <summary>
            Allocates and fills the structure IplConvKernel, which can be used as a structuring element in the morphological operations.
            </summary>
            <param name="cols">Number of columns in the structuring element. </param>
            <param name="rows">Number of rows in the structuring element. </param>
            <param name="anchor_x">Relative horizontal offset of the anchor point. </param>
            <param name="anchor_y">Relative vertical offset of the anchor point. </param>
            <param name="shape">Shape of the structuring element.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape,System.Int32[0:,0:])">
            <summary>
            Allocates and fills the structure IplConvKernel, which can be used as a structuring element in the morphological operations.
            </summary>
            <param name="cols">Number of columns in the structuring element. </param>
            <param name="rows">Number of rows in the structuring element. </param>
            <param name="anchor_x">Relative horizontal offset of the anchor point. </param>
            <param name="anchor_y">Relative vertical offset of the anchor point. </param>
            <param name="shape">Shape of the structuring element.</param>
            <param name="values">Pointer to the structuring element data, a plane array, representing row-by-row scanning of the element matrix. 
            Non-zero values indicate points that belong to the element. If the pointer is null, then all values are considered non-zero, 
            that is, the element is of a rectangular shape. This parameter is considered only if the shape is CV_SHAPE_CUSTOM . </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.IntPtr)">
            <summary>
            Initialize by a native pointer (IplConvKernel*)
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.IplConvKernel.SizeOf">
            <summary>
            sizeof(IplConvKernel) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NCols">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.AnchorX">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.AnchorY">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.Values">
            <summary>
            int*
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NShiftR">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvString">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvString.Len">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvString.Ptr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvString.#ctor(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="len"></param>
        </member>
        <member name="M:OpenCvSharp.CvString.op_Implicit(OpenCvSharp.CvString)~System.String">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvString.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.StereoRectificationFlag">
            <summary>
            The operation flags for cvStereoRectify
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoRectificationFlag.Zero">
            <summary>
            Default value (=0).
            the function can shift one of the image in horizontal or vertical direction (depending on the orientation of epipolar lines) in order to maximise the useful image area. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoRectificationFlag.ZeroDisparity">
            <summary>
            the function makes the principal points of each camera have the same pixel coordinates in the rectified views. 
            [CV_CALIB_ZERO_DISPARITY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStatus">
            <summary>
            Error status
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsOk">
            <summary>
            everithing is ok [CV_StsOk]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBackTrace">
            <summary>
            pseudo error for back trace [CV_StsBackTrace]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsError">
            <summary>
            unknown /unspecified error [CV_StsError]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsInternal">
            <summary>
            internal error (bad state)  [CV_StsInternal]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNoMem">
            <summary>
            insufficient memory [CV_StsNoMem]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadArg">
            <summary>
            function arg/param is bad [CV_StsBadArg]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadFunc">
            <summary>
            unsupported function [CV_StsBadFunc]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNoConv">
            <summary>
            iter. didn't converge [CV_StsNoConv]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsAutoTrace">
            <summary>
            tracing [CV_StsAutoTrace]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.HeaderIsNull">
            <summary>
            image header is NULL [CV_HeaderIsNull]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadImageSize">
            <summary>
            image size is invalid [CV_BadImageSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOffset">
            <summary>
            offset is invalid [CV_BadOffset]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadDataPtr">
            <summary>
            [CV_BadOffset]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadStep">
            <summary>
            [CV_BadStep]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadModelOrChSeq">
            <summary>
            [CV_BadModelOrChSeq]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadNumChannels">
            <summary>
            [CV_BadNumChannels]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadNumChannel1U">
            <summary>
            [CV_BadNumChannel1U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadDepth">
            <summary>
            [CV_BadDepth]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadAlphaChannel">
            <summary>
            [CV_BadAlphaChannel]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOrder">
            <summary>
            [CV_BadOrder]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOrigin">
            <summary>
            [CV_BadOrigin]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadAlign">
            <summary>
            [CV_BadAlign]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadCallBack">
            <summary>
            [CV_BadCallBack]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadTileSize">
            <summary>
            [CV_BadTileSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadCOI">
            <summary>
            [CV_BadCOI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadROISize">
            <summary>
            [CV_BadROISize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.MaskIsTiled">
            <summary>
            [CV_MaskIsTiled]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNullPtr">
            <summary>
            null pointer [CV_StsNullPtr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsVecLengthErr">
            <summary>
            incorrect vector length [CV_StsVecLengthErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsFilterStructContentErr">
            <summary>
            incorr. filter structure content [CV_StsFilterStructContentErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsKernelStructContentErr">
            <summary>
            incorr. transform kernel content [CV_StsKernelStructContentErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsFilterOffsetErr">
            <summary>
            incorrect filter ofset value [CV_StsFilterOffsetErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadSize">
            <summary>
            the input/output structure size is incorrect [CV_StsBadSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsDivByZero">
            <summary>
            division by zero [CV_StsDivByZero]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsInplaceNotSupported">
            <summary>
            in-place operation is not supported [CV_StsInplaceNotSupported]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsObjectNotFound">
            <summary>
            request can't be completed [CV_StsObjectNotFound]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnmatchedFormats">
            <summary>
            formats of input/output arrays differ [CV_StsUnmatchedFormats]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadFlag">
            <summary>
            flag is wrong or not supported [CV_StsBadFlag]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadPoint">
            <summary>
            bad CvPoint [CV_StsBadPoint]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadMask">
            <summary>
            bad format of mask (neither 8uC1 nor 8sC1) [CV_StsBadMask]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnmatchedSizes">
            <summary>
            sizes of input/output structures do not match [CV_StsUnmatchedSizes]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnsupportedFormat">
            <summary>
            the data format/type is not supported by the function [CV_StsUnsupportedFormat]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsOutOfRange">
            <summary>
            some of parameters are out of range [CV_StsOutOfRange]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsParseError">
            <summary>
            invalid syntax/structure of the parsed file [CV_StsParseError]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNotImplemented">
            <summary>
            the requested function/feature is not implemented [CV_StsNotImplemented]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadMemBlock">
            <summary>
            an allocated block has been corrupted [CV_StsBadMemBlock]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CapturePosAviRatio">
            <summary>
            Position in relative units
            </summary>
        </member>
        <member name="F:OpenCvSharp.CapturePosAviRatio.Start">
            <summary>
            Start of the file
            </summary>
        </member>
        <member name="F:OpenCvSharp.CapturePosAviRatio.End">
            <summary>
            End of the file
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLSH">
            <summary>
            Locality Sensitive Hash (LSH) table
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSH._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="L"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.FromPtr(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Add(OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Add(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="data"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Query(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Query the LSH n times for at most k nearest points; data is n x d,
            indices and dist are n x k. At most emax stored points will be accessed. 
            </summary>
            <param name="query_points"></param>
            <param name="indices"></param>
            <param name="dist"></param>
            <param name="k"></param>
            <param name="emax"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Release">
            <summary>
            Free the given LSH structure.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Remove(OpenCvSharp.CvMat)">
            <summary>
            Remove vectors from LSH, as addressed by given indices.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="P:OpenCvSharp.CvLSH.Size">
            <summary>
            Return the number of vectors in the LSH.
            </summary>
            <returns>number of vectors</returns>
        </member>
        <member name="T:OpenCvSharp.CvRect">
            <summary>
            Offset and size of a rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.SizeOf">
            <summary>
            sizeof(CvRect)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.X">
            <summary>
            x-coordinate of the left-most rectangle corner[s]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Y">
            <summary>
            y-coordinate of the top-most or bottom-most rectangle corner[s]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Width">
            <summary>
            Width of the rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Height">
            <summary>
            Height of the rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Empty">
            <summary>
            Represents a CvRect structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate of the left-most rectangle corner[s]</param>
            <param name="y">y-coordinate of the top-most or bottom-most rectangle corner[s]</param>
            <param name="width">width of the rectangle</param>
            <param name="height">height of the rectangle</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.#ctor(OpenCvSharp.CvPoint,OpenCvSharp.CvSize)">
            <summary>
            Constructor
            </summary>
            <param name="point">coordinate of the left-most rectangle corner</param>
            <param name="size">size of the rectangle</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Equals(OpenCvSharp.CvRect)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Equality(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Inequality(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Addition(OpenCvSharp.CvRect,OpenCvSharp.CvPoint)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Subtraction(OpenCvSharp.CvRect,OpenCvSharp.CvPoint)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Addition(OpenCvSharp.CvRect,OpenCvSharp.CvSize)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Subtraction(OpenCvSharp.CvRect,OpenCvSharp.CvSize)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_BitwiseAnd(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_BitwiseOr(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="x">x-coordinate of the point</param>
            <param name="y">y-coordinate of the point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(OpenCvSharp.CvPoint)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="pt">point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(OpenCvSharp.CvRect)">
            <summary>
            Determines if the specified rectangle is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="rect">rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates this CvRect by the specified amount. 
            </summary>
            <param name="width">The amount to inflate this Rectangle horizontally. </param>
            <param name="height">The amount to inflate this Rectangle vertically. </param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(OpenCvSharp.CvSize)">
            <summary>
            Inflates this CvRect by the specified amount. 
            </summary>
            <param name="size">The amount to inflate this rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(OpenCvSharp.CvRect,System.Int32,System.Int32)">
            <summary>
            Creates and returns an inflated copy of the specified CvRect structure.
            </summary>
            <param name="rect">The Rectangle with which to start. This rectangle is not modified. </param>
            <param name="x">The amount to inflate this Rectangle horizontally. </param>
            <param name="y">The amount to inflate this Rectangle vertically. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Intersect(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Intersect(OpenCvSharp.CvRect)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="rect">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.InersectsWith(OpenCvSharp.CvRect)">
            <summary>
            Determines if this rectangle intersects with rect. 
            </summary>
            <param name="rect">Rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Union(OpenCvSharp.CvRect)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="rect">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Union(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CvRect.Top">
            <summary>
            Gets the y-coordinate of the top edge of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the Y and Height property values of this CvRect structure.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Left">
            <summary>
            Gets the x-coordinate of the left edge of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Right">
            <summary>
            Gets the x-coordinate that is the sum of X and Width property values of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Location">
            <summary>
            Coordinate of the left-most rectangle corner [CvPoint(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Size">
            <summary>
            Size of the rectangle [CvSize(Width, Height)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.TopLeft">
            <summary>
            Coordinate of the left-most rectangle corner [CvPoint(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.BottomRight">
            <summary>
            Coordinate of the right-most rectangle corner [CvPoint(X+Width, Y+Height)]
            </summary>
        </member>
        <member name="T:OpenCvSharp.IplImage">
            <summary>
            IPL image header
            </summary>
        </member>
        <member name="F:OpenCvSharp.IplImage._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Boolean)">
            <summary>
            Allocates memory
            </summary>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.String)">
            <summary>
            Loads an image from the specified file. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from the specified file. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <param name="flags">Specifies colorness and Depth of the loaded image.</param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Creates header and allocates data (cvCreateImage).
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Bit depth of image elements.</param>
            <param name="channels">Number of channels per element(pixel).</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Int32,System.Int32,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Creates header and allocates data (cvCreateImage).
            </summary>
            <param name="width">Image width. </param>
            <param name="height">Image height. </param>
            <param name="depth">Bit depth of image elements.</param>
            <param name="channels">Number of channels per element(pixel).</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">IntPtr</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromFile(System.String)">
            <summary>
            Creates the IplImage instance from image file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromFile(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Creates the IplImage instance from image file.
            First this function tries to use cvLoadImage. If failed, this function tries to use GDI+.  
            </summary>
            <param name="fileName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates the IplImage instance from System.Drawing.Bitmap
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.IntPtr)">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="size">Image width and height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pointer to the pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="width">Image width. </param>
            <param name="height">Image height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pointer to the pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,System.Array)">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Bit depth of image elements.</param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,OpenCvSharp.BitDepth,System.Int32,System.Array)">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="width">Image width. </param>
            <param name="height">Image height. </param>
            <param name="depth">Bit depth of image elements.</param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.Byte[])">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="size">Image width and height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="width">Image width. </param>
            <param name="height">Image height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.Int16[])">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="size">Image width and height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.Int16[])">
            <summary>
            Creates an IplImage instance from pixel data
            </summary>
            <param name="width">Image width. </param>
            <param name="height">Image height. </param>
            <param name="channels">Number of channels per element(pixel).</param>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.IplImage.SizeOf">
            <summary>
            sizeof(IplImage) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_UnaryPlus(OpenCvSharp.IplImage)">
            <summary>
            Unary plus operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_UnaryNegation(OpenCvSharp.IplImage)">
            <summary>
            Unary negation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_OnesComplement(OpenCvSharp.IplImage)">
            <summary>
            Logical nagation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Addition(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Binary plus operator (cvAdd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Addition(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            Binary plus operator (cvAddS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Subtraction(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Subtraction(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Multiply(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Multiplicative operator (cvMatMul)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Multiply(OpenCvSharp.IplImage,System.Double)">
            <summary>
            Multiplicative operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Division(OpenCvSharp.IplImage,System.Double)">
            <summary>
            Division operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseAnd(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Bitwise AND operator (cvAnd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseAnd(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise AND operator (cvAndS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseOr(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Bitwise OR operator (cvOr)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseOr(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise OR operator (cvOrS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_ExclusiveOr(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            Bitwise XOR operator (cvXor)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_ExclusiveOr(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise XOR operator (cvXorS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CheckChessboard(OpenCvSharp.CvSize)">
            <summary>
            Performs a fast check if a chessboard is in the input image. 
            This is a workaround to a problem of cvFindChessboardCorners being slow on images with no chessboard
            </summary>
            <param name="size">chessboard size</param>
            <returns>Returns 1 if a chessboard can be in this image and findChessboardCorners should be called, 
            0 if there is no chessboard, -1 in case of error</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.Clone">
            <summary>
            Makes a full copy of image
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CreateHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Allocates, initializes, and returns structure IplImage (cvCreateImageHeader).
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <returns>Reference to image header</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.DeleteMoire">
            <summary>
            Deletes moire in given image
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.FindFace(OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetCOI">
            <summary>
            Returns index of channel of interest
            </summary>
            <returns>channel of interest of the image (it returns 0 if all the channels are selected)</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetROI">
            <summary>
            Returns image ROI coordinates (cvGetImageROI).
            The rectangle cvRect(0,0,image.Width,image.Height) is returned if there is no ROI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            Initializes allocated by user image header (cvInitImageHeader).
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin)">
            <summary>
            Initializes allocated by user image header (cvInitImageHeader).
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <param name="origin">Origin of image</param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin,System.Int32)">
            <summary>
            Initializes allocated by user image header (cvInitImageHeader).
            </summary>
            <param name="size">Image width and height. </param>
            <param name="depth">Image depth. </param>
            <param name="channels">Number of channels. </param>
            <param name="origin">Origin of image</param>
            <param name="align">Alignment for image rows, typically 4 or 8 bytes. </param>
            <returns>Initialzed IplImage header</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.PostBoostingFindFace(OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.PyrSegmentation(OpenCvSharp.IplImage,System.Int32,System.Double,System.Double)">
            <summary>
            Does image segmentation by pyramids.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="level"></param>
            <param name="threshold1"></param>
            <param name="threshold2"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,System.Int32,System.Double,System.Double)">
            <summary>
            Does image segmentation by pyramids.
            </summary>
            <param name="dst">The destination image. </param>
            <param name="storage">Storage; stores the resulting sequence of connected components. </param>
            <param name="comp">Pointer to the output sequence of the segmented components. </param>
            <param name="level">Maximum level of the pyramid for the segmentation. </param>
            <param name="threshold1">Error threshold for establishing the links. </param>
            <param name="threshold2">Error threshold for the segments clustering. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.ResetROI">
            <summary>
            Releases image ROI. After that the whole image is considered selected (cvResetImageROI). 
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.SetImageCOI(System.Int32)">
            <summary>
            Sets channel of interest to given value (cvSetImageCOI).
            Value 0 means that all channels are selected, 1 means that the first channel is selected etc.
            </summary>
            <param name="coi">Channel of interest. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SetROI(OpenCvSharp.CvRect)">
            <summary>
            Sets image ROI to given rectangle (cvSetImageROI).
            </summary>
            <param name="rect">ROI rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weight of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weight of curvature energy, similar to alpha. </param>
            <param name="gamma">Weight of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weight of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weight of curvature energy, similar to alpha. </param>
            <param name="gamma">Weight of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
            <param name="calc_gradient">Gradient flag. If true, the function calculates gradient magnitude for every image pixel and consideres it as the energy field, otherwise the input image itself is considered. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weights of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weights of curvature energy, similar to alpha. </param>
            <param name="gamma">Weights of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            Changes contour position to minimize its energy
            </summary>
            <param name="points">Contour points (snake). </param>
            <param name="alpha">Weights of continuity energy, single float or array of length floats, one per each contour point. </param>
            <param name="beta">Weights of curvature energy, similar to alpha. </param>
            <param name="gamma">Weights of image energy, similar to alpha. </param>
            <param name="win">Size of neighborhood of every point used to search the minimum, both win.width and win.height must be odd. </param>
            <param name="criteria">Termination criteria. </param>
            <param name="calc_gradient">Gradient flag. If true, the function calculates gradient magnitude for every image pixel and consideres it as the energy field, otherwise the input image itself is considered. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.Split">
            <summary>
            Divides multi-channel array into several single-channel arrays
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.Transpose">
            <summary>
            Transposes matrix
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.T">
            <summary>
            Transposes matrix
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.CopyFrom(System.Drawing.Bitmap)">
            <summary>
            Copies pixel data from System.Drawing.Bitmap to this instance
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CopyPixelData(System.Array)">
            <summary>
            Copies pixel data to this image
            </summary>
            <param name="data">Pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CopyPixelData(System.IntPtr)">
            <summary>
            Copies pixel data to this image
            </summary>
            <param name="data">Pointer to the pixel data array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.ToBitmap">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.ToBitmap(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <param name="pf">Pixel Depth</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.ToBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <param name="dst">Bitmap</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawToHDC(System.IntPtr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="hdc"></param>
            <param name="dstRect"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawToHDC(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hdc"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="from_x"></param>
            <param name="from_y"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawToGraphics(System.Drawing.Graphics,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="dstRect"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawToGraphics(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="from_x"></param>
            <param name="from_y"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetSubImage(OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info">The SerializationInfo to populate with data. </param>
            <param name="context">The destination for this serialization. </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:OpenCvSharp.IplImage.Align">
            <summary>
            Alignment of image rows (4 or 8).
            OpenCV ignores it and uses widthStep instead
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.AlphaChannel">
            <summary>
            Ignored by OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.BorderMode">
            <summary>
            Border completion mode, ignored by OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.BorderConst">
            <summary>
            Ignored by OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ColorModel">
            <summary>
            Ignored by OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ChannelSeq">
            <summary>
            Ignored by OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.DataOrder">
            <summary>
            0 - interleaved color channels, 1 - separate color channels.
            cvCreateImage can only create interleaved images
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Depth">
            <summary>
            Pixel Depth in bits
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Height">
            <summary>
            Image height in pixels
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ID">
            <summary>
            version (=0)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageData">
            <summary>
            Pointer to aligned image data.
            You can access each pixel by this pointer casted as byte*. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageDataPtr">
            <summary>
            Pointer to aligned image data.
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageDataOrigin">
            <summary>
            Pointer to a very origin of image data (not necessarily aligned) -
            it is needed for correct image deallocation.
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageSize">
            <summary>
            image data size in bytes (=image->height*image->widthStep in case of interleaved data)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.MaskROI">
            <summary>
            Must be NULL in OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.NChannels">
            <summary>
            Most of OpenCV functions support 1,2,3 or 4 channels
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.NSize">
            <summary>
            sizeof(IplImage)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Origin">
            <summary>
            0 - top-left origin,
            1 - bottom-left origin (Windows bitmaps style)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ROIPointer">
            <summary>
            image ROI. when it is not NULL, this specifies image region to process
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Width">
            <summary>
            Image width in pixels
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.WidthStep">
            <summary>
            Size of aligned image row in bytes
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.TileInfo">
            <summary>
            Must be NULL in OpenCV
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Size">
            <summary>
            Gets size of the original image
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.COI">
            <summary>
            Gets/Sets COI (cvGetImageCOI/cvSetImageCOI)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ROI">
            <summary>
            Gets/Sets ROI (cvGetImageROI/cvSetImageROI)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Dims">
            <summary>
            Gets number of dimensions (=2)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Bpp">
            <summary>
            Bits per pixel
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvPoint2D64f">
            <summary>
            2D point with double precision floating-point coordinates
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.SizeOf">
            <summary>
            sizeof(CvPoint2D64f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.X">
            <summary>
            x-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.Y">
            <summary>
            y-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.Empty">
            <summary>
            Represents a CvPoint2D64f structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D64f)~OpenCvSharp.CvPoint">
            <summary>
            Creates a CvPoint with the coordinates of the specified CvPoint2D64f.
            </summary>
            <param name="self">A CvPoint2D64f that specifies the coordinates for the new CvPoint.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint)~OpenCvSharp.CvPoint2D64f">
            <summary>
            Creates a CvPoint2D64f with the coordinates of the specified CvPoint.
            </summary>
            <param name="p">A CvPoint that specifies the coordinates for the new CvPoint2D64f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D64f)~OpenCvSharp.CvPoint2D32f">
            <summary>
            Creates a CvPoint2D32f with the coordinates of the specified CvPoint2D64f.
            </summary>
            <param name="self">A CvPoint2D64f that specifies the coordinates for the new CvPoint2D32f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D32f)~OpenCvSharp.CvPoint2D64f">
            <summary>
            Creates a CvPoint2D64f with the coordinates of the specified CvPoint2D32f.
            </summary>
            <param name="p">A CvPoint2D32f that specifies the coordinates for the new CvPoint2D64f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.Equals(OpenCvSharp.CvPoint2D64f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Equality(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Inequality(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            Compares two CvPoint2D64f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D64f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_UnaryPlus(OpenCvSharp.CvPoint2D64f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_UnaryNegation(OpenCvSharp.CvPoint2D64f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Addition(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Subtraction(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Multiply(OpenCvSharp.CvPoint2D64f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.MatrixType">
            <summary>
            Type of the matrix elements.
            Usually it is specified in form (S|U|F)&lt;bit_depth&gt;C&lt;number_of_channels&gt;,
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C1">
            <summary>
            1-channel 8-bit unsigned integers [CV_8UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C2">
            <summary>
            2-channel 8-bit unsigned integers [CV_8UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C3">
            <summary>
            3-channel 8-bit unsigned integers [CV_8UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C4">
            <summary>
            4-channel 8-bit unsigned integers [CV_8UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C1">
            <summary>
            1-channel 8-bit signed integers [CV_8SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C2">
            <summary>
            2-channel 8-bit signed integers [CV_8SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C3">
            <summary>
            3-channel 8-bit signed integers [CV_8SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C4">
            <summary>
            4-channel 8-bit signed integers [CV_8SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C1">
            <summary>
            1-channel 16-bit unsigned integers [CV_16UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C2">
            <summary>
            2-channel 16-bit unsigned integers [CV_16UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C3">
            <summary>
            3-channel 16-bit unsigned integers [CV_16UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C4">
            <summary>
            4-channel 16-bit unsigned integers [CV_16UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C1">
            <summary>
            1-channel 16-bit signed integers [CV_16SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C2">
            <summary>
            2-channel 16-bit signed integers [CV_16SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C3">
            <summary>
            3-channel 16-bit signed integers [CV_16SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C4">
            <summary>
            4-channel 16-bit signed integers [CV_16SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C1">
            <summary>
            1-channel 32-bit signed integers [CV_32SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C2">
            <summary>
            2-channel 32-bit signed integers [CV_32SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C3">
            <summary>
            3-channel 32-bit signed integers [CV_32SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C4">
            <summary>
            4-channel 32-bit signed integers [CV_32SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C1">
            <summary>
            1-channel 32-bit floating-point numbers [CV_32FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C2">
            <summary>
            2-channel 32-bit floating-point numbers [CV_32FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C3">
            <summary>
            3-channel 32-bit floating-point numbers [CV_32FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C4">
            <summary>
            4-channel 32-bit floating-point numbers [CV_32FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C1">
            <summary>
            1-channel 64-bit floating-point numbers [CV_64FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C2">
            <summary>
            2-channel 64-bit floating-point numbers [CV_64FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C3">
            <summary>
            3-channel 64-bit floating-point numbers [CV_64FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C4">
            <summary>
            4-channel 64-bit floating-point numbers [CV_64FC4]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DistanceType">
            <summary>
            Type of distance for cvDistTransform
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.User">
            <summary>
            User defined distance  [CV_DIST_USER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L1">
            <summary>
            distance = |x1-x2| + |y1-y2|  [CV_DIST_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L2">
            <summary>
            the simple euclidean distance  [CV_DIST_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.C">
            <summary>
            distance = max(|x1-x2|,|y1-y2|)  [CV_DIST_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L12">
            <summary>
            L1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))  [CV_DIST_L12]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Fair">
            <summary>
            distance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998  [CV_DIST_FAIR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Welsch">
            <summary>
            distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846  [CV_DIST_WELSCH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Huber">
            <summary>
            distance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345  [CV_DIST_HUBER]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ColorConversion">
            <summary>
            Color conversion operation for cvCvtColor
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.DynamicInvoker`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.DynamicInvoker`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dllName">Name of library</param>
            <param name="functionName">Name of function</param>
        </member>
        <member name="M:OpenCvSharp.Utilities.DynamicInvoker`1.Dispose">
            <summary>
            Release library
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.IsDisposed">
            <summary>
            Returns true if this instance is disposed
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.DllName">
            <summary>
            Name of library to be loaded
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.FunctionName">
            <summary>
            Name of function to be called
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.PtrLib">
            <summary>
            Pointer which retrieved by LoadLibrary
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.PtrProc">
            <summary>
            Pointer which retrieved by GetProcAddress
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.Call">
            <summary>
            Delegate which is converted from function pointer
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvContour">
            <summary>
            Contour data
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeq`1">
            <summary>
            Generic growable sequence of elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.SeqType,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence. header_size=sizeof(CvSeq)
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="storage">Sequence location. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates sequence
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be set to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header; must be greater or equal to sizeof(CvSeq). If a specific type or its extension is indicated, this type must fit the base type header. </param>
            <param name="storage">Sequence location. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            CvSeq -> CvSeq&lt;T&gt;
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSeq*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.FromArray(System.Collections.Generic.IEnumerable{`0},OpenCvSharp.SeqType,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates CvSeq&lt;T&gt; from an IEnumerable&lt;T&gt; instance (ex. Array, List&lt;T&gt;)
            </summary>
            <param name="array">IEnumerable&lt;T&gt; instance</param>
            <param name="seq_flags">Flags of the created sequence</param>
            <param name="storage">Sequence location</param>
            <returns>CvSeq&lt;T&gt;</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Clone">
            <summary>
            Creates a copy of sequence (cvCloneSeq).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Clone(OpenCvSharp.CvMemStorage)">
            <summary>
            Creates a copy of sequence (cvCloneSeq).
            </summary>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ElemIdx(`0)">
            <summary>
            Returns index of concrete sequence element (cvSeqElemIdx).
            </summary>
            <param name="element">the element within the sequence. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ElemIdx(`0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            Returns index of concrete sequence element (cvSeqElemIdx).
            </summary>
            <param name="element">the element within the sequence. </param>
            <param name="block">the address of the sequence block that contains the element is stored in this location. </param>
            <returns>the index of a sequence element or a negative number if the element is not found.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.GetSeqElem(System.Int32)">
            <summary>
            Returns pointer to sequence element by its index
            </summary>
            <param name="index">Index of element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Insert(System.Int32,`0)">
            <summary>
            Inserts element in sequence middle (cvSeqInsert).
            </summary>
            <param name="before_index">Index before which the element is inserted. Inserting before 0 (the minimal allowed value of the parameter) is equal to cvSeqPushFront and inserting before seq->total (the maximal allowed value of the parameter) is equal to cvSeqPush. </param>
            <param name="element">Inserted element. </param>
            <returns>Inserted element. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Partition(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc{`0})">
            <summary>
            Splits sequence into equivalence classes
            </summary>
            <param name="storage">The storage to store the sequence of equivalence classes. If it is null, the function uses seq->storage for output labels. </param>
            <param name="labels">Output parameter. Double pointer to the sequence of 0-based labels of input sequence elements. </param>
            <param name="is_equal">The relation function that should return non-zero if the two particular sequence elements are from the same class, and zero otherwise. The partitioning algorithm uses transitive closure of the relation function as equivalence criteria. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Pop">
            <summary>
            Removes element from sequence end (cvSeqPop).
            </summary>
            <returns>removed element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PopFront">
            <summary>
            Removes element from sequence beginning (cvSeqPopFront).
            </summary>
            <returns>removed element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PopMulti(System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            Removes several elements from the either end of sequence (cvSeqPopMulti).
            </summary>
            <param name="count">Number of elements to pop. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Push(`0)">
            <summary>
            Adds element to sequence end (cvSeqPush)．
            </summary>
            <param name="element">Added element. </param>
            <returns>pointer to the allocated element. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PushFront(`0)">
            <summary>
            Adds element to sequence beginning (cvSeqPushFront).
            </summary>
            <param name="element">Added element. </param>
            <returns>pointer to the added element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PushMulti(`0[],OpenCvSharp.InsertPosition)">
            <summary>
            Pushes several elements to the either end of sequence (cvSeqPushMulti).
            </summary>
            <param name="elements">Added elements. </param>
            <param name="in_front">The flags specifying the modified sequence end</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Search(`0,OpenCvSharp.CvCmpFunc{`0},System.Boolean,System.Int32@)">
            <summary>
            Searches element in sequence (cvSeqSearch).
            </summary>
            <param name="elem">The element to look for </param>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation</param>
            <param name="is_sorted">Whether the sequence is sorted or not. </param>
            <param name="elem_idx">Output parameter; index of the found element. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            Makes separate header for the sequence slice (cvSeqSlice).
            </summary>
            <param name="slice">The part of the sequence to extract. </param>
            <param name="storage">The destination storage to keep the new sequence header and the copied data if any. If it is null, the function uses the storage containing the input sequence. </param>
            <param name="copy_data">The flag that indicates whether to copy the elements of the extracted slice (copy_data=true) or not (copy_data=false) </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Sort(OpenCvSharp.CvCmpFunc{`0})">
            <summary>
            Sorts sequence element using the specified comparison function (cvSeqSort).
            </summary>
            <param name="func">The comparison function that returns negative, zero or positive value depending on the elements relation (see the above declaration and the example below) - similar function is used by qsort from C runtime except that in the latter userdata is not used </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.StartRead(OpenCvSharp.CvSeqReader{`0})">
            <summary>
            Initializes process of sequential reading from sequence (cvStartReadSeq).
            </summary>
            <param name="reader">Reader state; initialized by the function. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.StartRead(OpenCvSharp.CvSeqReader{`0},System.Boolean)">
            <summary>
            Initializes process of sequential reading from sequence (cvStartReadSeq).
            </summary>
            <param name="reader">Reader state; initialized by the function. </param>
            <param name="reverse">Determines the direction of the sequence traversal. If reverse is false, the reader is positioned at the first sequence element, otherwise it is positioned at the last element. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ToArray">
            <summary>
            Copies sequence to one continuous block of memory (cvCvtSeqToArray).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ToArray(OpenCvSharp.CvSlice)">
            <summary>
            Copies sequence to one continuous block of memory (cvCvtSeqToArray).
            </summary>
            <param name="slice">The sequence part to copy to the array. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ApproxPoly(System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double)">
            <summary>
            Approximates polygonal curve(s) with desired precision.
            </summary>
            <param name="header_size">Header size of approximated curve[s]. </param>
            <param name="storage">Container for approximated contours. If it is null, the input sequences' storage is used. </param>
            <param name="method">Approximation method; only ApproxPolyMethod.DP is supported, that corresponds to Douglas-Peucker algorithm. </param>
            <param name="parameter">Method-specific parameter; in case of CV_POLY_APPROX_DP it is a desired approximation accuracy. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ApproxPoly(System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double,System.Boolean)">
            <summary>
            Approximates polygonal curve(s) with desired precision.
            </summary>
            <param name="header_size">Header size of approximated curve[s]. </param>
            <param name="storage">Container for approximated contours. If it is null, the input sequences' storage is used. </param>
            <param name="method">Approximation method; only ApproxPolyMethod.DP is supported, that corresponds to Douglas-Peucker algorithm. </param>
            <param name="parameter">Method-specific parameter; in case of CV_POLY_APPROX_DP it is a desired approximation accuracy. </param>
            <param name="parameter2">If case if src_seq is sequence it means whether the single sequence should be approximated 
            or all sequences on the same level or below src_seq (see cvFindContours for description of hierarchical contour structures). 
            And if src_seq is array (CvMat*) of points, the parameter specifies whether the curve is closed (parameter2==true) or not (parameter2==false). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A IEnumerator&lt;CvSeq&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.HPrev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.HNext">
            <summary>
            next sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.VPrev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.VNext">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.Item(System.Int32)">
            <summary>
            Indexer (cvGetSeqElem)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvContour.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContour.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvContour.SizeOf">
            <summary>
            sizeof(CvContour) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContour.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContour.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.ImageOrigin">
            <summary>
            Origin of IplImage
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageOrigin.TopLeft">
            <summary>
            top-left origin [IPL_ORIGIN_TL (0)]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageOrigin.BottomLeft">
            <summary>
            bottom-left origin (Windows bitmaps style) [IPL_ORIGIN_BL (1)]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PixelConnectivity">
            <summary>
            PixelConnectivity for LineIterator
            </summary>
        </member>
        <member name="F:OpenCvSharp.PixelConnectivity.Connectivity_4">
            <summary>
            Connectivity 4 (N,S,E,W)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PixelConnectivity.Connectivity_8">
            <summary>
            Connectivity 8 (N,S,E,W,NE,SE,SW,NW)
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourTreesMatchMethod">
            <summary>
            Similarity measure (cvMatchContourTrees)
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourTreesMatchMethod.I1">
            <summary>
            [CV_CONTOUR_TREES_MATCH_I1]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvContourTree">
            <summary>
            Contour tree
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.#ctor(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Creates hierarchical representation of contour
            </summary>
            <param name="contour">Input contour. </param>
            <param name="storage">Container for output tree. </param>
            <param name="threshold">Approximation accuracy. </param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvContourTree.SizeOf">
            <summary>
            sizeof(CvContourTree) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.ContourFromContourTree(OpenCvSharp.CvMemStorage,OpenCvSharp.CvTermCriteria)">
            <summary>
            Restores contour from tree.
            </summary>
            <param name="storage">Container for the reconstructed contour. </param>
            <param name="criteria">Criteria, where to stop reconstruction. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvContourTree.P1">
            <summary>
            The first point of the binary tree root segment
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContourTree.P2">
            <summary>
            The last point of the binary tree root segment
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSparseMatIterator">
            <summary>
            sparse array iterator
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSparseMatIterator._mat">
            <summary>
            Target sparse mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.#ctor(OpenCvSharp.CvSparseMat)">
            <summary>
            Initializes with CvSparseMat
            </summary>
            <param name="mat">Input array</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvSparseMatIterator.SizeOf">
            <summary>
            sizeof(CvSparseMatIterator)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.GetNextSparseNode">
            <summary>
            Moves iterator to the next sparse matrix element and returns pointer to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.Init(OpenCvSharp.CvSparseMat)">
            <summary>
            Initializes sparse array elements iterator
            </summary>
            <param name="mat">Input array</param>
            <returns>the first sparse matrix element</returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.Mat">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.CurIdx">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHuMoments">
            <summary>
            Hu moments
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHuMoments.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHuMoments.#ctor(OpenCvSharp.CvMoments)">
            <summary>
            Initialize by cvGetHuMoments
            </summary>
            <param name="moments">Pointer to the moment state structure. </param>
        </member>
        <member name="T:OpenCvSharp.CvWriteFunc">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.KMeansFlag">
            <summary>
            Miscellaneous flags for cvKMeans2
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.Zero">
            <summary>
            
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.UseInitialLabels">
            <summary>
            
            [CV_KMEANS_USE_INITIAL_LABELS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Double">
            <summary>
            Managed wrapper of array pointer (Double*)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Double.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.#ctor(System.Double*)">
            <summary>
            Initializes from Double*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.Set(System.Int32,System.Double)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Double.Ptr">
            <summary>
            Unmanaged pointer (Double*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Double.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.CvSize">
            <summary>
            Pixel-accurate size of a rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.SizeOf">
            <summary>
            sizeof(CvSize)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Width">
            <summary>
            Width of the rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Height">
            <summary>
            Height of the rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Empty">
            <summary>
            Represents a CvSize structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:OpenCvSharp.CvSize.Equals(OpenCvSharp.CvSize)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.op_Equality(OpenCvSharp.CvSize,OpenCvSharp.CvSize)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.op_Inequality(OpenCvSharp.CvSize,OpenCvSharp.CvSize)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint2D32f">
            <summary>
            2D point with floating-point coordinates
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.SizeOf">
            <summary>
            sizeof(CvPoint2D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.X">
            <summary>
            x-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.Y">
            <summary>
            y-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.Empty">
            <summary>
            Represents a CvPoint2D64f structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Implicit(OpenCvSharp.CvPoint2D32f)~OpenCvSharp.CvPoint">
            <summary>
            Creates a CvPoint with the coordinates of the specified CvPoint2D32f.
            </summary>
            <param name="self">A CvPoint2D32f that specifies the coordinates for the new CvPoint.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Implicit(OpenCvSharp.CvPoint)~OpenCvSharp.CvPoint2D32f">
            <summary>
            Creates a CvPoint2D32f with the coordinates of the specified CvPoint.
            </summary>
            <param name="p">A CvPoint that specifies the coordinates for the new CvPoint2D32f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.Equals(OpenCvSharp.CvPoint2D32f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Equality(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Inequality(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_UnaryPlus(OpenCvSharp.CvPoint2D32f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_UnaryNegation(OpenCvSharp.CvPoint2D32f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Addition(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Subtraction(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Multiply(OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.StructurePointer">
            <summary>
            Class that converts structure into pointer and cleans up resources automatically 
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.op_Implicit(OpenCvSharp.Utilities.StructurePointer)~System.IntPtr">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.ToStructure">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.Dispose">
            <summary>
            Clean up resources to be used
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.Ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.SrcObj">
            <summary>
            Structure
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.Size">
            <summary>
            Size of allocated memory
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.StructurePointer`1">
            <summary>
            Class that converts structure into pointer and cleans up resources automatically (generic version)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.op_Implicit(OpenCvSharp.Utilities.StructurePointer{`0})~System.IntPtr">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.ToStructure">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvLineSegmentPolar">
            <summary>
            Polar line segment retrieved from cvHoughLines2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPolar.Rho">
            <summary>
            Length of the line
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPolar.Theta">
            <summary>
            Angle of the line (radian)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="rho">Length of the line</param>
            <param name="theta">Angle of the line (radian)</param>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.Equals(OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.op_Equality(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.op_Inequality(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.LineIntersection(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            Calculates a intersection of the specified two lines
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.LineIntersection(OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            Calculates a intersection of the specified two lines
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPoint(System.Double)">
            <summary>
            CvLineSegmentPointに変換する
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPointX(System.Int32,System.Int32)">
            <summary>
            指定したx座標を両端とするような線分に変換する
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPointY(System.Int32,System.Int32)">
            <summary>
            指定したy座標を両端とするような線分に変換する
            </summary>
            <param name="y1"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.XPosOfLine(System.Int32)">
            <summary>
            指定したy座標を通るときのx座標を求める
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.YPosOfLine(System.Int32)">
            <summary>
            指定したx座標を通るときのy座標を求める
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.StereoBMPreset">
            <summary>
            ID of one of the pre-defined parameter sets for CreateStereoBMState
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.Basic">
            <summary>
            [CV_STEREO_BM_BASIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.FishEye">
            <summary>
            [CV_STEREO_BM_FISH_EYE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.Narrow">
            <summary>
            [CV_STEREO_BM_NARROW]
            </summary>
        </member>
        <member name="T:OpenCvSharp.NormType">
            <summary>
            Type of norm
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.C">
            <summary>
            The C-norm (maximum of absolute values) of the array is normalized.
            [CV_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.L1">
            <summary>
            The L1-norm (sum of absolute values) of the array is normalized.
            [CV_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.L2">
            <summary>
            The (Euclidean) L2-norm of the array is normalized.
            [CV_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.NormMask">
            <summary>
            [CV_NORM_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Relative">
            <summary>
            [CV_RELATIVE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Diff">
            <summary>
            [CV_DIFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.MinMax">
            <summary>
            The array values are scaled and shifted to the specified range.
            [CV_MINMAX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffC">
            <summary>
            [CV_DIFF_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffL1">
            <summary>
            [CV_DIFF_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffL2">
            <summary>
            [CV_DIFF_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeC">
            <summary>
            [CV_RELATIVE_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeL1">
            <summary>
            [CV_RELATIVE_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeL2">
            <summary>
            [CV_RELATIVE_L2]
            </summary>
        </member>
        <member name="T:OpenCvSharp.NodeType">
            <summary>
            File node type
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Integer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Red">
            <summary>
            not used
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Seq">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Map">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Flow">
            <summary>
            used only for writing structures to YAML format
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.User">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Named">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontFace">
            <summary>
            Font name identifier. 
            Only a subset of Hershey fonts (http://sources.isc.org/utils/misc/hershey-font.txt) are supported now.
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheySimplex">
            <summary>
            Normal size sans-serif font
            [CV_FONT_HERSHEY_SIMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyPlain">
            <summary>
            Small size sans-serif font
            [CV_FONT_HERSHEY_PLAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyDuplex">
            <summary>
            Normal size sans-serif font (more complex than HersheySimplex)
            [CV_FONT_HERSHEY_DUPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyComplex">
            <summary>
            Normal size serif font
            [CV_FONT_HERSHEY_COMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyTriplex">
            <summary>
            Normal size serif font (more complex than HersheyComplex)
            [CV_FONT_HERSHEY_TRIPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyComplexSmall">
            <summary>
            Smaller version of HersheyComplex
            [CV_FONT_HERSHEY_COMPLEX_SMALL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyScriptSimplex">
            <summary>
            Hand-writing style font
            [CV_FONT_HERSHEY_SCRIPT_SIMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyScriptComplex">
            <summary>
            More complex variant of HersheyScriptSimplex
            [CV_FONT_HERSHEY_SCRIPT_COMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.Italic">
            <summary>
            Means italic or oblique font. 
            [CV_FONT_ITALIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.Vector0">
            <summary>
            
            [CV_FONT_VECTOR0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FileStorageMode">
            <summary>
            File storage mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Read">
            <summary>
            The storage is open for reading
            [CV_STORAGE_READ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Write">
            <summary>
            The storage is open for writing
            [CV_STORAGE_WRITE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.WriteText">
            <summary>
            The storage is open for writing text data
            [CV_STORAGE_WRITE_TEXT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.WriteBinary">
            <summary>
            The storage is open for writing binary data
            [CV_STORAGE_WRITE_BINARY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Append">
            <summary>
            The storage is open for appending
            [CV_STORAGE_APPEND]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback">
            <summary>
            Delegate to be called every time the slider changes the position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback2">
            <summary>
            Delegate to be called every time the slider changes the position.
            </summary>
            <param name="pos"></param>
            <param name="userdata"></param>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback2Native">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="userdata"></param>
        </member>
        <member name="T:OpenCvSharp.CvSeqReader`1">
            <summary>
            Sequence reader
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OpenCvSharp.CvSeqReader">
            <summary>
            Sequence reader
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeqReader.SizeOf">
            <summary>
            sizeof(CvSeqReader) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.GetPos">
            <summary>
            Returns the current reader position (cvGetSeqReaderPos).
            </summary>
            <returns>the current reader position</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.NextSeqElem(System.Int32)">
            <summary>
            次のシーケンスへ (CV_NEXT_SEQ_ELEM相当)
            </summary>
            <param name="elem_size"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.PrevSeqElem(System.Int32)">
            <summary>
            前のシーケンスへ (CV_PREV_SEQ_ELEM相当)
            </summary>
            <param name="elem_size"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.ReadSeqElem``1">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる (CV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.RevReadSeqElem``1">
            <summary>
            シーケンスの前の要素を一つ読みだして、読み出しポインタを前へ1つ移動させる (CV_REV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.SetPos(System.Int32)">
            <summary>
            Moves the reader to specified position (cvSetSeqReaderPos).
            </summary>
            <param name="index">The destination position. If the positioning mode is used (see the next parameter) the actual position will be index mod reader->seq->total. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.SetPos(System.Int32,System.Boolean)">
            <summary>
            Moves the reader to specified position (cvSetSeqReaderPos).
            </summary>
            <param name="index">The destination position. If the positioning mode is used (see the next parameter) the actual position will be index mod reader->seq->total. </param>
            <param name="is_relative">If it is true, then index is a relative to the current position. </param>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.HeaderSize">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Block">
            <summary>
            current block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Ptr">
            <summary>
            pointer to element be read next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.BlockMin">
            <summary>
            pointer to the beginning of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.BlockMax">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.DeltaIndex">
            <summary>
            seq->first->start_index
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.PrevElem">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.ReaderPos">
            <summary>
            Gets/Sets the current reader position
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.ReadSeqElem">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる (CV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.RevReadSeqElem">
            <summary>
            シーケンスの前の要素を一つ読みだして、読み出しポインタを前へ1つ移動させる (CV_REV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader`1.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStereoBMState">
            <summary>
            The structure for block matching stereo correspondence algorithm
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStereoBMState._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor">
            <summary>
            Creates block matching stereo correspondence structure (CreateStereoBMState)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(OpenCvSharp.StereoBMPreset)">
            <summary>
            Creates block matching stereo correspondence structure (CreateStereoBMState)
            </summary>
            <param name="preset">ID of one of the pre-defined parameter sets. Any of the parameters can be overridden after creating the structure. </param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(OpenCvSharp.StereoBMPreset,System.Int32)">
            <summary>
            Creates block matching stereo correspondence structure (CreateStereoBMState)
            </summary>
            <param name="preset">ID of one of the pre-defined parameter sets. Any of the parameters can be overridden after creating the structure. </param>
            <param name="numberOfDisparities">The number of disparities. If the parameter is 0, it is taken from the preset, otherwise the supplied value overrides the one from preset. </param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvStereoBMState.SizeOf">
            <summary>
            sizeof(CvStereoBMState)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes the disparity map using block matching algorithm (cvFindStereoCorrespondenceBM)
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="disparity">The output single-channel 16-bit signed disparity map of the same size as input images. Its elements will be the computed disparities, multiplied by 16 and rounded to integer's. </param>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterType">
            <summary>
            pre filters' type (0 for now)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterSize">
            <summary>
            pre filters' size (~5x5..21x21)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterCap">
            <summary>
            pre filters' cap (up to ~31)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SADWindowSize">
            <summary>
            window size of correspondence using Sum of Absolute Difference(SAD) (Could be 5x5..21x21)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.MinDisparity">
            <summary>
            minimum disparity of correspondence using Sum of Absolute Difference(SAD) (=0)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.NumberOfDisparities">
            <summary>
            maximum disparity - minimum disparity of correspondence using Sum of Absolute Difference(SAD)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.TextureThreshold">
            <summary>
            post filters' areas with no texture are ignored
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.UniquenessRatio">
            <summary>
            filter out pixels if there are other close matches with different disparity
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SpeckleWindowSize">
            <summary>
            Disparity variation window (not used)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SpeckleRange">
            <summary>
            Acceptable range of variation in window (not used)
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLSVMFilterPosition">
            <summary>
            Structure describes the position of the filter in the feature pyramid
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.SizeOf">
            <summary>
            sizeof(CvLSVMFilterPosition)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.X">
            <summary>
            x-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.Y">
            <summary>
            y-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.L">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="l"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.Equals(OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.op_Equality(OpenCvSharp.CvLSVMFilterPosition,OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            Compares two CvLSVMFilterPosition objects. 
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X, Y and L values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.op_Inequality(OpenCvSharp.CvLSVMFilterPosition,OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            Compares two CvPoint objects. 
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.ConvertImageFlag">
            <summary>
            cvConvertImage operation flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvertImageFlag.MeanC">
            <summary>
            flip the image vertically [CV_CVTIMG_FLIP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvertImageFlag.GaussianC">
            <summary>
            swap red and blue channels [CV_CVTIMG_SWAP_RB]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraphVtx">
            <summary>
            Vertex of graph
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor">
            <summary>
            Allocates memory
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor(System.Void*)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvGraphVtx.SizeOf">
            <summary>
            sizeof(CvGraphVtx) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.IsGraphVertexVisited">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphVtx.Flags">
            <summary>
            Edge flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphVtx.First">
            <summary>
            The first incident edge
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSURFParams">
            <summary>
            Various SURF algorithm parameters
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFParams._p">
            <summary>
            Field data
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSURFParams.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates SURF default parameters
            </summary>
            <param name="hessianThreshold">Only features with keypoint.hessian larger than that are extracted. </param>
            <param name="extended">false means basic descriptors (64 elements each), true means _extended descriptors (128 elements each) </param>
        </member>
        <member name="M:OpenCvSharp.CvSURFParams.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.Extended">
            <summary>
            false means basic descriptors (64 elements each),
            true means _extended descriptors (128 elements each)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.HessianThreshold">
            <summary>
            Only features with keypoint.hessian larger than that are extracted.
            good default value is ~300-500 (can depend on the average
            local contrast and sharpness of the image).
            user can further filter out some features based on their hessian values
            and other characteristics
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.NOctaves">
            <summary>
            The number of octaves to be used for extraction.
            With each next octave the feature size is doubled (3 by default)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.NOctaveLayers">
            <summary>
            The number of layers within each octave (4 by default)
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DPointLocation">
            <summary>
            Kinds of locating point for cvSubdiv2DLocate
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Error">
            <summary>
            One of input arguments is invalid. Runtime error is raised or, if silent or "parent" error processing mode is selected
            [CV_PTLOC_ERROR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.OutsideRect">
            <summary>
            Point is outside the subdivision reference rectangle.
            [CV_PTLOC_OUTSIDE_RECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Inside">
            <summary>
            Point falls into some facet.
            [CV_PTLOC_INSIDE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Vertex">
            <summary>
            Point coincides with one of subdivision vertices. 
            [CV_PTLOC_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.OnEdge">
            <summary>
            Point falls onto the edge.
            [CV_PTLOC_ON_EDGE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.SortFlag">
            <summary>
            Order flags for cvSort
            </summary>
        </member>
        <member name="T:OpenCvSharp.HistogramComparison">
            <summary>
            Comparison methods for cvCompareHist
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Correl">
            <summary>
            Correlation [CV_COMP_CORREL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Chisqr">
            <summary>
            Chi-Square [CV_COMP_CHISQR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Intersect">
            <summary>
            Intersection [CV_COMP_INTERSECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Bhattacharyya">
            <summary>
            Bhattacharyya distance [CV_COMP_BHATTACHARYYA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ElementShape">
            <summary>
            Shape of the structuring element
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Rect">
            <summary>
            A rectangular element
            [CV_SHAPE_RECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Cross">
            <summary>
            A cross-shaped element
            [CV_SHAPE_CROSS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Ellipse">
            <summary>
            An elliptic element
            [CV_SHAPE_ELLIPSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Custom">
            <summary>
            A user-defined element. In this case the parameter values specifies the mask, that is, which neighbors of the pixel must be considered. 
            [CV_SHAPE_CUSTOM]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarStageClassifier">
            <summary>
            a boosted battery of classifiers(=stage classifier):
            the stage classifier returns 1
            if the sum of the classifiers' responces
            is greater than threshold and 0 otherwise
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarStageClassifier.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvHaarStageClassifier*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarStageClassifier.SizeOf">
            <summary>
            sizeof(CvHaarStageClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Count">
            <summary>
            Number of classifiers in the battery
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Threshold">
            <summary>
            Threshold for the boosted classifier 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Classifier">
            <summary>
            Array of classifiers
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Child">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConDensation">
            <summary>
            CvConDensation
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConDensation._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr">struct CvConDensation*</param>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates ConDensation filter structure
            </summary>
            <param name="dynam_params">Dimension of the state vector. </param>
            <param name="measure_params">Dimension of the measurement vector. </param>
            <param name="sample_count">Number of samples. </param>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvConDensation.SizeOf">
            <summary>
            sizeof(CvConDensation) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.GetFlSamples">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.SetFlSamples(System.Single[0:,0:])">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.MP">
            <summary>
            Dimension of measurement vector
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.DP">
            <summary>
            Dimension of state vector 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.DynamMatr">
            <summary>
            Matrix of the linear Dynamics system 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.State">
            <summary>
            Vector of State
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.SamplesNum">
            <summary>
            Number of the Samples
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlSamples">
            <summary>
            Array of the Sample Vectors
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlNewSamples">
            <summary>
            Temporary array of the Sample Vectors
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlConfidence">
            <summary>
            Confidence for each Sample
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlCumulative">
            <summary>
            Cumulative confidence
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.Temp">
            <summary>
            Temporary vector
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.RandomSample">
            <summary>
            RandomVector to update sample set
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.RandS">
            <summary>
            RandomVector to update sample set
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvChainPtReader">
            <summary>
            Chain Reader
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvChainPtReader._chain">
            <summary>
            Target chain
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.#ctor(OpenCvSharp.CvChain)">
            <summary>
            Initialize by cvStartReadChainPoints
            </summary>
            <param name="chain">Pointer to chain</param>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvChainPtReader.SizeOf">
            <summary>
            sizeof(CvChainPtReader)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.StartReadChainPoints(OpenCvSharp.CvChain)">
            <summary>
            Initializes chain reader
            </summary>
            <param name="chain">Pointer to chain</param>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.ReadChainPoint">
            <summary>
            Gets next chain point
            </summary>
            <returns>Current chain point.</returns>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.CvPtr">
            <summary>
            Data pointer (CvChainPtReader*)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Deltas">
            <summary>
            schar deltas[8][2]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBox2D">
            <summary>
            Rotated 2D box
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.SizeOf">
            <summary>
            sizeof(CvBox2D)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Center">
            <summary>
            Center of the box.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Size">
            <summary>
            Box width and length.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Angle">
            <summary>
            Angle between the horizontal axis and the first side (i.e. length) in degrees
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.#ctor(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSize2D32f,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="angle"></param>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.BoxPoints">
            <summary>
            Finds box vertices
            </summary>
            <returns>Array of vertices</returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CameraChannels">
            <summary>
            channel indices for multi-head camera live streams
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DepthMap">
            <summary>
            Depth values in mm (CV_16UC1)
            [CV_CAP_OPENNI_DEPTH_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_PointCloudMap">
            <summary>
            XYZ in meters (CV_32FC3)
            [CV_CAP_OPENNI_POINT_CLOUD_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DisparityMap">
            <summary>
            Disparity in pixels (CV_8UC1)
            [CV_CAP_OPENNI_DISPARITY_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DisparityMap32F">
            <summary>
            Disparity in pixels (CV_32FC1)
            [CV_CAP_OPENNI_DISPARITY_MAP_32F]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_ValidDepthMask">
            <summary>
            CV_8UC1
            [CV_CAP_OPENNI_VALID_DEPTH_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_BGRImage">
            <summary>
            
            [CV_CAP_OPENNI_BGR_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_GrayImage">
            <summary>
            
            [CV_CAP_OPENNI_GRAY_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_VGA30Hz">
            <summary>
            
            [CV_CAP_OPENNI_VGA_30HZ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_SXGA15Hz">
            <summary>
            
            [CV_CAP_OPENNI_SXGA_15HZ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameBGR">
            <summary>
            BGR
            [CV_CAP_ANDROID_COLOR_FRAME_BGR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrame">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_GreyFrame">
            <summary>
            Y
            [CV_CAP_ANDROID_GREY_FRAME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameRGB">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_RGB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameBGRA">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_BGRA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameRGBA">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_RGBA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontStyle">
            <summary>
            The operation flags for cvFontQt
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Normal">
            <summary>
            QFont::StyleNormal
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Italic">
            <summary>
            QFont::StyleItalic
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Oblique">
            <summary>
            QFont::StyleOblique
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvButtonCallback">
            <summary>
            Pointer to the function to be called every time the button changed its state.
            </summary>
            <param name="state"></param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvButtonCallbackNative">
            <summary>
            Pointer to the function to be called every time the button changed its state.
            </summary>
            <param name="state"></param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvTypeInfo">
            <summary>
            Type information
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvTypeInfo*</param>
        </member>
        <member name="F:OpenCvSharp.CvTypeInfo.SizeOf">
            <summary>
            sizeof(CvTypeInfo) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.RegisterType">
            <summary>
            Registers new type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Flags">
            <summary>
            not used
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.HeaderSize">
            <summary>
            not used
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Prev">
            <summary>
            previous registered type in the list
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Next">
            <summary>
            next registered type in the list
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.TypeName">
            <summary>
            type name, written to file storage
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.IsInstance">
            <summary>
            checks if the passed object belongs to the type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Release">
            <summary>
            releases object (memory etc.)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Read">
            <summary>
            reads object from file storage
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Write">
            <summary>
            writes object to file storage
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Clone">
            <summary>
            creates a copy of the object
            </summary>
        </member>
        <member name="T:OpenCvSharp.OpenCvSharpException">
            <summary>
            The exception that is thrown by OpenCvSharp. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="messageFormat"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:OpenCvSharp.CvInvoke">
            <summary>
            OpenCV functions that declared by DllImport
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvInvoke._cvLoadCalled">
            <summary>
            cvLoadが一度でも呼ばれたかどうか
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvInvoke._hasQt">
            <summary>
            Qtが有効かどうか
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvInvoke.#cctor">
            <summary>
            このクラスを最初に参照した時に1度だけ Unmanaged権限チェックを行う
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvInvoke.CheckQt">
            <summary>
            Qtが有効かチェックし、無効であれば例外を投げる
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvInvoke.ErrorHandlerThrowException">
            <summary>
            Custom error handler to be thrown by OpenCV
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvInvoke.ErrorHandlerIgnorance">
            <summary>
            Custom error handler to ignore all OpenCV errors
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvInvoke.ErrorHandlerDefault">
            <summary>
            Default error handler
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvInvoke.HasQt">
            <summary>
            Returns true if the library is compiled with Qt
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarClassifierCascade">
            <summary>
            Cascade or tree of stage classifiers
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifierCascade._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose">If true, this object will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.FromFile(System.String)">
            <summary>
            Loads object from file (cvLoad)
            </summary>
            <param name="filename">File name (xml/yaml)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.FromDirectory(System.String,OpenCvSharp.CvSize)">
            <summary>
            Loads a trained cascade classifier from file or the classifier database embedded in OpenCV (cvLoadHaarClassifierCascade)
            </summary>
            <param name="directory">Name of directory containing the description of a trained cascade classifier. </param>
            <param name="orig_window_size">Original size of objects the cascade has been trained on. Note that it is not stored in the cascade and therefore must be specified separately. </param>
            <remarks>The function is obsolete. Nowadays object detection classifiers are stored in XML or YAML files, rather than in directories. To load cascade from a file, use cvLoad function. </remarks>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifierCascade.SizeOf">
            <summary>
            sizeof(CvHaarClassifierCascade) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            Finds rectangular regions in the given image that are likely to contain objects the cascade has been trained for and returns those regions as a sequence of rectangles.
            </summary>
            <param name="image">Image to detect objects in. </param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles. </param>
            <param name="scale_factor">The factor by which the search window is scaled between the subsequent scans, for example, 1.1 means increasing window by 10%. </param>
            <param name="min_neighbors">Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. </param>
            <param name="flags">Mode of operation. Currently the only flag that may be specified is CV_HAAR_DO_CANNY_PRUNING. If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing. </param>
            <param name="min_size">Minimum window size. By default, it is set to the size of samples the classifier has been trained on (~20×20 for face detection). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Run(OpenCvSharp.CvPoint)">
            <summary>
            Runs cascade of boosted classifier at given image location
            </summary>
            <param name="pt">Top-left corner of the analyzed region. Size of the region is a original window size scaled by the currenly set scale. The current window size may be retrieved using  cvGetHaarClassifierCascadeWindowSize function. </param>
            <returns>positive value if the analyzed rectangle passed all the classifier stages (it is a candidate) and zero or negative value otherwise. </returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Run(OpenCvSharp.CvPoint,System.Boolean)">
            <summary>
            Runs cascade of boosted classifier at given image location
            </summary>
            <param name="pt">Top-left corner of the analyzed region. Size of the region is a original window size scaled by the currenly set scale. The current window size may be retrieved using  cvGetHaarClassifierCascadeWindowSize function. </param>
            <param name="start_stage">Initial zero-based index of the cascade stage to start from. The function assumes that all the previous stages are passed. This feature is used internally by  cvHaarDetectObjects for better processor cache utilization. </param>
            <returns>positive value if the analyzed rectangle passed all the classifier stages (it is a candidate) and zero or negative value otherwise. </returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.SetImages(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            Assigns images to the hidden cascade
            </summary>
            <param name="sum">Integral (sum) single-channel image of 32-bit integer format. This image as well as the two subsequent images are used for fast feature evaluation and brightness/contrast normalization. They all can be retrieved from input 8-bit or floating point single-channel image using The function cvIntegral. </param>
            <param name="sqsum">Square sum single-channel image of 64-bit floating-point format. </param>
            <param name="tilted_sum">Tilted sum single-channel image of 32-bit integer format. </param>
            <param name="scale">Window scale for the cascade. If scale=1, original window size is used (objects of that size are searched) - the same size as specified in cvLoadHaarClassifierCascade  (24x24 in case of "&lt;default_face_cascade&gt;"), if scale=2, a two times larger window is used (48x48 in case of default face cascade). While this will speed-up search about four times, faces smaller than 48x48 cannot be detected. </param>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Flags">
            <summary>
            Signature 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Count">
            <summary>
            Number of stages
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.OrigWindowSize">
            <summary>
            Original object size (the cascade is trained for)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.RealWindowSize">
            <summary>
            Current object size
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Scale">
            <summary>
            Current scale
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.StageClassifier">
            <summary>
            Array of stage classifiers
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.HidCascade">
            <summary>
            Hidden optimized representation of the cascade, created by cvSetImagesForHaarClassifierCascade
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvAvgComp">
            <summary>
            Rectangle structure retrieved from cvHaarDetectObjects
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAvgComp.Rect">
            <summary>
            Bounding rectangle for the object (average rectangle of a group)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAvgComp.Neighbors">
            <summary>
            Number of neighbor rectangles in the group
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.#ctor(OpenCvSharp.CvRect,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="rect">Bounding rectangle for the object (average rectangle of a group)</param>
            <param name="neighbors">number of neighbor rectangles in the group</param>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.Equals(OpenCvSharp.CvAvgComp)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Equality(OpenCvSharp.CvAvgComp,OpenCvSharp.CvAvgComp)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Inequality(OpenCvSharp.CvAvgComp,OpenCvSharp.CvAvgComp)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Implicit(OpenCvSharp.CvAvgComp)~OpenCvSharp.CvRect">
            <summary>
            implicit cast to CvRect (for backward compatibility)
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.GraphScannerMask">
            <summary>
            Event mask indicating which events are interesting to the user
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.Vertex">
            <summary>
            Stop at the graph vertices visited for the first time
            [CV_GRAPH_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.TreeEdge">
            <summary>
            Stop at tree edges (tree edge is the edge connecting the last visited vertex and the vertex to be visited next)
            [CV_GRAPH_TREE_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.BackEdge">
            <summary>
            Stop at back edges (back edge is an edge connecting the last visited vertex with some of its ancestors in the search tree)
            [CV_GRAPH_BACK_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.ForwardEdge">
            <summary>
            Stop at forward edges (forward edge is an edge conecting the last visited vertex with some of its descendants in the search tree). The forward edges are only possible during oriented graph traversal)
            [CV_GRAPH_FORWARD_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.CrossEdge">
            <summary>
            Stop at cross edges (cross edge is an edge connecting different search trees or branches of the same tree. The cross edges are only possible during oriented graphs traversal)
            [CV_GRAPH_CROSS_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.AnyEdge">
            <summary>
            Stop and any edge (tree, back, forward and cross edges) 
            [CV_GRAPH_ANY_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.NewTree">
            <summary>
            Stop in the beginning of every new search tree. When the traversal procedure visits all vertices and edges reachible from the initial vertex (the visited vertices together with tree edges make up a tree), it searches for some unvisited vertex in the graph and resumes the traversal process from that vertex. Before starting a new tree (including the very first tree when cvNextGraphItem is called for the first time) it generates CV_GRAPH_NEW_TREE event.
            For unoriented graphs each search tree corresponds to a connected component of the graph.
            [CV_GRAPH_NEW_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.BackTracking">
            <summary>
            Stop at every already visited vertex during backtracking - returning to already visited vertexes of the traversal tree.
            [CV_GRAPH_BACKTRACKING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.Over">
            <summary>
            All events are interesting
            [CV_GRAPH_OVER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.AllItems">
            <summary>
            All events are interesting
            [CV_GRAPH_ALL_ITEMS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.GraphEdgeVtxFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphItemVisited">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphSearchTreeNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphForwardEdgeFlag">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvRandState">
            <summary>
            CvRandState
            </summary>
            <remarks>
            typedef struct CvRandState
            {
                CvRNG     _state;    /* RNG state (the current seed and carry)*/
                int       _disttype; /* distribution type */
                CvScalar  _param[2]; /* parameters of RNG */
            }
            CvRandState;
            </remarks>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
            <param name="disttype"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.Set(OpenCvSharp.CvRandState)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.Rand(OpenCvSharp.CvArr)">
            <summary>
            Fills array with random numbers
            </summary>
            <param name="arr">The array to randomize</param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandInit(System.Double,System.Double,System.Int32)">
            <summary>
            Initialize CvRandState structure
            </summary>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="seed">Seed value</param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandInit(System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            Initialize CvRandState structure
            </summary>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="seed">Seed value</param>
            <param name="disttype">Type of distribution</param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandSetRange(System.Double,System.Double)">
            <summary>
            Changes RNG range while preserving RNG _state
            </summary>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandSetRange(System.Double,System.Double,System.Int32)">
            <summary>
            Changes RNG range while preserving RNG _state
            </summary>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
            <param name="index">Index dimension to initialize, -1 = all</param>
        </member>
        <member name="P:OpenCvSharp.CvRandState.State">
            <summary>
            RNG _state (the current seed and carry)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRandState.DistType">
            <summary>
            distribution type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRandState.Param">
            <summary>
            parameters of RNG
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMemBlock">
            <summary>
            Memory storage block
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemBlock.#ctor(System.IntPtr)">
            <summary>
            Constructs from native pointer
            </summary>
            <param name="ptr">struct CvMemBlock*</param>
        </member>
        <member name="F:OpenCvSharp.CvMemBlock.SizeOf">
            <summary>
            sizeof(CvMemBlock) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemBlock.Prev">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemBlock.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvErrorCallback">
            <summary>
            Error Handler
            </summary>
            <param name="status">The numeric code for error status</param>
            <param name="func_name">The source file name where error is encountered</param>
            <param name="err_msg">A description of the error</param>
            <param name="file_name">The source file name where error is encountered</param>
            <param name="line">The line number in the souce where error is encountered</param>
            <param name="userdata">Pointer to the user data. Ignored by the standard handlers</param>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Single">
            <summary>
            Managed wrapper of array pointer (Single*)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Single.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.#ctor(System.Single*)">
            <summary>
            Initializes from Single*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.Set(System.Int32,System.Single)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.ToArray(System.Int32)">
            <summary>
            Converts this pointer into a managed array
            </summary>
            <param name="length">length of the result array</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Single.Ptr">
            <summary>
            Unmanaged pointer (Single*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Single.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.ScopedGCHandle">
            <summary>
            Original GCHandle that implement IDisposable 
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Runtime.InteropServices.GCHandle)">
            <summary>
            
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Alloc(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.FromIntPtr(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.ToIntPtr(OpenCvSharp.Utilities.ScopedGCHandle)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.AddrOfPinnedObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Free">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.IsAllocated">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.MouseEvent">
            <summary>
            Mosue events
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MouseMove">
            <summary>
            [CV_EVENT_MOUSEMOVE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonDown">
            <summary>
            [CV_EVENT_LBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonDown">
            <summary>
            [CV_EVENT_RBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonDown">
            <summary>
            [CV_EVENT_MBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonUp">
            <summary>
            [CV_EVENT_LBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonUp">
            <summary>
            [CV_EVENT_RBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonUp">
            <summary>
            [CV_EVENT_MBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonDoubleClick">
            <summary>
            [CV_EVENT_LBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonDoubleClick">
            <summary>
            [CV_EVENT_RBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonDoubleClick">
            <summary>
            [CV_EVENT_MBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagLButton">
            <summary>
            [CV_EVENT_FLAG_LBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagRButton">
            <summary>
            [CV_EVENT_FLAG_RBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagMButton">
            <summary>
            [CV_EVENT_FLAG_MBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagCtrlKey">
            <summary>
            [CV_EVENT_FLAG_CTRLKEY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagShiftKey">
            <summary>
            [CV_EVENT_FLAG_SHIFTKEY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagAltKey">
            <summary>
            [CV_EVENT_FLAG_ALTKEY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvWindow">
            <summary>
            Wrapper of HighGUI window
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvWindow._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor">
            <summary>
            Creates a window with a random name
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(OpenCvSharp.CvArr)">
            <summary>
            Creates a window with a random name and a specified image
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(OpenCvSharp.WindowMode,OpenCvSharp.CvArr)">
            <summary>
            Creates a window with a specified image and flag
            </summary>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.WindowMode)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.CvArr)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="image">Image to be shown.</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.WindowMode,OpenCvSharp.CvArr)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
            <param name="image">Image to be shown.</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DefaultName">
            <summary>
            ウィンドウ名が指定されなかったときに、適当な名前を作成して返す.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Close">
            <summary>
            Destroys this window. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DestroyAllWindows">
            <summary>
            Destroys all the opened HighGUI windows. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar(System.String,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="value">The position of the slider</param>
            <param name="max">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar2(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="value">The position of the slider</param>
            <param name="max">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DisplayOverlay(System.String,System.Int32)">
            <summary>
            Display text on the window's image as an overlay for delay milliseconds. This is not editing the image's data. The text is display on the top of the image.
            </summary>
            <param name="text">Overlay text to write on the window’s image</param>
            <param name="delayms">Delay to display the overlay text. If this function is called before the previous overlay text time out, the timer is restarted and the text updated. . If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DisplayStatusBar(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text">Text to write on the window’s statusbar</param>
            <param name="delayms">Delay to display the text. If this function is called before the previous text time out, the timer is restarted and the text updated. If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.GetProperty(OpenCvSharp.WindowProperty)">
            <summary>
            Get Property of the window
            </summary>
            <param name="prop_id">Property identifier</param>
            <returns>Value of the specified property</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.LoadWindowParameters">
            <summary>
            Load parameters of the window.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Move(System.Int32,System.Int32)">
            <summary>
            Sets window position
            </summary>
            <param name="x">New x coordinate of top-left corner </param>
            <param name="y">New y coordinate of top-left corner </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Resize(System.Int32,System.Int32)">
            <summary>
            Sets window size
            </summary>
            <param name="width">New width </param>
            <param name="height">New height </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.SaveWindowParameters">
            <summary>
            Save parameters of the window.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.SetProperty(OpenCvSharp.WindowProperty,System.Double)">
            <summary>
            Set Property of the window
            </summary>
            <param name="prop_id">Property identifier</param>
            <param name="prop_value">New value of the specified property</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.ShowImage(OpenCvSharp.CvArr)">
            <summary>
            Shows the image in this window
            </summary>
            <param name="img">Image to be shown. </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.WaitKey">
            <summary>
            Waits for a pressed key
            </summary>
            <returns>Key code</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.WaitKey(System.Int32)">
            <summary>
            Waits for a pressed key
            </summary>
            <param name="delay">Delay in milliseconds. </param>
            <returns>Key code</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.ShowImages(OpenCvSharp.CvArr[])">
            <summary>
            
            </summary>
            <param name="images"></param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.GetWindowByName(System.String)">
            <summary>
            Retrieves a created window by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Image">
            <summary>
            Gets or sets an image to be shown
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Name">
            <summary>
            Gets window name
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Handle">
            <summary>
            Gets window handle
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.MouseCallback">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenCvSharp.CvWindow.OnMouseCallback">
            <summary>
            Event handler to be called every time mouse event occurs in the specified window. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.HasQt">
            <summary>
            Returns true if the library is compiled with Qt
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSURFPoint">
            <summary>
            SURF keypoints
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Pt">
            <summary>
            Position of the feature within the image
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Laplacian">
            <summary>
            -1, 0 or +1. sign of the laplacian at the point.
            can be used to speedup feature comparison
            (normally features with laplacians of different signs can not match)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Size">
            <summary>
            size of the feature
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Dir">
            <summary>
            orientation of the feature: 0..360 degrees
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Hessian">
            <summary>
            value of the hessian (can be used to approximately estimate the feature strengths;
            see also params._hessianThreshold)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.#ctor(OpenCvSharp.CvPoint2D32f,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="pt">Position of the feature within the image</param>
            <param name="laplacian">-1, 0 or +1. sign of the laplacian at the point.
            can be used to speedup feature comparison
            (normally features with laplacians of different signs can not match)</param>
            <param name="size">size of the feature</param>
            <param name="dir">orientation of the feature: 0..360 degrees</param>
            <param name="hessian">value of the hessian (can be used to approximately estimate the feature strengths; see also params._hessianThreshold)</param>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">CvSURFPoint*</param>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.FromPtr(System.IntPtr)">
            <summary>
            Creates CvSURFPoint instance from native ponter
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.SmoothType">
            <summary>
            Type of the smoothing operations
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.BlurNoScale">
            <summary>
            (simple blur with no scaling) - for each pixel the result is a sum of pixels values in size1×size2 neighborhood of the pixel. 
            If the neighborhood size varies from pixel to pixel, compute the sums using integral image (cvIntegral). 
            [CV_BLUR_NO_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Blur">
            <summary>
            (simple blur) - for each pixel the result is the average value (brightness/color) of size1×size2 neighborhood of the pixel. 
            [CV_BLUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Gaussian">
            <summary>
            (Gaussian blur) - the image is smoothed using the Gaussian kernel of aperture size size1×size2. sigma1 and sigma2 may optionally be used to specify shape of the kernel. 
            [CV_GAUSSIAN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Median">
            <summary>
            (median blur) - the image is smoothed using medial filter of size size1×size1 (i.e. only square aperture can be used). 
            That is, for each pixel the result is the median computed over size1×size1 neighborhood. 
            [CV_MEDIAN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Bilateral">
            <summary>
            (bilateral filter) - the image is smoothed using a bilateral 3x3 filter with color sigma=sigma1 and spatial sigma=sigma2. 
            If size1!=0, then a circular kernel with diameter size1 is used; otherwise the diameter of the kernel is computed from sigma2.
            [CV_BILATERAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MorphologyOperation">
            <summary>
            Type of morphological operation
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Open">
            <summary>
            Opening 
            [CV_MOP_OPEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Close">
            <summary>
            Closing
            [CV_MOP_CLOSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Gradient">
            <summary>
            Morphological gradient
            [CV_MOP_GRADIENT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.TopHat">
            <summary>
            "Top hat"
            [CV_MOP_TOPHAT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.BlackHat">
            <summary>
            "Black hat"
            [CV_MOP_BLACKHAT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MatchTemplateMethod">
            <summary>
            Specifies the way the template must be compared with image regions
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.SqDiff">
            <summary>
            [CV_TM_SQDIFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.SqDiffNormed">
            <summary>
            [CV_TM_SQDIFF_NORMED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCorr">
            <summary>
            [CV_TM_CCORR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCorrNormed">
            <summary>
            [CV_TM_CCORR_NORMED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCoeff">
            <summary>
            [CV_TM_CCOEFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCoeffNormed">
            <summary>
            [CV_TM_CCOEFF_NORMED]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFilter">
            <summary>
            Filters used in pyramid decomposition
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFilter.Gaussian5x5">
            <summary>
            [CV_GAUSSIAN_5x5]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureProperty">
            <summary>
            Property identifiers for CvCapture
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosMsec">
            <summary>
            Position in milliseconds from the file beginning
            [CV_CAP_PROP_POS_MSEC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosFrames">
            <summary>
            Position in frames (only for video files)
            [CV_CAP_PROP_POS_FRAMES]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosAviRatio">
            <summary>
            Position in relative units (0 - start of the file, 1 - end of the file)
            [CV_CAP_PROP_POS_AVI_RATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameWidth">
            <summary>
            Width of frames in the video stream (only for cameras)
            [CV_CAP_PROP_FRAME_WIDTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameHeight">
            <summary>
            Height of frames in the video stream (only for cameras)
            [CV_CAP_PROP_FRAME_HEIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Fps">
            <summary>
            Frame rate (only for cameras)
            [CV_CAP_PROP_FPS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FourCC">
            <summary>
            4-character code of codec (only for cameras). 
            [CV_CAP_PROP_FOURCC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameCount">
            <summary>
            Number of frames in the video stream
            [CV_CAP_PROP_FRAME_COUNT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Format">
            <summary>
            The format of the Mat objects returned by retrieve()
            [CV_CAP_PROP_FORMAT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Mode">
            <summary>
            A backend-specific value indicating the current capture mode
            [CV_CAP_PROP_MODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Brightness">
            <summary>
            Brightness of image (only for cameras) 
            [CV_CAP_PROP_BRIGHTNESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Contrast">
            <summary>
            contrast of image (only for cameras) 
            [CV_CAP_PROP_CONTRAST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Saturation">
            <summary>
            Saturation of image (only for cameras) 
            [CV_CAP_PROP_SATURATION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Hue">
            <summary>
            hue of image (only for cameras) 
            [CV_CAP_PROP_HUE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Gain">
            <summary>
            Gain of the image (only for cameras)
            [CV_CAP_PROP_GAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Exposure">
            <summary>
            Exposure (only for cameras)
            [CV_CAP_PROP_EXPOSURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.ConvertRgb">
            <summary>
            Boolean flags indicating whether images should be converted to RGB
            [CV_CAP_PROP_CONVERT_RGB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.WhiteBalance">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Rectification">
            <summary>
            TOWRITE (note: only supported by DC1394 v 2.x backend currently)
            [CV_CAP_PROP_RECTIFICATION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Monocrome">
            <summary>
            
            [CV_CAP_PROP_MONOCROME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Sharpness">
            <summary>
            
            [CV_CAP_PROP_SHARPNESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.AutoExposure">
            <summary>
            exposure control done by camera,
            user can adjust refernce level using this feature
            [CV_CAP_PROP_AUTO_EXPOSURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Gamma">
            <summary>
            
            [CV_CAP_PROP_GAMMA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Temperature">
            <summary>
            
            [CV_CAP_PROP_TEMPERATURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Trigger">
            <summary>
            
            [CV_CAP_PROP_TRIGGER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.TriggerDelay">
            <summary>
            
            [CV_CAP_PROP_TRIGGER_DELAY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.WhiteBalanceRedV">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE_RED_V]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.MaxDC1394">
            <summary>
            
            [CV_CAP_PROP_MAX_DC1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.AutoGrab">
            <summary>
            property for highgui class CvCapture_Android only
            [CV_CAP_PROP_AUTOGRAB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.SupportedPreviewSizesString">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PreviewFormat">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_PREVIEW_FORMAT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_OutputMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_FrameMaxDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_Baseline">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_FocalLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_RegistrationON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_Registratiob">
            <summary>
            flag that synchronizes the remapping depth map to image map
            by changing depth generator's view point (if the flag is "on") or
            sets this view point to its normal one (if the flag is "off").
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_ImageGeneratorOutputMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorBaseline">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorFocalLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorRegistrationON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.GStreamerQueueLength">
            <summary>
            default is 1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PvAPIMulticastIP">
            <summary>
            ip for anable multicast master mode. 0 for disable multicast
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_Downsampling">
            <summary>
            Change image resolution by binning or skipping. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_DataFormat">
            <summary>
            Output data format.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_OffsetX">
            <summary>
            Horizontal offset from the origin to the area of interest (in pixels).
            </summary>        
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_OffsetY">
            <summary>
            Vertical offset from the origin to the area of interest (in pixels).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_TrgSource">
            <summary>
            Defines source of trigger.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_TrgSoftware">
            <summary>
            Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiSelector">
            <summary>
            Selects general purpose input 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiMode">
            <summary>
            Set general purpose input mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiLevel">
            <summary>
            Get general purpose level
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpoSelector">
            <summary>
            Selects general purpose output 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpoMode">
            <summary>
            Set general purpose output mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_LedSelector">
            <summary>
            Selects camera signalling LED 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_LedMode">
            <summary>
            Define camera signalling LED functionality
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_ManualWB">
            <summary>
            Calculates White Balance(must be called during acquisition)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AutoWB">
            <summary>
            Automatic white balance
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEAG">
            <summary>
            Automatic exposure/gain
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_ExpPriority">
            <summary>
            Exposure priority (0.5 - exposure 50%, gain 50%).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEMaxLimit">
            <summary>
            Maximum limit of exposure in AEAG procedure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AGMaxLimit">
            <summary>
            Maximum limit of gain in AEAG procedure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEAGLevel">
            <summary>
            Average intensity of output signal AEAG should achieve(in %)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_Timeout">
            <summary>
            Image capture timeout in milliseconds
            </summary>
        </member>
        <member name="T:OpenCvSharp.ApproxPolyMethod">
            <summary>
            Approximation method
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApproxPolyMethod.DP">
            <summary>
            Corresponds to Douglas-Peucker algorithm. 
            [CV_POLY_APPROX_DP]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCmpFunc">
            <summary>
            The comparison function that returns negative, zero or positive value depending on the elements relation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvCmpFunc`1">
            <summary>
            The comparison function that returns negative, zero or positive value depending on the elements relation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvMSERParams">
            <summary>
            Various MSER algorithm parameters
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMSERParams._p">
            <summary>
            Field data
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor">
            <summary>
            Creates MSER parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
            <param name="min_margin">ignore too small margin</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="min_area">prune the area which smaller than min_area</param>
            <param name="max_area">prune the area which bigger than max_area</param>
            <param name="max_variation">prune the area have simliar size to its children</param>
            <param name="min_diversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="max_evolution">for color image, the evolution steps</param>
            <param name="area_threshold">the area threshold to cause re-initialize</param>
            <param name="min_margin">ignore too small margin</param>
            <param name="edge_blur_size">the aperture size for edge blur</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.Delta">
            <summary>
            delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxArea">
            <summary>
            prune the area which bigger than max_area
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinArea">
            <summary>
            prune the area which smaller than min_area
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxVariation">
            <summary>
            prune the area have simliar size to its children
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinDiversity">
            <summary>
            trace back to cut off mser with diversity &lt; min_diversity
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxEvolution">
            <summary>
            for color image, the evolution steps
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.AreaThreshold">
            <summary>
            the area threshold to cause re-initialize
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinMargin">
            <summary>
            ignore too small margin
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.EdgeBlurSize">
            <summary>
            the aperture size for edge blur
            </summary>
        </member>
        <member name="T:OpenCvSharp.ConvexHullOrientation">
            <summary>
            Orientation for Convex Hull function
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvexHullOrientation.Clockwise">
            <summary>
            Clockwise
            [CV_CLOCKWISE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvexHullOrientation.Counterclockwise">
            <summary>
            Counter clockwise
            [CV_COUNTER_CLOCKWISE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.AngleUnit">
            <summary>
            Angle Unit for cvCartToPolar
            </summary>
        </member>
        <member name="F:OpenCvSharp.AngleUnit.Radians">
            <summary>
            Angle in radians
            </summary>
        </member>
        <member name="F:OpenCvSharp.AngleUnit.Degrees">
            <summary>
            Angle in degrees
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLineIterator">
            <summary>
            CvLineIterator
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <param name="left_to_right">The flag, indicating whether the line should be always scanned from the left-most point to the right-most out of pt1 and pt2 (left_to_right=true), or it is scanned in the specified order, from pt1 to pt2 (left_to_right=false). </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Initialize(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <param name="left_to_right">The flag, indicating whether the line should be always scanned from the left-most point to the right-most out of pt1 and pt2 (left_to_right=true), or it is scanned in the specified order, from pt1 to pt2 (left_to_right=false). </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Initialize">
            <summary>
            Initializes line iterator
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvLineIterator.SizeOf">
            <summary>
            sizeof(CvLineIterator) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.NextLinePoint">
            <summary>
            CV_NEXT_LINE_POINT
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.CurrentPoint">
            <summary>
            Gets the value of the current point
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.GetEnumerator">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Ptr">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Err">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.PlusDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.MinusDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.PlusStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.MinusStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCloneFunc">
            <summary>
            
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.EigenObjectsIOFlag">
            <summary>
            Input/output flags for Eigen Objects (PCA) Functions
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.NoCallback">
            <summary>
            
            [CV_EIGOBJ_NO_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.InputCallback">
            <summary>
            
            [CV_EIGOBJ_INPUT_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.OutputCallback">
            <summary>
            
            [CV_EIGOBJ_OUTPUT_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.BothCallback">
            <summary>
            
            [CV_EIGOBJ_BOTH_CALLBACK]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBGCodeBookElem">
            <summary>
            CvBGCodeBookElem
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookElem.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr">CvBGCodeBookElem*</param>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookElem.SizeOf">
            <summary>
            sizeof(CvBGCodeBookElem) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.TLastUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.Stale">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.BoxMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.BoxMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.LearnMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.LearnMax">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.FlipMode">
            <summary>
            Specifies how to flip the array
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.X">
            <summary>
            means flipping around x-axis
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.Y">
            <summary>
            means flipping around y-axis
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.XY">
            <summary>
            means flipping around both axises
            </summary>
        </member>
        <member name="T:OpenCvSharp.DFTFlag">
            <summary>
            Transformation flags for cvDFT
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Forward">
            <summary>
            Do forward 1D or 2D transform. The result is not scaled.
            (Forward and Inverse are mutually exclusive, of course.)
            [CV_DXT_FORWARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Inverse">
            <summary>
            Do inverse 1D or 2D transform. The result is not scaled. 
            (Forward and Inverse are mutually exclusive, of course.)
            [CV_DXT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Scale">
            <summary>
            Scale the result: divide it by the number of array elements. Usually, it is combined with Inverse.
            [CV_DXT_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.InverseScale">
            <summary>
            Shortcut of Inverse | Scale 
            [CV_DXT_INVERSE_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Rows">
            <summary>
            Do forward or inverse transform of every individual row of the input matrix. 
            This flag allows user to transform multiple vectors simultaneously and can be used to decrease the overhead
            (which is sometimes several times larger than the processing itself), to do 3D and higher-dimensional transforms etc.
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSparseMat">
            <summary>
            Multi-dimensional sparse multi-channel array
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSparseMat._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">CvSparseMat*</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Creates sparse array (cvCreateSparseMat).
            </summary>
            <param name="dims">Number of array dimensions. As opposite to the dense matrix, the number of dimensions is practically unlimited (up to 2^16). </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_UnaryPlus(OpenCvSharp.CvSparseMat)">
            <summary>
            Unary plus operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_UnaryNegation(OpenCvSharp.CvSparseMat)">
            <summary>
            Unary negation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_OnesComplement(OpenCvSharp.CvSparseMat)">
            <summary>
            Logical nagation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Addition(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Binary plus operator (cvAdd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Addition(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            Binary plus operator (cvAddS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Subtraction(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Subtraction(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Multiply(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Multiplicative operator (cvMatMul)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Multiply(OpenCvSharp.CvSparseMat,System.Double)">
            <summary>
            Multiplicative operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Division(OpenCvSharp.CvSparseMat,System.Double)">
            <summary>
            Division operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseAnd(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Bitwise AND operator (cvAnd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseAnd(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise AND operator (cvAndS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Bitwise OR operator (cvOr)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise OR operator (cvOrS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_ExclusiveOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            Bitwise XOR operator (cvXor)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_ExclusiveOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise XOR operator (cvXorS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvSparseMat.SizeOf">
            <summary>
            sizeof(CvSparseMat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.Clone">
            <summary>
            Creates full copy of sparse array
            </summary>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.NodeIdx(OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_IDX
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.NodeVal``1(OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Dims">
            <summary>
            Get number of dimensions of the array
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Type">
            <summary>
            CvSparseMat signature (CV_SPARSE_MAT_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.HashSize">
            <summary>
            Size of hashtable
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.HashTable">
            <summary>
            hashtable: each entry has a list of nodes having the same "hashvalue modulo hashsize"
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Heap">
            <summary>
            A pool of hashtable nodes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.IdxOffset">
            <summary>
            Index offset in bytes for the array nodes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.ValOffset">
            <summary>
            Value offset in bytes for the array nodes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Size">
            <summary>
            Arr of dimension sizes
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStarKeypoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Response">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.#ctor(OpenCvSharp.CvPoint,System.Int32,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <param name="response"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.Equals(OpenCvSharp.CvStarKeypoint)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.op_Equality(OpenCvSharp.CvStarKeypoint,OpenCvSharp.CvStarKeypoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.op_Inequality(OpenCvSharp.CvStarKeypoint,OpenCvSharp.CvStarKeypoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvReadFunc">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.HardwareSupport">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.None">
            <summary>
            
            [CV_CPU_NONE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.MMX">
            <summary>
            
            [CV_CPU_MMX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE">
            <summary>
            
            [CV_CPU_SSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE2">
            <summary>
            
            [CV_CPU_SSE2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE3">
            <summary>
            
            [CV_CPU_SSE3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSSE3">
            <summary>
            
            [CV_CPU_SSSE3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE4_1">
            <summary>
            
            [CV_CPU_SSE4_1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE4_2">
            <summary>
            
            [CV_CPU_SSE4_2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.POPCNT">
            <summary>
            
            [CV_CPU_POPCNT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.AVX">
            <summary>
            
            [CV_CPU_AVX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.MaxFeature">
            <summary>
            
            [CV_HARDWARE_MAX_FEATURE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.Action">
            <summary>
            Substitute of System.Action
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.TimeMeasurer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.TimeMeasurer.Measure(OpenCvSharp.Utilities.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint3D64f">
            <summary>
            3D point with double precision floating-point coordinates
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.SizeOf">
            <summary>
            sizeof(CvPoint3D64f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.X">
            <summary>
            x-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Y">
            <summary>
            y-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Z">
            <summary>
            z-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Empty">
            <summary>
            Represents a CvPoint3D64f structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="z">z-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Implicit(OpenCvSharp.CvPoint3D64f)~OpenCvSharp.CvPoint3D32f">
            <summary>
            Creates a CvPoint3D32f with the coordinates of the specified CvPoint3D64f.
            </summary>
            <param name="self">A CvPoint3D64f that specifies the coordinates for the new CvPoint3D32f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Implicit(OpenCvSharp.CvPoint3D32f)~OpenCvSharp.CvPoint3D64f">
            <summary>
            Creates a CvPoint3D64f with the coordinates of the specified CvPoint3D32f.
            </summary>
            <param name="p">A CvPoint3D32f that specifies the coordinates for the new CvPoint3D64f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.Equals(OpenCvSharp.CvPoint3D64f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Equality(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            Compares two CvPoint3D64f objects. The result specifies whether the values of the X, Y and Z properties of the two CvPoint3D64f objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X, Y and Z values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Inequality(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            Compares two CvPoint3D64f objects. The result specifies whether the values of the X, Y or Z properties of the two CvPoint3D64f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties, Y properties or the Z properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_UnaryPlus(OpenCvSharp.CvPoint3D64f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_UnaryNegation(OpenCvSharp.CvPoint3D64f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Addition(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Subtraction(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Multiply(OpenCvSharp.CvPoint3D64f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvTermCriteria">
            <summary>
            Termination criteria for iterative algorithms
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.SizeOf">
            <summary>
            sizeof(CvTermCriteria)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.Type">
            <summary>
            A combination of CriteriaType flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.MaxIter">
            <summary>
            Maximum number of iterations
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.Epsilon">
            <summary>
            Accuracy to achieve
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="max_iter">maximum number of iterations</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="epsilon">accuracy to achieve</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="max_iter">maximum number of iterations</param>
            <param name="epsilon">accuracy to achieve</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(OpenCvSharp.CriteriaType,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="type">a combination of CriteriaType flags</param>
            <param name="max_iter">maximum number of iterations</param>
            <param name="epsilon">accuracy to achieve</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.Check(System.Double,System.Int32)">
            <summary>
            Check termination criteria and transform it so that type=CriteriaType.Iteration | CriteriaType.Epsilon,
            and both max_iter and epsilon are valid
            </summary>
            <param name="default_eps">Default epsilon</param>
            <param name="default_max_iters">Default maximum number of iteration</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DPoint">
            <summary>
            Point of original or dual subdivision
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.#ctor(System.Void*)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.FromPtr(System.IntPtr)">
            <summary>
            Creates a CvSubdiv2DPoint instance from native pointer
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.op_Explicit(System.IntPtr)~OpenCvSharp.CvSubdiv2DPoint">
            <summary>
            Explicit cast from IntPtr to CvSubdiv2DPoint
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPoint.SizeOf">
            <summary>
            sizeof(CvSubdiv2DPoint) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.Flags">
            <summary>
            Miscellaneous flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.First">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCapture">
            <summary>
            Video capturing class 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCapture._captureType">
            <summary>
            Capture type (File or Camera)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCapture._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.String)">
            <summary>
            Allocates and initialized the CvCapture structure for reading the video stream from the specified file.
            After the allocated structure is not used any more it should be released by cvReleaseCapture function. 
            </summary>
            <param name="filename">Name of the video file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromFile(System.String)">
            <summary>
            Allocates and initialized the CvCapture structure for reading the video stream from the specified file.
            After the allocated structure is not used any more it should be released by cvReleaseCapture function. 
            </summary>
            <param name="filename">Name of the video file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvCapture*</param>
        </member>
        <member name="M:OpenCvSharp.CvCapture.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GetCaptureProperty(OpenCvSharp.CaptureProperty)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="property_id">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GetCaptureProperty(System.Int32)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="property_id">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GrabFrame">
            <summary>
            Grabs the frame from camera or file. The grabbed frame is stored internally. 
            The purpose of this function is to grab frame fast that is important for syncronization in case of reading from several cameras simultaneously. 
            The grabbed frames are not exposed because they may be stored in compressed format (as defined by camera/driver). 
            To retrieve the grabbed frame, cvRetrieveFrame should be used. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.QueryFrame">
            <summary>
            Grabs a frame from camera or video file, decompresses and returns it. 
            This function is just a combination of cvGrabFrame and cvRetrieveFrame in one call. 
            The returned image should not be released or modified by user. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame(System.Int32)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame(OpenCvSharp.CameraChannels)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.SetCaptureProperty(OpenCvSharp.CaptureProperty,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="property_id">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.SetCaptureProperty(System.Int32,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="property_id">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvCapture.CaptureType">
            <summary>
            Gets the capture type (File or Camera) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosMsec">
            <summary>
            Gets or sets film current position in milliseconds or video capture timestamp 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosFrames">
            <summary>
            Gets or sets 0-based index of the frame to be decoded/captured next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosAviRatio">
            <summary>
            Gets or sets relative position of video file
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameWidth">
            <summary>
            Gets or sets width of frames in the video stream
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameHeight">
            <summary>
            Gets or sets height of frames in the video stream 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Fps">
            <summary>
            Gets or sets frame rate
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FourCC">
            <summary>
            Gets or sets 4-character code of codec 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameCount">
            <summary>
            Gets number of frames in video file 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Brightness">
            <summary>
            Gets or sets brightness of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Contrast">
            <summary>
            Gets or sets contrast of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Saturation">
            <summary>
            Gets or sets saturation of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Hue">
            <summary>
            Gets or sets hue of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Format">
            <summary>
            The format of the Mat objects returned by retrieve()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Mode">
            <summary>
            A backend-specific value indicating the current capture mode
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Gain">
            <summary>
            Gain of the image (only for cameras)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Exposure">
            <summary>
            Exposure (only for cameras)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.ConvertRgb">
            <summary>
            Boolean flags indicating whether images should be converted to RGB
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.WhiteBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Rectification">
            <summary>
            TOWRITE (note: only supported by DC1394 v 2.x backend currently)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Monocrome">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Sharpness">
            <summary>
            
            [CV_CAP_PROP_SHARPNESS]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.AutoExposure">
            <summary>
            exposure control done by camera,
            user can adjust refernce level using this feature
            [CV_CAP_PROP_AUTO_EXPOSURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Gamma">
            <summary>
            
            [CV_CAP_PROP_GAMMA]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Temperature">
            <summary>
            
            [CV_CAP_PROP_TEMPERATURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Trigger">
            <summary>
            
            [CV_CAP_PROP_TRIGGER]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.TriggerDelay">
            <summary>
            
            [CV_CAP_PROP_TRIGGER_DELAY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.WhiteBalanceRedV">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE_RED_V]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.MaxDC1394">
            <summary>
            
            [CV_CAP_PROP_MAX_DC1394]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.AutoGrab">
            <summary>
            property for highgui class CvCapture_Android only
            [CV_CAP_PROP_AUTOGRAB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.SupportedPreviewSizesString">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PreviewFormat">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_PREVIEW_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_OutputMode">
            <summary>
            
            [CV_CAP_PROP_OPENNI_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_FrameMaxDepth">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_Baseline">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_FocalLength">
            <summary>
            in pixels
            [CV_CAP_PROP_OPENNI_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_RegistrationON">
            <summary>
            flag
            [CV_CAP_PROP_OPENNI_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_Registratiob">
            <summary>
            flag that synchronizes the remapping depth map to image map
            by changing depth generator's view point (if the flag is "on") or
            sets this view point to its normal one (if the flag is "off").
            [CV_CAP_PROP_OPENNI_REGISTRATION]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_ImageGeneratorOutputMode">
            <summary>
            
            [CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorBaseline">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorFocalLength">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorRegistrationON">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.GStreamerQueueLength">
            <summary>
            default is 1
            [CV_CAP_GSTREAMER_QUEUE_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PvAPIMulticastIP">
            <summary>
            ip for anable multicast master mode. 0 for disable multicast
            [CV_CAP_PROP_PVAPI_MULTICASTIP]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_Downsampling">
            <summary>
            Change image resolution by binning or skipping.  
            [CV_CAP_PROP_XI_DOWNSAMPLING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_DataFormat">
            <summary>
            Output data format.
            [CV_CAP_PROP_XI_DATA_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_OffsetX">
            <summary>
            Horizontal offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_X]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_OffsetY">
            <summary>
            Vertical offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_Y]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_TrgSource">
            <summary>
            Defines source of trigger.
            [CV_CAP_PROP_XI_TRG_SOURCE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_TrgSoftware">
            <summary>
            Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
            [CV_CAP_PROP_XI_TRG_SOFTWARE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiSelector">
            <summary>
            Selects general purpose input
            [CV_CAP_PROP_XI_GPI_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiMode">
            <summary>
            Set general purpose input mode
            [CV_CAP_PROP_XI_GPI_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiLevel">
            <summary>
            Get general purpose level
            [CV_CAP_PROP_XI_GPI_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpoSelector">
            <summary>
            Selects general purpose output 
            [CV_CAP_PROP_XI_GPO_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpoMode">
            <summary>
            Set general purpose output mode
            [CV_CAP_PROP_XI_GPO_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_LedSelector">
            <summary>
            Selects camera signalling LED 
            [CV_CAP_PROP_XI_LED_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_LedMode">
            <summary>
            Define camera signalling LED functionality
            [CV_CAP_PROP_XI_LED_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_ManualWB">
            <summary>
            Calculates White Balance(must be called during acquisition)
            [CV_CAP_PROP_XI_MANUAL_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AutoWB">
            <summary>
            Automatic white balance
            [CV_CAP_PROP_XI_AUTO_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEAG">
            <summary>
            Automatic exposure/gain
            [CV_CAP_PROP_XI_AEAG]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_ExpPriority">
            <summary>
            Exposure priority (0.5 - exposure 50%, gain 50%).
            [CV_CAP_PROP_XI_EXP_PRIORITY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEMaxLimit">
            <summary>
            Maximum limit of exposure in AEAG procedure
            [CV_CAP_PROP_XI_AE_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AGMaxLimit">
            <summary>
            Maximum limit of gain in AEAG procedure
            [CV_CAP_PROP_XI_AG_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEAGLevel">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_AEAG_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_Timeout">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_TIMEOUT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCapture.IntBytes">
            <summary>
            Int32の各バイトにアクセスしやすくするための共用体
            </summary>
        </member>
        <member name="T:OpenCvSharp.InpaintMethod">
            <summary>
            The inpainting method
            </summary>
        </member>
        <member name="F:OpenCvSharp.InpaintMethod.NS">
            <summary>
            Navier-Stokes based method.
            [CV_INPAINT_NS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InpaintMethod.Telea">
            <summary>
            The method by Alexandru Telea
            [CV_INPAINT_TELEA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HoughCirclesMethod">
            <summary>
            Methods for cvHoughCircles
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughCirclesMethod.Gradient">
            <summary> 
            [CV_HOUGH_GRADIENT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMouseCallback">
            <summary>
            Delegate to be called every time mouse event occurs in the specified window.
            </summary>
            <param name="event">one of CV_EVENT_</param>
            <param name="x">x-coordinates of mouse pointer in image coordinates</param>
            <param name="y">y-coordinates of mouse pointer in image coordinates</param>
            <param name="flags">a combination of CV_EVENT_FLAG</param>
        </member>
        <member name="T:OpenCvSharp.CvRNG">
            <summary>
            Random number generator 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRNG.Seed">
            <summary>
            64-bit seed value
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor">
            <summary>
            Initializes with seed=-1
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.UInt64)">
            <summary>
            Initializes with specified seed value
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.Int64)">
            <summary>
            Initializes with specified seed value
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.DateTime)">
            <summary>
            Initializes with specified time data 
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.op_Explicit(OpenCvSharp.CvRNG)~System.UInt64">
            <summary>
            explicit cast to ulong
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.op_Explicit(System.UInt64)~OpenCvSharp.CvRNG">
            <summary>
            explicit cast to CvRNG
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandArr(OpenCvSharp.CvArr,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Fills array with random numbers and updates the RNG state
            </summary>
            <param name="arr">The destination array. </param>
            <param name="dist_type">Distribution type.</param>
            <param name="param1">The first parameter of distribution. In case of uniform distribution it is the inclusive lower boundary of random numbers range. In case of normal distribution it is the mean value of random numbers. </param>
            <param name="param2">The second parameter of distribution. In case of uniform distribution it is the exclusive upper boundary of random numbers range. In case of normal distribution it is the standard deviation of random numbers. </param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <returns>uniformly-distributed random 32-bit unsigned integer</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt(System.UInt32)">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <param name="max">the exclusive upper boundary of random numbers range.</param>
            <returns>uniformly-distributed random 32-bit unsigned integer</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt(System.UInt32,System.UInt32)">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <param name="min">the inclusive lower boundary of random numbers range. </param>
            <param name="max">the exclusive upper boundary of random numbers range.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandReal">
            <summary>
            Returns floating-point random number and updates RNG
            </summary>
            <returns>uniformly-distributed random floating-point number from 0..1 range (1 is not included).</returns>
        </member>
        <member name="T:OpenCvSharp.CvQuadEdge2D">
            <summary>
            Quad-edge of planar subdivision
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.FromPtr(System.IntPtr)">
            <summary>
            Creates an instance from native pointer
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.op_Explicit(System.IntPtr)~OpenCvSharp.CvQuadEdge2D">
            <summary>
            explicit cast from IntPtr to CvQuadEdge2D 
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.FromSeqReader(OpenCvSharp.CvSeqReader)">
            <summary>
            Reads a CvQuadEdge2D instance from CvSeqReader
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.op_Explicit(OpenCvSharp.CvQuadEdge2D)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            explicit cast to CvSubdiv2DEdge
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.ToCvSubdiv2DEdge">
            <summary>
            Converts to a CvSubdiv2DEdge instance
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvQuadEdge2D.SizeOf">
            <summary>
            sizeof(CvQuadEdge2D)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvQuadEdge2D.Pt">
            <summary>
            CvSubdiv2DEdge pt[4];
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvQuadEdge2D.Next">
            <summary>
            CvSubdiv2DEdge next[4];
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStringHashNode">
            <summary>
            All the keys (names) of elements in the read file storage are stored in the hash to speed up the lookup operations
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStringHashNode.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvStringHashNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvStringHashNode.SizeOf">
            <summary>
            sizeof(CvStringHashNode) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.HashVal">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.Str">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.ArrayAddress1`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.#ctor(`0[0:,0:])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.op_Implicit(OpenCvSharp.Utilities.ArrayAddress1{`0})~System.IntPtr">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress1`1.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.ArrayAddress2`1">
            <summary>
            Class to get address of specified jagged array 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.#ctor(`0[][])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.op_Implicit(OpenCvSharp.Utilities.ArrayAddress2{`0})~System.IntPtr[]">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress2`1.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConvexityDefect">
            <summary>
            Structure describing a single contour convexity detect
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConvexityDefect.SizeOf">
            <summary>
            sizeof(CvConvexityDefect)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConvexityDefect.#ctor(System.IntPtr,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="depth_point"></param>
            <param name="depth"></param>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.Start">
            <summary>
            Point of the contour where the defect begins
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.End">
            <summary>
            Point of the contour where the defect ends
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.DepthPoint">
            <summary>
            The farthest from the convex hull point within the defect
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.Depth">
            <summary>
            Distance between the farthest point and the convex hull
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqWriter`1">
            <summary>
            Sequence writer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            Initializes process of writing data to sequence (cvStartAppendToSeq).
            </summary>
            <param name="seq">Pointer to the sequence. </param>
            <returns>Writer state; initialized by the function. </returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates new sequence and initializes writer for it (cvStartWriteSeq).
            </summary>
            <param name="seq_flags">Flags of the created sequence. If the sequence is not passed to any function working with a specific type of sequences, the sequence value may be equal to 0, otherwise the appropriate type must be selected from the list of predefined sequence types. </param>
            <param name="header_size">Size of the sequence header. The parameter value may not be less than sizeof(CvSeq). If a certain type or extension is specified, it must fit the base type header. </param>
            <param name="elem_size">Size of the sequence elements in bytes; must be consistent with the sequence type. For example, if the sequence of points is created (element type CV_SEQ_ELTYPE_POINT ), then the parameter elem_size must be equal to sizeof(CvPoint). </param>
            <param name="storage">Sequence location. </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.CvSeqWriter)">
            <summary>
            Initializes from non generic writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">CvSeqWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.WriteSeqElem(`0)">
            <summary>
            (CV_WRITE_SEQ_ELEM)
            </summary>
            <param name="elem"></param>
        </member>
        <member name="T:OpenCvSharp.CvTreeNodeIterator">
            <summary>
            Class that is used to traverse trees
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.node">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.level">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.max_level">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.NextTreeNode">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.NextTreeNode``1">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.PrevTreeNode">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.PrevTreeNode``1">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.MaxLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarFeature">
            <summary>
            A haar feature which consists of 2-3 rectangles with appropriate weights.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarFeature.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvHaarFeature*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarFeature.SizeOf">
            <summary>
            sizeof(CvHaarClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarFeature.Tilted">
            <summary>
            0 means up-right feature, 1 means 45--rotated feature
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarFeature.rect">
            <summary>
            Elements of the haar feature
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarFeature.Rect">
            <summary>
            An element of a haar feature
            </summary>
        </member>
        <member name="T:OpenCvSharp.InsertPosition">
            <summary>
            The flags specifying the modified sequence end
            </summary>
        </member>
        <member name="F:OpenCvSharp.InsertPosition.Back">
            <summary>
            the elements are added/removed to the end of sequence
            </summary>
        </member>
        <member name="F:OpenCvSharp.InsertPosition.Front">
            <summary>
            the elements are added/removed to the beginning of sequenc
            </summary>
        </member>
        <member name="T:OpenCvSharp.HomographyMethod">
            <summary>
            The method used to computed homography matrix
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.Zero">
            <summary>
            Regular method using all the point pairs
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.LMedS">
            <summary>
            Least-Median robust method
            [CV_LMEDS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.Ransac">
            <summary>
            RANSAC-based robust method
            [CV_RANSAC]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DisparityMode">
            <summary>
            Mode of correspondence retrieval
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisparityMode.Birchfield">
            <summary>
            [CV_DISPARITY_BIRCHFIELD]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ChessboardFlag">
            <summary>
            Various operation flags for cvFindChessboardCorners
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.Zero">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.AdaptiveThresh">
            <summary>
            Use adaptive thresholding to convert the image to black-n-white, rather than a fixed threshold level (computed from the average image brightness).
            [CV_CALIB_CB_ADAPTIVE_THRESH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.NormalizeImage">
            <summary>
            Normalize the image using cvNormalizeHist before applying fixed or adaptive thresholding.
            [CV_CALIB_CB_NORMALIZE_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.FilterQuads">
            <summary>
            Use additional criteria (like contour area, perimeter, square-like shape) to filter out false quads that are extracted at the contour retrieval stage.
            [CV_CALIB_CB_FILTER_QUADS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqBlock">
            <summary>
            Continuous sequence block
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">CvSeqBlock*</param>
        </member>
        <member name="F:OpenCvSharp.CvSeqBlock.SizeOf">
            <summary>
            sizeof(CvSeqBlock)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Prev">
            <summary>
            previous sequence block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Next">
            <summary>
            next sequence block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.StartIndex">
            <summary>
            index of the first element in the block + sequence->first->start_index
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Count">
            <summary>
            number of elements in the block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Data">
            <summary>
            pointer to the first element of the block
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHistogram">
            <summary>
            Muti-dimensional histogram
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvHistogram._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor">
            <summary>
            Creates an empty histogram 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.IntPtr)">
            <summary>
            Creates a histogram from pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat)">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][])">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <param name="ranges">Array of ranges for histogram bins. Its meaning depends on the uniform parameter value. The ranges are used for when histogram is calculated or backprojected to determine, which histogram bin corresponds to which value/tuple of values from the input image[s]. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][],System.Boolean)">
            <summary>
            Creates a histogram of the specified size and returns the pointer to the created histogram.
            </summary>
            <param name="sizes">Number of histogram dimensions. </param>
            <param name="type">Histogram representation format.</param>
            <param name="ranges">Array of ranges for histogram bins. Its meaning depends on the uniform parameter value. The ranges are used for when histogram is calculated or backprojected to determine, which histogram bin corresponds to which value/tuple of values from the input image[s]. </param>
            <param name="uniform">Uniformity flag.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvHistogram.SizeOf">
            <summary>
            sizeof(CvHistogram)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source image.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[])">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[],System.Boolean)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[],System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="image">Source images, all are of the same size and type.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of one single-channel image. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">A Source image (though, you may pass CvMat** as well).</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[])">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[],System.Boolean)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[],System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            Calculates the histogram of single-channel images. 
            The elements of a tuple that is used to increment a histogram bin are taken at the same location from the corresponding input images.
            </summary>
            <param name="arr">Source images (though, you may pass CvMat** as well), all are of the same size and type.</param>
            <param name="accumulate">Accumulation flag. If it is set, the histogram is not cleared in the beginning. This feature allows user to compute a single histogram from several images, or to update the histogram online. </param>
            <param name="mask">The operation mask, determines what pixels of the source images are counted. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProject(OpenCvSharp.CvArr[],OpenCvSharp.CvArr)">
            <summary>
            Calculates back projection
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="back_project">Destination back projection image of the same type as the source images. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProject(OpenCvSharp.IplImage[],OpenCvSharp.CvArr)">
            <summary>
            Calculates back projection
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="back_project">Destination back projection image of the same type as the source images. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <param name="factor">Normalization factor for histograms, will affect normalization scale of destination image, pass 1. if unsure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            Locates a template within image by histogram comparison
            </summary>
            <param name="image">Source images (though you may pass CvMat** as well), all are of the same size and type </param>
            <param name="dst">Destination image. </param>
            <param name="patch_size">Size of patch slid though the source images. </param>
            <param name="method">Compasion method, passed to cvCompareHist (see description of that function). </param>
            <param name="factor">Normalization factor for histograms, will affect normalization scale of destination image, pass 1. if unsure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBayesianProb(OpenCvSharp.CvHistogram[],OpenCvSharp.CvHistogram[])">
            <summary>
            Calculates bayesian probabilistic histograms
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram)">
            <summary>
            Divides one histogram by another.
            </summary>
            <param name="hist1">first histogram (the divisor). </param>
            <param name="hist2">second histogram. </param>
            <param name="dst_hist">destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            Divides one histogram by another.
            </summary>
            <param name="hist1">first histogram (the divisor). </param>
            <param name="hist2">second histogram. </param>
            <param name="dst_hist">destination histogram. </param>
            <param name="scale">scale factor for the destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Clear">
            <summary>
            Sets all histogram bins to 0 in case of dense histogram and removes all histogram bins in case of sparse array.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Compare(OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            Compares two dense histograms.
            </summary>
            <param name="hist">target histogram</param>
            <param name="method">Comparison method.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Copy(OpenCvSharp.CvHistogram)">
            <summary>
            Makes a copy of the histogram. 
            If the second histogram dst is null, a new histogram of the same size as src is created. 
            Otherwise, both histograms must have equal types and sizes. 
            Then the function copies the source histogram bins values to destination histogram and sets the same bin values ranges as in src.
            </summary>
            <param name="dst">Reference to destination histogram. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue1D(System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue2D(System.Int32,System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <param name="idx2">3rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValueND(System.Int32[])">
            <summary>
            Returns pointer to histogram bin.
            </summary>
            <param name="idx">Indices of the bin. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetMinMaxValue(System.Single@,System.Single@)">
            <summary>
            Finds minimum and maximum histogram bins.
            </summary>
            <param name="min_value">The minimum value of the histogram.</param>
            <param name="max_value">The maximum value of the histogram.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetMinMaxValue(System.Single@,System.Single@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds minimum and maximum histogram bins.
            </summary>
            <param name="min_value">The minimum value of the histogram.</param>
            <param name="max_value">The maximum value of the histogram.</param>
            <param name="min_idx">The array of coordinates for minimum.</param>
            <param name="max_idx">The array of coordinates for maximum.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Normalize(System.Double)">
            <summary>
            Normalizes the histogram bins by scaling them, such that the sum of the bins becomes equal to factor.
            </summary>
            <param name="factor">Threshold level. </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue1D(System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue2D(System.Int32,System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="idx0">1st index of the bin.</param>
            <param name="idx1">2nd index of the bin.</param>
            <param name="idx2">3rd index of the bin.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValueND(System.Int32[])">
            <summary>
            Queries value of histogram bin.
            </summary>
            <param name="idx">Array of indices.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.SetBinRanges(System.Single[][])">
            <summary>
            Sets bounds of histogram bins
            </summary>
            <param name="ranges">Array of bin ranges arrays.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.SetBinRanges(System.Single[][],System.Boolean)">
            <summary>
            Sets bounds of histogram bins
            </summary>
            <param name="ranges">Array of bin ranges arrays.</param>
            <param name="uniform">Uniformity flag.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Thresh(System.Double)">
            <summary>
            Clears histogram bins that are below the specified threshold.
            </summary>
            <param name="threshold">Threshold level. </param>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Type">
            <summary>
            Histogram representation format
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Bins">
            <summary>
            Histogram bins.
            if Type == Array then returns CvMatND, else if Type == Sparse then CvSparseMat
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.BinsPtr">
            <summary>
            Histogram bins.
            if Type == Array then returns CvMatND, else if Type == Sparse then CvSparseMat
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Dim">
            <summary>
            Number of histogram dimensions.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Thresh1">
            <summary>
            For uniform histograms (thresh). 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Thresh2">
            <summary>
            For non-uniform histograms.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFileNode">
            <summary>
            Basic element of the file storage - scalar or collection
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvFileNode*</param>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.FromPtr(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvFileNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvFileNode.SizeOf">
            <summary>
            sizeof(CvFileNode) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.GetFileNodeName">
            <summary>
            Returns name of file node
            </summary>
            <returns>name of the file node or null</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadInt">
            <summary>
            Retrieves integer value from file node
            </summary>
            <returns>integer that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadInt(System.Int32)">
            <summary>
            Retrieves integer value from file node
            </summary>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>integer that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadReal">
            <summary>
            Retrieves floating-point value from file node
            </summary>
            <returns>returns floating-point value that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadReal(System.Double)">
            <summary>
            Retrieves floating-point value from file node
            </summary>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>returns floating-point value that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadString">
            <summary>
            Retrieves text string from file node
            </summary>
            <returns>returns text string that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadString(System.String)">
            <summary>
            Retrieves text string from file node
            </summary>
            <param name="default_value">The value that is returned if node is null. </param>
            <returns>returns text string that is represented by the file node. If the file node is null, default_value is returned.</returns>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.Tag">
            <summary>
            Type of file node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataHead">
            <summary>
            Dataの先頭8バイトを返す
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataF">
            <summary>
            scalar floating-point number
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataI">
            <summary>
            scalar integer number
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataStr">
            <summary>
            text string
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataSeq">
            <summary>
            sequence (ordered collection of file nodes)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataMap">
            <summary>
            map (collection of named file nodes)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.Name">
            <summary>
            File node name
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvContourScanner">
            <summary>
            CvcontourScanner
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvContourScanner._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Initialize(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Initialize">
            <summary>
            Initializes contour scanning process
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="header_size">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.EndFindContours">
            <summary>
            Finishes scanning process
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.FindNextContour">
            <summary>
            Finds next contour in the image
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.SubstituteContour(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint})">
            <summary>
            Replaces retrieved contour
            </summary>
            <param name="new_contour">Substituting contour. </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvWin32WindowCallback">
            <summary>
            WndProc
            </summary>
            <param name="hwnd"></param>
            <param name="msg">Windows message ID</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="result"></param>
        </member>
        <member name="T:OpenCvSharp.CvMemStoragePos">
            <summary>
            Memory storage position
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStoragePos.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStoragePos.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvMemStoragePos*</param>
        </member>
        <member name="F:OpenCvSharp.CvMemStoragePos.SizeOf">
            <summary>
            sizeof(CvMemStoragePos) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStoragePos.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStoragePos.FreeSpace">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFaceElements">
            <summary>
            CV_FACE_ELEMENTS
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.Mouth">
            <summary>
            
            [CV_FACE_MOUTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.LeftEye">
            <summary>
            
            [CV_FACE_LEFT_EYE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.RightEye">
            <summary>
            
            [CV_FACE_RIGHT_EYE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Int16">
            <summary>
            Managed wrapper of array pointer (Int16*)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Int16.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.#ctor(System.Int16*)">
            <summary>
            Initializes from Int16*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.Set(System.Int32,System.Int16)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int16.Ptr">
            <summary>
            Unmanaged pointer (Int16*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int16.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.WindowMode">
            <summary>
            Flags for the window
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.None">
            <summary>
            No flags 
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.AutoSize">
            <summary>
            Window size is automatically adjusted to fit the displayed image, while user can not change the window size manually. 
            [CV_WINDOW_AUTOSIZE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.ExpandedGui">
            <summary>
            Show new enhance GUI (Qt Backend Only)
            [CV_GUI_EXPANDED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.NormalGui">
            <summary>
            Show old style window without statusbar and toolbar (Qt Backend Only)
            [CV_GUI_NORMAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.StretchImage">
            <summary>
            Image size is automatically adjusted to fit the window size
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.Fullscreen">
            <summary>
            Fullscreen
            [CV_WINDOW_FULLSCREEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.FreeRatio">
            <summary>
            Fix aspect ratio
            [CV_WINDOW_FREERATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.KeepRatio">
            <summary>
            Respect the image ratio
            [CV_WINDOW_KEEPRATIO]
            </summary>
        </member>
        <member name="T:OpenCvSharp.Interpolation">
            <summary>
            Interpolation method
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.NearestNeighbor">
            <summary>
            Nearest-neighbor interpolation, 
            [CV_INTER_NN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Linear">
            <summary>
            Bilinear interpolation (used by default) 
            [CV_INTER_LINEAR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Cubic">
            <summary>
            Bicubic interpolation. 
            [CV_INTER_CUBIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Area">
            <summary>
            Resampling using pixel area relation. It is the preferred method for image decimation that gives moire-free results. In case of zooming it is similar to CV_INTER_NN method. 
            [CV_INTER_AREA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.FillOutliers">
            <summary>
            Fill all the destination image pixels. If some of them correspond to outliers in the source image, they are set to fillval. 
            [CV_WARP_FILL_OUTLIERS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.InverseMap">
            <summary>
            Indicates that matrix is inverse transform from destination image to source and, 
            thus, can be used directly for pixel interpolation. Otherwise, the function finds the inverse transform from map_matrix. 
            [CV_WARP_INVERSE_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Lanczos4">
            <summary>
            [INTER_LANCZOS4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Max">
            <summary>
            [INTER_MAX]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvPoint3D32f">
            <summary>
            3D point with floating-point coordinates
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.SizeOf">
            <summary>
            sizeof(CvPoint3D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.X">
            <summary>
            x-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Y">
            <summary>
            y-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Z">
            <summary>
            z-coordinate, usually zero-based 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Empty">
            <summary>
            Represents a CvPoint3D32f structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="z">z-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
            <param name="z">z-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.Equals(OpenCvSharp.CvPoint3D32f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Equality(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            Compares two CvPoint3D32f objects. The result specifies whether the values of the X, Y and Z properties of the two CvPoint3D32f objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X, Y and Z values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Inequality(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            Compares two CvPoint3D32f objects. The result specifies whether the values of the X, Y or Z properties of the two CvPoint3D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties, Y properties or the Z properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_UnaryPlus(OpenCvSharp.CvPoint3D32f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_UnaryNegation(OpenCvSharp.CvPoint3D32f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Addition(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Subtraction(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Multiply(OpenCvSharp.CvPoint3D32f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.HoughLinesMethod">
            <summary>
            The Hough transform variant
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.Standard">
            <summary>
            Classical or standard Hough transform. 
            Every line is represented by two floating-point numbers (ρ, θ), where ρ is a distance between (0,0) point and the line, 
            and θ is the angle between x-axis and the normal to the line. 
            Thus, the matrix must be (the created sequence will be) of CV_32FC2 type. 
            [CV_HOUGH_STANDARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.Probabilistic">
            <summary>
            Probabilistic Hough transform (more efficient in case if picture contains a few long linear segments). 
            It returns line segments rather than the whole lines. Every segment is represented by starting and ending points, 
            and the matrix must be (the created sequence will be) of CV_32SC4 type. 
            [CV_HOUGH_PROBABILISTIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.MultiScale">
            <summary>
            Multi-scale variant of classical Hough transform. The lines are encoded the same way as in HoughLinesMethod.Standard. 
            [CV_HOUGH_MULTI_SCALE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HaarDetectionType">
            <summary>
            Modes of operation for cvHaarDetectObjects
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.Zero">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.DoCannyPruning">
            <summary>
            If it is set, the function uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. 
            The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing.
            [CV_HAAR_DO_CANNY_PRUNING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.ScaleImage">
            <summary>
            For each scale factor used the function will downscale the image rather than "zoom" the feature coordinates in the classifier cascade. 
            Currently, the option can only be used alone, i.e. the flag can not be set together with the others.
            [CV_HAAR_SCALE_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.FindBiggestObject">
            <summary>
            If it is set, the function finds the largest object (if any) in the image. That is, the output sequence will contain one (or zero) element(s).
            [CV_HAAR_FIND_BIGGEST_OBJECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.DoRoughSearch">
            <summary>
            It should be used only when FindBiggestObject is set and min_neighbors > 0. 
            If the flag is set, the function does not look for candidates of a smaller size 
            as soon as it has found the object (with enough neighbor candidates) at the current scale. 
            Typically, when min_neighbors is fixed, the mode yields less accurate (a bit larger) object rectangle 
            than the regular single-object mode (flags=FindBiggestObject), 
            but it is much faster, up to an order of magnitude. A greater value of min_neighbors may be specified to improve the accuracy.
            [CV_HAAR_DO_ROUGH_SEARCH]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureType">
            <summary>
            Capture type of CvCapture (Camera or AVI file)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureType.File">
            <summary>
            Captures from an AVI file
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureType.Camera">
            <summary>
            Captures from digital camera
            </summary>
        </member>
        <member name="T:OpenCvSharp.ArrComparison">
            <summary>
            The flag specifying the relation between the elements to be checked
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.EQ">
            <summary>
            src1(I) "equal to" src2(I)
            [CV_CMP_EQ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.GT">
            <summary>
            src1(I) "greater than" src2(I)
            [CV_CMP_GT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.GE">
            <summary>
            src1(I) "greater or equal" src2(I)
            [CV_CMP_GE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.LT">
            <summary>
            src1(I) "less than" src2(I)
            [CV_CMP_LT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.LE">
            <summary>
            src1(I) "less or equal" src2(I)
            [CV_CMP_LE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.NE">
            <summary>
            src1(I) "not equal to" src2(I)
            [CV_CMP_NE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMatND">
            <summary>
            Multi-dimensional dense multi-channel array
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArraySingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayDouble">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Allocates header for multi-dimensional dense array and the underlying data, and returns pointer to the created array.
            </summary>
            <param name="dims">Number of array dimensions. It must not exceed CV_MAX_DIM (=32 by default, though it may be changed at build time) </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType,System.Array)">
            <summary>
            Allocates header for multi-dimensional dense array and the underlying data, and returns pointer to the created array.
            </summary>
            <param name="dims">Number of array dimensions. It must not exceed CV_MAX_DIM (=32 by default, though it may be changed at build time) </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements.</param>
            <param name="data">Optional data pointer assigned to the matrix header.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor">
            <summary>
            Allocates memory
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Boolean)">
            <summary>
            Allocates memory
            </summary>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_UnaryPlus(OpenCvSharp.CvMatND)">
            <summary>
            Unary plus operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_UnaryNegation(OpenCvSharp.CvMatND)">
            <summary>
            Unary negation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_OnesComplement(OpenCvSharp.CvMatND)">
            <summary>
            Logical nagation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Addition(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Binary plus operator (cvAdd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Addition(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            Binary plus operator (cvAddS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Subtraction(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Subtraction(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Multiply(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Multiplicative operator (cvMatMul)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Multiply(OpenCvSharp.CvMatND,System.Double)">
            <summary>
            Multiplicative operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Division(OpenCvSharp.CvMatND,System.Double)">
            <summary>
            Division operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseAnd(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Bitwise AND operator (cvAnd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseAnd(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise AND operator (cvAndS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseOr(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Bitwise OR operator (cvOr)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseOr(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise OR operator (cvOrS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_ExclusiveOr(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            Bitwise XOR operator (cvXor)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_ExclusiveOr(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise XOR operator (cvXorS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvMatND.SizeOf">
            <summary>
            sizeof(CvMatND)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.Clone">
            <summary>
            Creates full copy of multi-dimensional array
            </summary>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.InitMatNDHeader(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            Initializes multi-dimensional array header.
            </summary>
            <param name="dims">Number of array dimensions. </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements. The same as for CvMat. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.InitMatNDHeader``1(System.Int32,System.Int32[],OpenCvSharp.MatrixType,``0[])">
            <summary>
            Initializes multi-dimensional array header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dims">Number of array dimensions. </param>
            <param name="sizes">Array of dimension sizes. </param>
            <param name="type">Type of array elements. The same as for CvMat. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Dims">
            <summary>
            Get number of dimensions of the array
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Type">
            <summary>
            CvMatND signature (CV_MATND_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.RefCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Dim">
            <summary>
            Pairs (number of elements, distance between elements in bytes) for every dimension
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Data">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataByte">
            <summary>
            Data pointer as byte*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataInt16">
            <summary>
            Data pointer as short*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataInt32">
            <summary>
            Data pointer as int*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataSingle">
            <summary>
            Data pointer as float*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataDouble">
            <summary>
            Data pointer as double*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayByte">
            <summary>
            Data pointer(byte*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayInt16">
            <summary>
            Data pointer(short*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayInt32">
            <summary>
            Data pointer(int*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArraySingle">
            <summary>
            Data pointer(float*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayDouble">
            <summary>
            Data pointer(double*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMatND.Dimension">
            <summary>
            Pairs (number of elements, distance between elements in bytes) for every dimension
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND.Dimension.Size">
            <summary></summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND.Dimension.Step">
            <summary></summary>
        </member>
        <member name="T:OpenCvSharp.CvChain">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChain.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvChain.SizeOf">
            <summary>
            sizeof(CvChain) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="storage">Storage location for the resulting polylines. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            /// <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <param name="minimal_perimeter">Approximates only those contours whose perimeters are not less than minimal_perimeter. Other chains are removed from the resulting structure. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32,System.Boolean)">
            <summary>
            Approximates Freeman chain(s) with polygonal curve
            </summary>
            <param name="storage">Storage location for the resulting polylines. </param>
            <param name="method">Approximation method.</param>
            <param name="parameter">Method parameter (not used now). </param>
            <param name="minimal_perimeter">Approximates only those contours whose perimeters are not less than minimal_perimeter. Other chains are removed from the resulting structure. </param>
            <param name="recursive">If true, the function approximates all chains that access can be obtained to from src_seq by h_next or v_next links. If false, the single chain is approximated. </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvChain.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvKalman">
            <summary>
            Kalman filter state
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvKalman._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.Int32,System.Int32)">
            <summary>
            Allocates Kalman filter structure
            </summary>
            <param name="dynam_params">dimensionality of the state vector </param>
            <param name="measure_params">dimensionality of the measurement vector </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates Kalman filter structure
            </summary>
            <param name="dynam_params">dimensionality of the state vector </param>
            <param name="measure_params">dimensionality of the measurement vector </param>
            <param name="control_params">dimensionality of the control vector </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.IntPtr)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr">struct CvMemStorage*</param>
            <param name="isEnabledDispose">自動的にGCで解放してよいかどうか</param>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvKalman.SizeOf">
            <summary>
            sizeof(CvKalman)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Correct(OpenCvSharp.CvMat)">
            <summary>
            Adjusts model state (cvKalmanCorrect). 
            </summary>
            <param name="measurement">CvMat containing the measurement vector. </param>
            <returns>The function stores adjusted state at kalman->state_post and returns it on output.</returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByMeasurement(OpenCvSharp.CvMat)">
            <summary>
            Adjusts model state
            </summary>
            <param name="measurement">CvMat containing the measurement vector. </param>
            <returns>The function stores adjusted state at kalman->state_post and returns it on output.</returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Predict">
            <summary>
            Estimates subsequent model state (cvKalmanPredict).
            </summary>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Predict(OpenCvSharp.CvMat)">
            <summary>
            Estimates subsequent model state (cvKalmanPredict).
            </summary>
            <param name="control">Control vector (uk), should be null iff there is no external control (control_params=0).</param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByTime">
            <summary>
            Estimates subsequent model state
            </summary>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByTime(OpenCvSharp.CvMat)">
            <summary>
            Estimates subsequent model state
            </summary>
            <param name="control">Control vector (uk), should be null iff there is no external control (control_params=0).</param>
            <returns>The function returns the estimated state. </returns>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MP">
            <summary>
            Number of measurement vector dimensions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.DP">
            <summary>
            Number of state vector dimensions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.CP">
            <summary>
            Number of control vector dimensions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.StatePre">
            <summary>
            Predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.StatePost">
            <summary>
            Corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.TransitionMatrix">
            <summary>
            State transition matrix (A) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ControlMatrix">
            <summary>
            Control matrix (B)  (it is not used if there is no control
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementMatrix">
            <summary>
            Measurement matrix (H)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ProcessNoiseCov">
            <summary>
            Process noise covariance matrix (Q)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementNoiseCov">
            <summary>
            Measurement noise covariance matrix (R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ErrorCovPre">
            <summary>
            Priori error estimate covariance matrix (P'(k)):  P'(k)=A*P(k-1)*At + Q)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Gain">
            <summary>
            Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ErrorCovPost">
            <summary>
            Posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp1">
            <summary>
            Temporary matrix 1
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp2">
            <summary>
            Temporary matrix 2
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp3">
            <summary>
            Temporary matrix 3
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp4">
            <summary>
            Temporary matrix 4
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp5">
            <summary>
            Temporary matrix 5
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PosterState">
            <summary>
            state_pre->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PriorState">
            <summary>
            state_post->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.DynamMatr">
            <summary>
            transition_matrix->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementMatr">
            <summary>
            measurement_matrix->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MNCovariance">
            <summary>
            measurement_noise_cov->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PNCovariance">
            <summary>
            process_noise_cov->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.KalmGainMatr">
            <summary>
            gain->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PriorErrorCovariance">
            <summary>
            error_cov_pre->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PosterErrorCovariance">
            <summary>
            error_cov_post->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp1Data">
            <summary>
            temp1->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp2Data">
            <summary>
            temp2->data.fl
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFileStorage">
            <summary>
            File Storage
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFileStorage._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode)">
            <summary>
            Opens file storage for reading or writing data
            </summary>
            <param name="filename">Name of the file associated with the storage. </param>
            <param name="memstorage">Memory storage used for temporary data and for storing dynamic structures, such as CvSeq or CvGraph. If it is null, a temporary memory storage is created and used. </param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            Opens file storage for reading or writing data
            </summary>
            <param name="filename">Name of the file associated with the storage. </param>
            <param name="memstorage">Memory storage used for temporary data and for storing dynamic structures, such as CvSeq or CvGraph. If it is null, a temporary memory storage is created and used. </param>
            <param name="flags"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">struct CvFileStorage*</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.EndWriteStruct">
            <summary>
            Ends writing a structure
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNode(OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. If both map and key are nulls, the function returns the root file node - a map that contains top-level nodes. </param>
            <param name="key">Unique pointer to the node name, retrieved with cvGetHashedKey. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNode(OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode,System.Boolean)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. If both map and key are nulls, the function returns the root file node - a map that contains top-level nodes. </param>
            <param name="key">Unique pointer to the node name, retrieved with cvGetHashedKey. </param>
            <param name="create_missing">Flag that specifies, whether an absent node should be added to the map, or not. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNodeByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds node in the map or file storage
            </summary>
            <param name="map">The parent map. If it is null, the function searches in all the top-level nodes (streams), starting from the first one. </param>
            <param name="name">The file node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetRootFileNode">
            <summary>
            Retrieves one of top-level nodes of the file storage
            </summary>
            <returns>One of top-level file nodes</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetRootFileNode(System.Int32)">
            <summary>
            Retrieves one of top-level nodes of the file storage
            </summary>
            <param name="stream_index">Zero-based index of the stream. In most cases, there is only one stream in the file, however there can be several. </param>
            <returns>One of top-level file nodes</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetHashedKey(System.String)">
            <summary>
            Returns a unique pointer for given name
            </summary>
            <param name="name">Literal node name. </param>
            <returns>The unique pointer for each particular file node name.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetHashedKey(System.String,System.Boolean)">
            <summary>
            Returns a unique pointer for given name
            </summary>
            <param name="name">Literal node name. </param>
            <param name="create_missing">Length of the name (if it is known a priori), or -1 if it needs to be calculated. </param>
            <returns>The unique pointer for each particular file node name.</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Read``1(OpenCvSharp.CvFileNode)">
            <summary>
            Decodes object and returns pointer to it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The root object node. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadByName``1(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds object and decodes it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadIntByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadIntByName(OpenCvSharp.CvFileNode,System.String,System.Int32)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRawData``1(OpenCvSharp.CvFileNode,``0[]@,System.String)">
            <summary>
            Reads multiple numbers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">The file node (a sequence) to read numbers from. </param>
            <param name="dst">Reference to the destination array. </param>
            <param name="dt">Specification of each array element. It has the same format as in cvWriteRawData. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRawDataSlice``1(OpenCvSharp.CvSeqReader,System.Int32,``0[]@,System.String)">
            <summary>
            Initializes file node sequence reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The sequence reader. Initialize it with cvStartReadRawData. </param>
            <param name="count">The number of elements to read. </param>
            <param name="dst">Destination array. </param>
            <param name="dt">Specification of each array element. It has the same format as in cvWriteRawData. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRealByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRealByName(OpenCvSharp.CvFileNode,System.String,System.Double)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadStringByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadStringByName(OpenCvSharp.CvFileNode,System.String,System.String)">
            <summary>
            Finds file node and returns its value
            </summary>
            <param name="map">The parent map. If it is null, the function searches a top-level node. </param>
            <param name="name">The node name. </param>
            <param name="default_value">The value that is returned if the file node is not found. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartNextStream">
            <summary>
            Starts the next stream
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartReadRawData(OpenCvSharp.CvFileNode,OpenCvSharp.CvSeqReader@)">
            <summary>
            Initializes file node sequence reader
            </summary>
            <param name="src">The file node (a sequence) to read numbers from. </param>
            <param name="reader">Output reference to the sequence reader. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartWriteStruct(System.String,OpenCvSharp.NodeType)">
            <summary>
            Starts writing a new structure
            </summary>
            <param name="name">Name of the written structure. The structure can be accessed by this name when the storage is read. </param>
            <param name="struct_flags">A combination one of the NodeType flags</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartWriteStruct(System.String,OpenCvSharp.NodeType,System.String)">
            <summary>
            Starts writing a new structure
            </summary>
            <param name="name">Name of the written structure. The structure can be accessed by this name when the storage is read. </param>
            <param name="struct_flags">A combination one of the NodeType flags</param>
            <param name="type_name">Optional parameter - the object type name. 
            In case of XML it is written as type_id attribute of the structure opening tag. 
            In case of YAML it is written after a colon following the structure name. Mainly it comes with user objects. 
            When the storage is read, the encoded type name is used to determine the object type. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Write(System.String,OpenCvSharp.CvArr)">
            <summary>
            Writes user object
            </summary>
            <param name="name">Name, of the written object. Should be null if and only if the parent structure is a sequence. </param>
            <param name="ptr">Pointer to the object. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Write(System.String,OpenCvSharp.CvArr,OpenCvSharp.CvAttrList)">
            <summary>
            Writes user object
            </summary>
            <param name="name">Name, of the written object. Should be null if and only if the parent structure is a sequence. </param>
            <param name="ptr">Pointer to the object. </param>
            <param name="attributes">The attributes of the object. They are specific for each particular type.</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteComment(System.String)">
            <summary>
            Writes comment
            </summary>
            <param name="comment">The written comment, single-line or multi-line. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteComment(System.String,System.Boolean)">
            <summary>
            Writes comment
            </summary>
            <param name="comment">The written comment, single-line or multi-line. </param>
            <param name="eol_comment">If true, the function tries to put the comment in the end of current line. 
            If the flag is false, if the comment is multi-line, or if it does not fit in the end of the current line, the comment starts from a new line. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteFileNode(System.String,OpenCvSharp.CvFileNode,System.Boolean)">
            <summary>
            Writes file node to another file storage
            </summary>
            <param name="new_node_name">New name of the file node in the destination file storage. To keep the existing name, use cvGetFileNodeName(node). </param>
            <param name="node">The written node </param>
            <param name="embed">If the written node is a collection and this parameter is true, no extra level of hierarchy is created. 
            Instead, all the elements of node are written into the currently written structure. 
            Of course, map elements may be written only to map, and sequence elements may be written only to sequence. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteInt(System.String,System.Int32)">
            <summary>
            Writes an integer value
            </summary>
            <param name="name">Name of the written value. Should be NULL if and only if the parent structure is a sequence. </param>
            <param name="value">The written value. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteRawData``1(``0[],System.String)">
            <summary>
            Writes multiple numbers
            </summary>
            <typeparam name="T">Type of the elements in src</typeparam>
            <param name="src">Written array </param>
            <param name="dt">Format</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteReal(System.String,System.Double)">
            <summary>
            Writes a floating-point value
            </summary>
            <param name="name">Name of the written value. Should be null if and only if the parent structure is a sequence. </param>
            <param name="value">The written value. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteString(System.String,System.String)">
            <summary>
            Writes a text string
            </summary>
            <param name="name">Name of the written string. Should be null if and only if the parent structure is a sequence. </param>
            <param name="str">The written text string. </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteString(System.String,System.String,System.Boolean)">
            <summary>
            Writes a text string
            </summary>
            <param name="name">Name of the written string. Should be null if and only if the parent structure is a sequence. </param>
            <param name="str">The written text string. </param>
            <param name="quote">If true, the written string is put in quotes, regardless of whether they are required or not. 
            Otherwise, if the flag is false, quotes are used only when they are required (e.g. when the string starts with a digit or contains spaces). </param>
        </member>
        <member name="M:OpenCvSharp.WCvQuadEdge2D.pt(System.Int64)">
            <summary>
            pt[i]
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.WCvQuadEdge2D.next(System.Int64)">
            <summary>
            next[i]
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvStarDetectorParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarDetectorParams._p">
            <summary>
            field data
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
            <param name="suppressNonmaxSize"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Equals(OpenCvSharp.CvStarDetectorParams)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.op_Equality(OpenCvSharp.CvStarDetectorParams,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.op_Inequality(OpenCvSharp.CvStarDetectorParams,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.MaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.ResponseThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.LineThresholdProjected">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.LineThresholdBinarized">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.SuppressNonmaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.LoadMode">
            <summary>
            Specifies colorness and Depth of the loaded image
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.Unchanged">
            <summary>
            8 bit, color or gray [CV_LOAD_IMAGE_UNCHANGED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.GrayScale">
            <summary>
            8 bit, gray [CV_LOAD_IMAGE_GRAYSCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.Color">
            <summary>
            8 bit unless combined with AnyDepth, color [CV_LOAD_IMAGE_COLOR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.AnyDepth">
            <summary>
            any Depth, if specified on its own gray [CV_LOAD_IMAGE_ANYDEPTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.AnyColor">
            <summary>
            by itself equivalent to Unchanged but can be modified with AnyDepth [CV_LOAD_IMAGE_ANYCOLOR]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D`1">
            <summary>
            A class to access a native pointer like array
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D`1._ptr">
            <summary>
            pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D`1._size">
            <summary>
            sizeof(T)
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.#ctor(System.IntPtr)">
            <summary>
            Initializes from IntPtr
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.#ctor(System.Void*)">
            <summary>
            Initializes from void*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.Get(System.Int32)">
            <summary>
            Return the particular element of array
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.Set(System.Int32,`0)">
            <summary>
            Change the particular array element
            </summary>
            <param name="index">zero-based component of the element index </param>
            <param name="value">The assigned value </param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D`1.Ptr">
            <summary>
            Unmanaged pointer (T*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">zero-based component of the element index </param>
            <returns>the particular array element</returns>
        </member>
        <member name="T:OpenCvSharp.ThresholdType">
            <summary>
            Thresholding type
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Binary">
            <summary>
            [CV_THRESH_BINARY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.BinaryInv">
            <summary>
            [CV_THRESH_BINARY_INV]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Truncate">
            <summary>
            [CV_THRESH_TRUNC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.ToZero">
            <summary>
            [CV_THRESH_TOZERO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.ToZeroInv">
            <summary>
            [CV_THRESH_TOZERO_INV]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Mask">
            <summary>
            [CV_THRESH_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Otsu">
            <summary>
            Otsu algorithm
            [CV_THRESH_OTSU]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ReduceDimension">
            <summary>
            The dimension index along which the matrix is reduce.
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Row">
            <summary>
            The matrix is reduced to a single row.
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Column">
            <summary>
            The matrix is reduced to a single column.
            [= 1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Auto">
            <summary>
            The dimension is chosen automatically by analysing the dst size. 
            [= -1]
            </summary>
        </member>
        <member name="T:OpenCvSharp.BorderType">
            <summary>
            Type of the border to create around the copied source image rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Constant">
            <summary>
            Border is filled with the fixed value, passed as last parameter of the function.
            [IPL_BORDER_CONSTANT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Replicate">
            <summary>
            The pixels from the top and bottom rows, the left-most and right-most columns are replicated to fill the border.
            [IPL_BORDER_REPLICATE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Reflict">
            <summary>
            
            [IPL_BORDER_REFLECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Reflict101">
            <summary>
            
            [IPL_BORDER_REFLECT_101]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Wrap">
            <summary>
            
            [IPL_BORDER_WRAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Default">
            <summary>
            
            [BORDER_DEFAULT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.BitDepth">
            <summary>
            Bit Depth of image elements
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U1">
            <summary>
            unsigned 1-bit integers [IPL_DEPTH_1U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U8">
            <summary>
            unsigned 8-bit integers [IPL_DEPTH_8U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S8">
            <summary>
            signed 8-bit integers [IPL_DEPTH_8S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U16">
            <summary>
            unsigned 16-bit integers [IPL_DEPTH_16U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S16">
            <summary>
            signed 16-bit integers [IPL_DEPTH_16S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S32">
            <summary>
            signed 32-bit integers [IPL_DEPTH_32S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.F32">
            <summary>
            single precision floating-point numbers [IPL_DEPTH_32F]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.F64">
            <summary>
            double precision floating-point numbers [IPL_DEPTH_64F]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSet`1">
            <summary>
            Collection of nodes
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet`1.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSet*</param>
        </member>
        <member name="M:OpenCvSharp.CvSet`1.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            Creates empty set
            </summary>
            <param name="set_flags">Type of the created set. </param>
            <param name="header_size">Set header size; may not be less than sizeof(CvSet). </param>
            <param name="elem_size">Set element size; may not be less than CvSetElem. </param>
            <param name="storage">Container for the set. </param>
        </member>
        <member name="M:OpenCvSharp.CvSet`1.#ctor(OpenCvSharp.CvSet)">
            <summary>
            Initializes from non generic instance
            </summary>
            <param name="set">CvSet</param>
        </member>
        <member name="T:OpenCvSharp.CvMat">
            <summary>
            Multi-channel matrix
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._dataArrayByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._dataArrayInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._dataArrayInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._dataArraySingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat._dataArrayDouble">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix.
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Array)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix. (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <param name="elements">Data of elements. The type of the array must be blittable.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Array,System.Boolean)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix. (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <param name="elements">Data of elements. The type of the array must be blittable.</param>
            <param name="copyData"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.IntPtr)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix. (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <param name="data">Data pointer of elements.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,OpenCvSharp.CvScalar)">
            <summary>
            Allocates header for the new matrix and underlying data, and returns a pointer to the created matrix.
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <param name="value">Initial value of elements</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.String)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <param name="flags">Specifies colorness and Depth of the loaded image.</param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.IntPtr)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes by native pointer
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor">
            <summary>
            Allocates memory
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Boolean)">
            <summary>
            Allocates memory
            </summary>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Double[])">
            <summary>
            Creates CvMat from double liner array
            </summary>
            <param name="data"></param>
            <returns>CvMat (F64C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Single[])">
            <summary>
            Creates CvMat from float liner array
            </summary>
            <param name="data"></param>
            <returns>CvMat (F32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int32[])">
            <summary>
            Creates CvMat from int liner array
            </summary>
            <param name="data"></param>
            <returns>CvMat (S32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int16[])">
            <summary>
            Creates CvMat from short liner array
            </summary>
            <param name="data"></param>
            <returns>CvMat (S16C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Byte[])">
            <summary>
            Creates CvMat from byte liner array
            </summary>
            <param name="data"></param>
            <returns>CvMat (U8C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray``1(``0[],OpenCvSharp.MatrixType)">
            <summary>
            Creates CvMat from generic liner array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Double[0:,0:])">
            <summary>
            Creates CvMat from double rectangular array
            </summary>
            <param name="data"></param>
            <returns>CvMat (F64C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Single[0:,0:])">
            <summary>
            Creates CvMat from float rectangular array
            </summary>
            <param name="data"></param>
            <returns>CvMat (F32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int32[0:,0:])">
            <summary>
            Creates CvMat from int rectangular array
            </summary>
            <param name="data"></param>
            <returns>CvMat (S32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int16[0:,0:])">
            <summary>
            Creates CvMat from short rectangular array
            </summary>
            <param name="data"></param>
            <returns>CvMat (S16C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Byte[0:,0:])">
            <summary>
            Creates CvMat from byte rectangular array
            </summary>
            <param name="data"></param>
            <returns>CvMat (U8C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray``1(``0[0:,0:],OpenCvSharp.MatrixType)">
            <summary>
            Creates CvMat from generic rectangular array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToLinearArtay``1(``0[0:,0:])">
            <summary>
            2次元のRectangular Arrayを1次元配列に変換する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromFile(System.String)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.LoadImageM(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from the specified file and returns the reference to the loaded image as CvMat. 
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <param name="flags">Specifies colorness and Depth of the loaded image.</param>
            <returns>the reference to the loaded image. </returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.AffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            Calculates affine transform from 3 corresponding points (cvGetAffineTransform).
            </summary>
            <param name="src">Coordinates of 3 triangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 3 corresponding triangle vertices in the destination image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.PerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            Calculates perspective transform from 4 corresponding points.
            </summary>
            <param name="src">Coordinates of 4 quadrangle vertices in the source image. </param>
            <param name="dst">Coordinates of the 4 corresponding quadrangle vertices in the destination image. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Identity(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Initializes identity matrix
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Identity(System.Int32,System.Int32,OpenCvSharp.MatrixType,OpenCvSharp.CvScalar)">
            <summary>
            Initializes scaled identity matrix
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements.</param>
            <param name="value">The value to assign to the diagonal elements. </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            Calculates affine matrix of 2d rotation.
            </summary>
            <param name="center">Center of the rotation in the source image. </param>
            <param name="angle">The rotation angle in degrees. Positive values mean couter-clockwise rotation (the coordiate origin is assumed at top-left corner). </param>
            <param name="scale">Isotropic scale factor. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvMat.SizeOf">
            <summary>
            sizeof(CvMat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_UnaryPlus(OpenCvSharp.CvMat)">
            <summary>
            Unary plus operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_UnaryNegation(OpenCvSharp.CvMat)">
            <summary>
            Unary negation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_OnesComplement(OpenCvSharp.CvMat)">
            <summary>
            Logical nagation operator
            </summary>
            <param name="a">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Addition(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Binary plus operator (cvAdd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Addition(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            Binary plus operator (cvAddS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Subtraction(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Subtraction(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            Binary negation operator (cvSub)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Multiplicative operator (cvMatMul)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(OpenCvSharp.CvMat,System.Double)">
            <summary>
            Multiplicative operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(System.Double,OpenCvSharp.CvMat)">
            <summary>
            Multiplicative operator (cvAddWeighted)
            </summary>
            <param name="a">scalar</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Division(OpenCvSharp.CvMat,System.Double)">
            <summary>
            Division operator (cvAddWeighted)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseAnd(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Bitwise AND operator (cvAnd)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseAnd(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise AND operator (cvAndS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseOr(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Bitwise OR operator (cvOr)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseOr(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise OR operator (cvOrS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_ExclusiveOr(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Bitwise XOR operator (cvXor)
            </summary>
            <param name="a">matrix</param>
            <param name="b">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_ExclusiveOr(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            Bitwise XOR operator (cvXorS)
            </summary>
            <param name="a">matrix</param>
            <param name="b">scalar</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
            <param name="principal_point">The principal point in realworld units</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@,System.Double@)">
            <summary>
            Finds intrinsic and extrinsic camera parameters using calibration pattern
            </summary>
            <param name="image_size">Image size in pixels </param>
            <param name="aperture_width">Aperture width in realworld units</param>
            <param name="aperture_height">Aperture width in realworld units</param>
            <param name="fovx">Field of view angle in x direction in degrees</param>
            <param name="fovy">Field of view angle in y direction in degrees</param>
            <param name="focal_length">Focal length in realworld units</param>
            <param name="principal_point">The principal point in realworld units</param>
            <param name="pixel_aspect_ratio">The pixel aspect ratio ~ fy/fx</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Clone">
            <summary>
            Creates matrix copy (cvCloneMat)
            </summary>
            <returns>a copy of input array</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.CompleteSymm">
            <summary>
            Completes the symmetric matrix from the lower part
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.CompleteSymm(System.Boolean)">
            <summary>
            Completes the symmetric matrix from the lower (LtoR=0) or from the upper (LtoR!=0) part
            </summary>
            <param name="LtoR"></param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ComputeCorrespondEpilines(System.Int32,OpenCvSharp.CvMat,OpenCvSharp.CvMat@)">
            <summary>
            For points in one image of stereo pair computes the corresponding epilines in the other image
            </summary>
            <param name="which_image">Index of the image (1 or 2) that contains the points</param>
            <param name="fundamental_matrix">Fundamental matrix </param>
            <param name="correspondent_lines">Computed epilines, 3xN or Nx3 array </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ConvertPointsHomogenious(OpenCvSharp.CvMat)">
            <summary>
            Convert points to/from homogeneous coordinates
            </summary>
            <param name="dst">The output point array, must contain the same number of points as the input; The dimensionality must be the same, 1 less or 1 more than the input, and also within 2..4. </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ConvertPointsHomogeneous(OpenCvSharp.CvMat)">
            <summary>
            Convert points to/from homogeneous coordinates
            </summary>
            <param name="dst">The output point array, must contain the same number of points as the input; The dimensionality must be the same, 1 less or 1 more than the input, and also within 2..4. </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecodeImage(OpenCvSharp.LoadMode)">
            <summary>
            Decode image stored in the buffer
            </summary>
            <param name="iscolor">Specifies color type of the loaded image</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecodeImageM(OpenCvSharp.LoadMode)">
            <summary>
            Decode image stored in the buffer
            </summary>
            <param name="iscolor">Specifies color type of the loaded image</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
            <param name="rotMatrX">Optional 3x3 rotation matrix around x-axis</param>
            <param name="rotMatrY">Optional 3x3 rotation matrix around y-axis</param>
            <param name="rotMatrZ">Optional 3x3 rotation matrix around z-axis</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            Computes projection matrix decomposition
            </summary>
            <param name="calibMatr">The output 3x3 internal calibration matrix K</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R</param>
            <param name="posVect">The output 4x1 external homogenious position vector C</param>
            <param name="rotMatrX">Optional 3x3 rotation matrix around x-axis</param>
            <param name="rotMatrY">Optional 3x3 rotation matrix around y-axis</param>
            <param name="rotMatrZ">Optional 3x3 rotation matrix around z-axis</param>
            <param name="eulerAngles">Optional 3 points containing the three Euler angles of rotation</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.EncodeImage(System.String,System.Int32[])">
            <summary>
            Encode image and store the result as a byte vector (single-row 8uC1 matrix)
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="prms">The format-specific parameters</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.EncodeImage(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Encode image and store the result as a byte vector (single-row 8uC1 matrix)
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="prms">The format-specific parameters</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Initializes matrix header.
            </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            Initializes matrix header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[],System.Int32)">
            <summary>
            Initializes matrix header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="cols">Number of columns in the matrix. </param>
            <param name="type">Type of the matrix elements. </param>
            <param name="data">Optional data pointer assigned to the matrix header. </param>
            <param name="step">Full row width in bytes of the data assigned. By default, the minimal possible step is used, r.e., no gaps is assumed between subsequent rows of the matrix. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.mGet(System.Int32,System.Int32)">
            <summary>
            Return the particular element of single-channel floating-point matrix
            </summary>
            <param name="row">The zero-based index of row. </param>
            <param name="col">The zero-based index of column. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.mSet(System.Int32,System.Int32,System.Double)">
            <summary>
            Return the particular element of single-channel floating-point matrix
            </summary>
            <param name="row">The zero-based index of row. </param>
            <param name="col">The zero-based index of column. </param>
            <param name="value">The new value of the matrix element </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Rodrigues2(OpenCvSharp.CvMat)">
            <summary>
            Converts rotation matrix to rotation vector or vice versa
            </summary>
            <param name="dst">The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Converts rotation matrix to rotation vector or vice versa
            </summary>
            <param name="dst">The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively. </param>
            <param name="jacobian">Optional output Jacobian matrix, 3x9 or 9x3 - partial derivatives of the output array components w.r.t the input array components. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
            <param name="matrixQx">Optional 3x3 rotation matrix around x-axis</param>
            <param name="matrixQy">Optional 3x3 rotation matrix around y-axis</param>
            <param name="matrixQz">Optional 3x3 rotation matrix around z-axis</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            Computes RQ decomposition for 3x3 matrices
            </summary>
            <param name="matrixR">The output 3x3 upper-triangular matrix R</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix Q</param>
            <param name="matrixQx">Optional 3x3 rotation matrix around x-axis</param>
            <param name="matrixQy">Optional 3x3 rotation matrix around y-axis</param>
            <param name="matrixQz">Optional 3x3 rotation matrix around z-axis</param>
            <param name="eulerAngles">Optional 3 points containing the three Euler angles of rotation</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Transpose">
            <summary>
            Transposes matrix
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.T">
            <summary>
            Transposes matrix
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.UndistortPoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes the ideal point coordinates from the observed point coordinates
            </summary>
            <param name="dst">The ideal point coordinates, after undistortion and reverse perspective transformation. </param>
            <param name="camera_matrix">The camera matrix A=[fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="dist_coeffs">The vector of distortion coefficients, 4x1, 1x4, 5x1 or 1x5. </param>
            <param name="R">The rectification transformation in object space (3x3 matrix). R1 or R2, computed by cvStereoRectify can be passed here. If the parameter is null, the identity matrix is used. </param>
            <param name="P">The new camera matrix (3x3) or the new projection matrix (3x4). P1 or P2, computed by cvStereoRectify can be passed here. If the parameter is null, the identity matrix is used. </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToArray">
            <summary>
            Converts this CvMat object to a managed linear array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToRectangularArray">
            <summary>
            Converts this CvMat object to a managed rectangular array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvMat.Type">
            <summary>
            CvMat signature (CV_MAT_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Step">
            <summary>
            Full row length in bytes
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Data">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataByte">
            <summary>
            Data pointer as byte*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataInt16">
            <summary>
            Data pointer as short*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataInt32">
            <summary>
            Data pointer as int*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataSingle">
            <summary>
            Data pointer as float*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataDouble">
            <summary>
            Data pointer as double*
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayByte">
            <summary>
            Data pointer(byte*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayInt16">
            <summary>
            Data pointer(short*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayInt32">
            <summary>
            Data pointer(int*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArraySingle">
            <summary>
            Data pointer(float*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayDouble">
            <summary>
            Data pointer(double*) which can be accessed without unsafe code.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Cols">
            <summary>
            number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Height">
            <summary>
            number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Rows">
            <summary>
            number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Width">
            <summary>
            number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.RefCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Dims">
            <summary>
            Number of dimensions (=2)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Item(System.Int32,System.Int32)">
            <summary>
            Gets/Sets the particular element of single-channel floating-point matrix (cvmGet/cvmSet)
            </summary>
            <param name="row">The zero-based index of row. </param>
            <param name="col">The zero-based index of column. </param>
            <returns>the particular element's value</returns>
        </member>
        <member name="T:OpenCvSharp.BitmapConverter">
            <summary>
            static class which provides conversion between System.Drawing.Bitmap and IplImage
            </summary>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.ToIplImage(System.Drawing.Bitmap)">
            <summary>
            Converts System.Drawing.Bitmap to IplImage
            </summary>
            <param name="src">System.Drawing.Bitmap object to be converted</param>
            <returns>An IplImage object which is converted from System.Drawing.Bitmap</returns>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.ToIplImage(System.Drawing.Bitmap,OpenCvSharp.IplImage)">
            <summary>
            Converts System.Drawing.Bitmap to IplImage
            </summary>
            <param name="src">System.Drawing.Bitmap object to be converted</param>
            <param name="dst">An IplImage object which is converted from System.Drawing.Bitmap</param>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.ToBitmap(OpenCvSharp.IplImage)">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <param name="src">System.Drawing.Bitmap</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.ToBitmap(OpenCvSharp.IplImage,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <param name="src">System.Drawing.Bitmap</param>
            <param name="pf">Pixel Depth</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.ToBitmap(OpenCvSharp.IplImage,System.Drawing.Bitmap)">
            <summary>
            Converts IplImage to System.Drawing.Bitmap
            </summary>
            <param name="src">System.Drawing.Bitmap</param>
            <param name="dst">IplImage</param>
            <remarks>Author: Schima, Gummo (ROI support)</remarks>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.DrawToHdc(OpenCvSharp.IplImage,System.IntPtr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hdc"></param>
            <param name="dstRect"></param>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.DrawToHdc(OpenCvSharp.IplImage,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hdc"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="from_x"></param>
            <param name="from_y"></param>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.DrawToGraphics(OpenCvSharp.IplImage,System.Drawing.Graphics,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="g"></param>
            <param name="dstRect"></param>
        </member>
        <member name="M:OpenCvSharp.BitmapConverter.DrawToGraphics(OpenCvSharp.IplImage,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="g"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="from_x"></param>
            <param name="from_y"></param>
        </member>
        <member name="T:OpenCvSharp.CvStereoGCState">
            <summary>
            The structure for graph cuts-based stereo correspondence algorithm
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStereoGCState._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates the state of graph cut-based stereo correspondence algorithm (cvCreateStereoGCState)
            </summary>
            <param name="numberOfDisparities">The number of disparities. The disparity search range will be state-&gt;minDisparity ≤ disparity &lt; state-&gt;minDisparity + state-&gt;numberOfDisparities</param>
            <param name="maxIters">Maximum number of iterations. On each iteration all possible (or reasonable) alpha-expansions are tried. The algorithm may terminate earlier if it could not find an alpha-expansion that decreases the overall cost function value.</param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="F:OpenCvSharp.CvStereoGCState.SizeOf">
            <summary>
            sizeof(CvStereoGCState) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Computes the disparity map using graph cut-based algorithm (cvFindStereoCorrespondenceGC)
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="dispLeft">The optional output single-channel 16-bit signed left disparity map of the same size as input images. </param>
            <param name="dispRight">The optional output single-channel 16-bit signed right disparity map of the same size as input images. </param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            Computes the disparity map using graph cut-based algorithm (cvFindStereoCorrespondenceGC)
            </summary>
            <param name="left">The left single-channel, 8-bit image. </param>
            <param name="right">The right image of the same size and the same type. </param>
            <param name="dispLeft">The optional output single-channel 16-bit signed left disparity map of the same size as input images. </param>
            <param name="dispRight">The optional output single-channel 16-bit signed right disparity map of the same size as input images. </param>
            <param name="useDisparityGuess">If the parameter is not zero, the algorithm will start with pre-defined disparity maps. Both dispLeft and dispRight should be valid disparity maps. Otherwise, the function starts with blank disparity maps (all pixels are marked as occlusions). </param>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Ithreshold">
            <summary>
            threshold for piece-wise linear data cost function (5 by default)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.InteractionRadius">
            <summary>
            radius for smoothness cost function (1 by default; means Potts model)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.K">
            <summary>
            parameters for the cost function (usually computed adaptively from the input data)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda">
            <summary>
            parameters for the cost function (usually computed adaptively from the input data)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda1">
            <summary>
            parameters for the cost function (usually computed adaptively from the input data)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda2">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.OcclusionCost">
            <summary>
            cost of occlusion (10000 by default)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.MinDisparity">
            <summary>
            minimum disparity of SAD(Sum of Absolute Difference) (0 by default)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.NumberOfDisparities">
            <summary>
            maximum disparity - minimum disparity of SAD(Sum of Absolute Difference) ; defined by user
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.MaxIters">
            <summary>
            number of iterations; defined by user.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.DispLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.DispRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.PtrLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.PtrRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.VtxBuf">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.EdgeBuf">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvObjectDetection">
            <summary>
            structure contains the bounding box and confidence level for detected object 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObjectDetection.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObjectDetection.Score">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.#ctor(OpenCvSharp.CvRect,System.Single)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="score"></param>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.Equals(OpenCvSharp.CvObjectDetection)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.op_Equality(OpenCvSharp.CvObjectDetection,OpenCvSharp.CvObjectDetection)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.op_Inequality(OpenCvSharp.CvObjectDetection,OpenCvSharp.CvObjectDetection)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CvFeatureTree">
            <summary>
            A balanced kd-tree index of feature vectors
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFeatureTree._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.#ctor(OpenCvSharp.CvMat)">
            <summary>
            Constructs a tree of feature vectors
            </summary>
            <param name="desc">n x d matrix of n d-dimensional feature vectors (CV_32FC1 or CV_64FC1). </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.#ctor(System.IntPtr)">
            <summary>
            Constructs from native pointer
            </summary>
            <param name="ptr">struct CvFeatureTree*</param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateFeatureTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs a tree of feature vectors
            </summary>
            <param name="desc">n x d matrix of n d-dimensional feature vectors (CV_32FC1 or CV_64FC1). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateKDTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs kd-tree from set of feature descriptors
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs spill-tree from set of feature descriptors
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <param name="tau"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
            <param name="k">The number of neighbors to find. </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Finds approximate k nearest neighbors of given vectors using best-bin-first search.
            </summary>
            <param name="desc">m x d matrix of (row-)vectors to find the nearest neighbors of. </param>
            <param name="results">m x k set of row indices of matching vectors (referring to matrix passed to cvCreateFeatureTree). Contains -1 in some columns if fewer than k neighbors found. </param>
            <param name="dist">m x k matrix of distances to k nearest neighbors. </param>
            <param name="k">The number of neighbors to find. </param>
            <param name="emax">The maximum number of leaves to visit. </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeaturesBoxed(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Performs orthogonal range seaching on the given kd-tree.
            </summary>
            <param name="bounds_min">1 x d or d x 1 vector (CV_32FC1 or CV_64FC1) giving minimum value for each dimension. </param>
            <param name="bounds_max">1 x d or d x 1 vector (CV_32FC1 or CV_64FC1) giving maximum value for each dimension. </param>
            <param name="result">1 x m or m x 1 vector (CV_32SC1) to contain output row indices (referring to matrix passed to cvCreateFeatureTree). </param>
            <returns>the number of such vectors found. </returns>
        </member>
        <member name="T:OpenCvSharp.ImageEncodingParam">
            <summary>
            The format-specific save parameters for cv::imwrite and cv::imencode
            </summary>
        </member>
        <member name="M:OpenCvSharp.ImageEncodingParam.#ctor(OpenCvSharp.ImageEncodingID,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">format type ID</param>
            <param name="value">value of parameter</param>
        </member>
        <member name="P:OpenCvSharp.ImageEncodingParam.EncodingID">
            <summary>
            format type ID
            </summary>
        </member>
        <member name="P:OpenCvSharp.ImageEncodingParam.Value">
            <summary>
            value of parameter
            </summary>
        </member>
        <member name="T:OpenCvSharp.JpegEncodingParam">
            <summary>
            The format-specific save parameters for cv::imwrite and cv::imencode
            </summary>
        </member>
        <member name="M:OpenCvSharp.JpegEncodingParam.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">value of parameter, from 0 to 100 (the higher is the better), 95 by default.</param>
        </member>
        <member name="T:OpenCvSharp.PngEncodingParam">
            <summary>
            The format-specific save parameters for cv::imwrite and cv::imencode
            </summary>
        </member>
        <member name="M:OpenCvSharp.PngEncodingParam.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">value of parameter, from 0 to 9 (the higher value means smaller size and longer compression time), 3 by default.</param>
        </member>
        <member name="T:OpenCvSharp.PxmEncodingParam">
            <summary>
            The format-specific save parameters for cv::imwrite and cv::imencode
            </summary>
        </member>
        <member name="M:OpenCvSharp.PxmEncodingParam.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">value of parameter. binary format flag, 0 or 1, 1 by default.</param>
        </member>
        <member name="T:OpenCvSharp.MarkerStyle">
            <summary>
            Marker styles for CvArr.DrawMarker
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleLine">
            <summary>
            A circle polyline
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleFilled">
            <summary>
            A filled circle
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.Cross">
            <summary>
            A cross
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.TiltedCross">
            <summary>
            A tilted cross
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleAndCross">
            <summary>
            A circle and a cross
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleAndTiltedCross">
            <summary>
            A circle and a tilted cross
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.DiamondLine">
            <summary>
            A diamond polyline
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.DiamondFilled">
            <summary>
            A filled diamond
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.SquareLine">
            <summary>
            A square polyline
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.SquareFilled">
            <summary>
            A filledsquare
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCallback">
            <summary>
            Read callback function
            </summary>
            <param name="index"></param>
            <param name="buffer"></param>
            <param name="user_data"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvScalar">
            <summary>
            A container for 1-,2-,3- or 4-tuples of numbers
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.SizeOf">
            <summary>
            sizeof(CvScalar) 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val0">
            <summary>
            1st element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val1">
            <summary>
            2nd element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val2">
            <summary>
            3rd element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val3">
            <summary>
            4th element
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="val0"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
            <param name="val2"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
            <param name="val2"></param>
            <param name="val3"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.ScalarAll(System.Double)">
            <summary>
            Initializes val[0]...val[3] with val0123
            </summary>
            <param name="val0123"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.RealScalar(System.Double)">
            <summary>
            Initializes val[0] with val0, val[1]...val[3] with zeros
            </summary>
            <param name="val0"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Explicit(System.Double[])~OpenCvSharp.CvScalar">
            <summary>
            Creates a CvScalar with the members of the specified array.
            </summary>
            <param name="obj">An array that specifies the members for the new CvScalar.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Implicit(System.Double)~OpenCvSharp.CvScalar">
            <summary>
            Creates a CvScalar with the specified double value like cvRealScalar.
            </summary>
            <param name="obj">A double value that specifies the members for the new CvScalar.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Explicit(OpenCvSharp.CvScalar)~System.Double[]">
            <summary>
            Creates a CvScalar with the specified double array.
            </summary>
            <param name="self">A CvScalar that specifies the members for the new array.</param>
            <returns>double[4]</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Implicit(OpenCvSharp.CvScalar)~System.Double">
            <summary>
            Returns a double value with the specified CvScalar's Val0.
            </summary>
            <param name="self">A CvScalar that specifies the new double value.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.Equals(OpenCvSharp.CvScalar)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Equality(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Inequality(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CvScalar.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint">
            <summary>
            2D point with integer coordinates
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.SizeOf">
            <summary>
            sizeof(CvPoint)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.X">
            <summary>
            x-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.Y">
            <summary>
            y-coordinate, usually zero-based
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.Empty">
            <summary>
            Represents a CvPoint structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate, usually zero-based</param>
            <param name="y">y-coordinate, usually zero-based</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Equals(OpenCvSharp.CvPoint)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Equality(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Inequality(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X or Y properties of the two CvPoint objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_UnaryPlus(OpenCvSharp.CvPoint)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_UnaryNegation(OpenCvSharp.CvPoint)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Addition(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Subtraction(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Multiply(OpenCvSharp.CvPoint,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Distance(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DistanceTo(OpenCvSharp.CvPoint)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DotProduct(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DotProduct(OpenCvSharp.CvPoint)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.CrossProduct(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.CrossProduct(OpenCvSharp.CvPoint)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSize2D32f">
            <summary>
            Sub-pixel accurate size of a rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.SizeOf">
            <summary>
            sizeof(CvSize2D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Width">
            <summary>
            Width of the box
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Height">
            <summary>
            Height of the box
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Empty">
            <summary>
            Represents a CvSize2D32f structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="width">Width of the box</param>
            <param name="height">Height of the box</param>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Implicit(OpenCvSharp.CvSize2D32f)~OpenCvSharp.CvSize">
            <summary>
            Creates a CvSize with the coordinates of the specified CvSize2D32f.
            </summary>
            <param name="self">A CvSize2D32f that specifies the coordinates for the new CvSize.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Implicit(OpenCvSharp.CvSize)~OpenCvSharp.CvSize2D32f">
            <summary>
            Creates a CvSize2D32f with the coordinates of the specified CvSize.
            </summary>
            <param name="obj">A CvSize that specifies the coordinates for the new CvSize2D32f.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.Equals(OpenCvSharp.CvSize2D32f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Equality(OpenCvSharp.CvSize2D32f,OpenCvSharp.CvSize2D32f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Inequality(OpenCvSharp.CvSize2D32f,OpenCvSharp.CvSize2D32f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.RotateEdgeFlag">
            <summary>
            Specifies, which of edges of the same quad-edge as the input one to return
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Input">
            <summary>
            the input edge (e on the picture above if e is the input edge) 
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Rotate">
            <summary>
            the rotated edge (eRot) 
            [= 1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Reverse">
            <summary>
            the reversed edge (reversed e (in green)) 
            [= 2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.ReverseRotate">
            <summary>
            the reversed rotated edge (reversed eRot (in green)) 
            [= 3]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSetElem">
            <summary>
            List of free nodes
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSetElem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSetElem.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvSetElem*</param>
        </member>
        <member name="F:OpenCvSharp.CvSetElem.SizeOf">
            <summary>
            sizeof(CvSetElem) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSetElem.NextFree">
            <summary>
            if the node is free, the field is a pointer to next free node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSetElem.Flags">
            <summary>
            it is true if the node is free and false otherwise
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTreeNodeIterator`1">
            <summary>
            Class that is used to traverse trees
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Convert to generic class
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.NextTreeNode">
            <summary>
            Returns the currently observed node and moves iterator toward the next node
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.PrevTreeNode">
            <summary>
            Returns the currently observed node and moves iterator toward the previous node
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPOSITObject">
            <summary>
            Structure containing object information
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPOSITObject._disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.#ctor(OpenCvSharp.CvPoint3D32f[])">
            <summary>
            Constructor (cvCreatePOSITObject)
            </summary>
            <param name="points">Points of the 3D object model. </param>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.#ctor(System.IntPtr)">
            <summary>
            Constructs from pointer
            </summary>
            <param name="ptr">struct CvPOSITObject*</param>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.POSIT(OpenCvSharp.CvPoint2D32f[],System.Double,OpenCvSharp.CvTermCriteria,System.Single[0:,0:]@,System.Single[]@)">
            <summary>
            Implements POSIT algorithm
            </summary>
            <param name="image_points">Object points projections on the 2D image plane.</param>
            <param name="focal_length">Focal length of the camera used.</param>
            <param name="criteria">Termination criteria of the iterative POSIT algorithm.</param>
            <param name="rotation_matrix">Matrix of rotations.</param>
            <param name="translation_vector">Translation vector.</param>
        </member>
        <member name="T:OpenCvSharp.CvHaarClassifier">
            <summary>
            a single tree classifier (stump in the simplest case) that returns the response for the feature
            at the particular image location (i.e. pixel sum over subrectangles of the window) and gives out
            a value depending on the responce
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifier.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">struct CvHaarClassifier*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifier.SizeOf">
            <summary>
            sizeof(CvHaarClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Count">
            <summary>
            Number of nodes in the decision tree
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.HaarFeature">
            <summary>
            Array of haar features
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Threshold">
            <summary>
            branch threshold. if feature responce is &lt;= threshold, left branch is chosen, otherwise right branch is chosed.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Left">
            <summary>
            index of the left child (or negated index if the left child is a leaf)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Right">
            <summary>
            index of the right child (or negated index if the right child is a leaf)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Alpha">
            <summary>
            output value correponding to the leaf.
            </summary>
        </member>
    </members>
</doc>
